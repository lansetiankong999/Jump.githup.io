<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BLOG</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kongxianghe.top/"/>
  <updated>2018-10-23T15:07:23.481Z</updated>
  <id>http://kongxianghe.top/</id>
  
  <author>
    <name>Kongxiang He</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/centos7%E5%AE%89%E8%A3%85mysql5.6%E6%95%99%E7%A8%8B/"/>
    <id>http://kongxianghe.top/2018/10/23/centos7安装mysql5.6教程/</id>
    <published>2018-10-23T15:07:39.279Z</published>
    <updated>2018-10-23T15:07:23.481Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、安装MySQL</strong><br><br>1、下载安装包mysql-5.6.34-linux-glibc2.5-x86_64.tar（可前往官网自行下载：<a href="http://dev.mysql.com/downloads/mysql/）（本人使用sftp将存放在widows上的mysql5.6上传至服务器）" target="_blank" rel="noopener">http://dev.mysql.com/downloads/mysql/）（本人使用sftp将存放在widows上的mysql5.6上传至服务器）</a><br><br>2、卸载系统自带的Mariadb<br>打开Terminal终端：</p><p>==[root@localhost ~]# rpm -qa|grep mariadb  // 查询出来已安装的mariadb==<br><br>==[root@localhost ~]# rpm -e –nodeps 文件名  // 卸载mariadb，文件名为上述命令查询出来的文件==</p><p>3、删除etc目录下的my.cnf<br><br>==[root@localhost ~]# rm /etc/my.cnf==</p><p>4、执行以下命令来创建mysql用户组（注：如果用户已存在，就不用加了）<br><br>==[root@localhost ~]# groupadd mysql==</p><p>5、执行以下命令来创建一个用户名为mysql的用户并加入mysql用户组<br><br>==[root@localhost ~]# useradd -g mysql mysql==</p><p>6、将下载的压缩包放到 /usr/local/ 目录下（通过mv 要移动的文件  /usr/local/）</p><p>7、解压安装包<br><br>==[root@localhost ~]# tar -xvf mysql-5.6.34-linux-glibc2.5-x86_64.tar==<br><br>注：如果压缩包为：mysql-5.6.34-linux-glibc2.5-x86_64.tar.gz，<br>则解压命令为: tar -zxvf mysql-5.6.34-linux-glibc2.5-x86_64.tar.gz</p><p>8、将解压好的文件夹重命名为mysql<br><br>==[root@localhost local]# mv 解压出来的文件夹名 mysql==</p><p>9、在 etc 下新建配置文件my.cnf，并在该文件中添加一下代码：<br><br>当然，也有简单方式：直接copy一份my.cnf文件到/etc下，然后再修改即可。<br>e g：copy一份/usr/local/mysql/support-files/下的my-default.cnf文件到/etc下 命令为：<br><br>==[root@localhost support-files]# cp my-default.cnf /etc/my.cnf==<br><br>然后，配置/etc目录下的my.cnf文件<br><br>==[root@localhost support-files]# vim /etc/my.cnf==<br>通过vim编辑器编辑my.cnf代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8 </span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br><span class="line">#设置3306端口</span><br><span class="line">port = 3306 </span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">lower_case_table_name=1</span><br><span class="line">max_allowed_packet=108M</span><br></pre></td></tr></table></figure></p><p>10、进入安装mysql软件目录<br><br>==[root@localhost ~]# cd /usr/local/mysql==<br>==[root@localhost mysql]# chown -R mysql:mysql ./== <br>       修改当前目录拥有着为mysql用户<br><br>==[root@localhost mysql]# ./scripts/mysql_install_db –user=mysql –basedir=/usr/local/mysql/ –datadir=/usr/local/mysql/data/==<br> 安装数据库（注意查看日志！！！）<br><br>注：若执行以上最后一个命令出现以下问题：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FATAL ERROR: please install the following Perl modules before executing </span><br><span class="line">./scripts/mysql_install_db:Data::Dumper</span><br></pre></td></tr></table></figure><p><br><br>解决方法 ：安装autoconf库<br><br>命令: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install autoconf</span><br><span class="line">//此包安装时会安装Data:Dumper模块安装完成重新执行上述最后一个命令</span><br></pre></td></tr></table></figure><p>重新回到上述第三个命令继续操作：<br><br>==[root@localhost mysql]# chown -R mysql:mysql data==<br> 修改当前data目录的拥有者为mysql用户<br>到此数据库安装完毕！<br></p><p><strong><em>二、配置MySQL</em></strong><br><br>1、授予my.cnf最大权限<br><br>==[root@localhost ~]# chown 777 /etc/my.cnf==<br><br>设置开机自启动服务控制脚本：<br><br>2、复制启动脚本到资源目录<br><br>==[root@localhost mysql]# cp ./support-files/mysql.server /etc/rc.d/init.d/mysqld==<br><br>3、增加mysqld服务控制脚本执行权限<br><br>==[root@localhost mysql]# chmod +x /etc/rc.d/init.d/mysqld==<br><br>4、将mysqld服务加入到系统服务<br><br>==[root@localhost mysql]# chkconfig –add mysqld==<br><br>5、检查mysqld服务是否已经生效<br><br>==[root@localhost mysql]# chkconfig –list mysqld==<br><br>命令输出类似下面的结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqld 0:off 1:off 2:on 3:on 4:on 5:on 6:off</span><br><span class="line">表明mysqld服务已经生效，在2、3、4、5运行级别随系统启动而自动启动，以后可以使用service命令控制mysql的启动和停止</span><br><span class="line">命令为:service mysqld start和service mysqld stop</span><br></pre></td></tr></table></figure><p>6、启动mysqld<br><br>==[root@localhost mysql]# service mysqld start==</p><p>(本人出现的错误)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@gipweb mysql]# service mysqld start</span><br><span class="line">Starting MySQL.Logging to &apos;/usr/local/mysql/data/gipweb.err&apos;.</span><br><span class="line">180829 17:58:44 mysqld_safe Directory &apos;/var/lib/mysql&apos; for UNIX socket file don&apos;t exists.</span><br><span class="line"> ERROR! The server quit without updating PID file (/usr/local/mysql/data/gipweb.pid).</span><br><span class="line">（解决办法）</span><br><span class="line">[root@gipweb mysql]# mkdir -p /var/lib/mysql</span><br><span class="line">[root@gipweb mysql]# chown mysql:mysql /var/lib/mysql/</span><br><span class="line">[root@gipweb mysql]# service mysqld start</span><br></pre></td></tr></table></figure><p>7、将mysql的bin目录加入PATH环境变量，编辑 ~/.bash_profile文件<br><br>==[root@localhost mysql]# vim ~/.bash_profile==<br><br>在文件最后添加如下信息:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/mysql/bin</span><br></pre></td></tr></table></figure><p><br><br>然后按ESC键<br><br>继续 shift键加冒号打出来=&gt;  ：<br><br>接下来输入wq回车即可<br>执行下面的命令是修改的内容立即生效:<br></p><p>==[root@localhost mysql]# source ~/.bash_profile==<br><br>8、以root账户登录mysql,默认是没有密码的<br>==[root@localhost mysql]# mysql -uroot -p==<br><br>要输入密码的时候直接回车即可。<br><br>9、设置root账户密码为root（也可以修改成你要的密码）<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;use mysql</span><br><span class="line">mysql&gt;update user set password=password(&apos;root&apos;) where user=&apos;root&apos; and host=&apos;localhost&apos;;</span><br><span class="line">mysql&gt;flush privileges;</span><br></pre></td></tr></table></figure><p>10、设置远程主机登录，注意下面的your username 和 your password改成你需要设置的用户和密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;GRANT ALL PRIVILEGES ON *.* TO &apos;your username&apos;@&apos;%&apos; IDENTIFIED BY &apos;your password&apos; WITH</span><br><span class="line">GRANT OPTION;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;一、安装MySQL&lt;/strong&gt;&lt;br&gt;&lt;br&gt;1、下载安装包mysql-5.6.34-linux-glibc2.5-x86_64.tar（可前往官网自行下载：&lt;a href=&quot;http://dev.mysql.com/downloads/mysql/）
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98%E5%85%A5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%A1%A8%E6%83%85%E5%87%BA%E9%94%99/"/>
    <id>http://kongxianghe.top/2018/10/23/数据库存入移动端表情出错/</id>
    <published>2018-10-23T14:51:26.282Z</published>
    <updated>2018-10-23T14:03:38.321Z</updated>
    
    <content type="html"><![CDATA[<p>一.修改数据库字符集为utf8mb4,重启服务器<br><br>2.在进行数据的插入和更新操作前执行<br><br>sql：set namesutf8mb4;<br><br>如使用mybatis时创建如下方法，在执行其他sql语句前调用即可：<br><br>@Select(“SET NAMES ‘utf8mb4’”)<br><br>public void setUTF8MB4();<br><br>其实也可以通过配置来解决，如在数据库的连接池配置中使用：</p><p><property name="connectionInitSqls" value="set names utf8mb4;"><br>重启应用，问题解决。</property></p><p>二.在代码中将该表情去除<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.replaceAll(&quot;[\ud800\udc00-\udbff\udfff\ud800-\udfff]&quot;, &quot;&quot;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一.修改数据库字符集为utf8mb4,重启服务器&lt;br&gt;&lt;br&gt;2.在进行数据的插入和更新操作前执行&lt;br&gt;&lt;br&gt;sql：set namesutf8mb4;&lt;br&gt;&lt;br&gt;如使用mybatis时创建如下方法，在执行其他sql语句前调用即可：&lt;br&gt;&lt;br&gt;@Select(
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%EF%BC%88JMM%EF%BC%89/"/>
    <id>http://kongxianghe.top/2018/10/23/Java内存模型（JMM）/</id>
    <published>2018-10-23T14:50:03.047Z</published>
    <updated>2018-10-23T14:49:22.300Z</updated>
    
    <content type="html"><![CDATA[<p><em>i.内存模型概述</em></p><p>&nbsp;&nbsp;&nbsp;&nbsp;Java平台自动集成了线程以及多处理器技术，这种集成程度比Java以前诞生的计算机语言要厉害很多，该语言针对多种异构平台的平台独立性而使用的多线程技术支持也是具有开拓性的一面，有时候在开发Java同步和线程安全要求很严格的程序时，往往容易混淆的一个概念就是内存模型。究竟什么是内存模型？内存模型描述了程序中各个变量（实例域、静态域和数组元素）之间的关系，以及在实际计算机系统中将变量存储到内存和从内存中取出变量这样的底层细节，对象最终是存储在内存里面的，这点没有错，但是编译器、运行库、处理器或者系统缓存可以有特权在变量指定内存位置存储或者取出变量的值。【JMM】（Java Memory Model的缩写）允许编译器和缓存以数据在处理器特定的缓存（或寄存器）和主存之间移动的次序拥有重要的特权，除非程序员使用了final或synchronized明确请求了某些可见性的保证。</p><p><em>1)JSR133：</em></p><p>&nbsp;&nbsp;&nbsp;&nbsp;在Java语言规范里面指出了JMM是一个比较开拓性的尝试，这种尝试视图定义一个一致的、跨平台的内存模型，但是它有一些比较细微而且很重要的缺点。其实Java语言里面比较容易混淆的关键字主要是synchronized和volatile，也因为这样在开发过程中往往开发者会忽略掉这些规则，这也使得编写同步代码比较困难。<br>JSR133本身的目的是为了修复原本JMM的一些缺陷而提出的，其本身的制定目标有以下几个：</p><ol><li>保留目前JVM的安全保证，以进行类型的安全检查；</li><li>提供（out-of-thin-air safety）无中生有安全性，这样“正确同步的”应该被正式而且直观地定义；</li><li>程序员要有信心开发多线程程序，当然没有其他办法使得并发程序变得很容易开发，但是该规范的发布主要目标是为了减轻程序员理解内存模型中的一些细节负担；</li><li>提供大范围的流行硬件体系结构上的高性能JVM实现，现在的处理器在它们的内存模型上有着很大的不同，JMM应该能够适合于实际的尽可能多的体系结构而不以性能为代价，这也是Java跨平台型设计的基础；</li><li>提供一个同步的习惯用法，以允许发布一个对象使他不用同步就可见，这种情况又称为初始化安全（initialization safety）的新的安全保证；<br>6.对现有代码应该只有最小限度的影响。</li></ol><p><strong><em>2)同步、异步</em></strong></p><blockquote><p>【这里仅仅指概念上的理解，不牵涉到计算机底层基础的一些操作】：</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;在系统开发过程，经常会遇到这几个基本概念，不论是网络通讯、对象之间的消息通讯还是Web开发人员常用的Http请求都会遇到这样几个概念，经常有人提到Ajax是异步通讯方式，那么究竟怎样的方式是这样的概念描述呢？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;同步：同步就是在发出一个功能调用的时候，在没有得到响应之前，该调用就不返回，按照这样的定义，其实大部分程序的执行都是同步调用的，一般情况下，在描述同步和异步操作的时候，主要是指代需要其他部件协作处理或者需要协作响应的一些任务处理。比如有一个线程A，在A执行的过程中，可能需要B提供一些相关的执行数据，当然触发B响应的就是A向B发送一个请求或者说对B进行一个调用操作，如果A在执行该操作的时候是同步的方式，那么A就会停留在这个位置等待B给一个响应消息，在B没有任何响应消息回来的时候，A不能做其他事情，只能等待，那么这样的情况，A的操作就是一个同步的简单说明。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;异步：异步就是在发出一个功能调用的时候，不需要等待响应，继续进行它该做的事情，一旦得到响应了过后给予一定的处理，但是不影响正常的处理过程的一种方式。比如有一个线程A，在A执行的过程中，同样需要B提供一些相关数据或者操作，当A向B发送一个请求或者对B进行调用操作过后，A不需要继续等待，而是执行A自己应该做的事情，一旦B有了响应过后会通知A，A接受到该异步请求的响应的时候会进行相关的处理，这种情况下A的操作就是一个简单的异步操作。</p><p>　　<strong><em>3)可见性、可排序性</em></strong>　</p><blockquote><p>　　Java内存模型的两个关键概念：可见性（Visibility）和可排序性（Ordering）</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;开发过多线程程序的程序员都明白，synchronized关键字强制实施一个线程之间的互斥锁（相互排斥），该互斥锁防止每次有多个线程进入一个给定监控器所保护的同步语句块，也就是说在该情况下，执行程序代码所独有的某些内存是独占模式，其他的线程是不能针对它执行过程所独占的内存进行访问的，这种情况称为该内存不可见。但是在该模型的同步模式中，还有另外一个方面：JMM中指出了，JVM在处理该强制实施的时候可以提供一些内存的可见规则，在该规则里面，它确保当存在一个同步块时，缓存被更新，当输入一个同步块时，缓存失效。因此在JVM内部提供给定监控器保护的同步块之中，一个线程所写入的值对于其余所有的执行由同一个监控器保护的同步块线程来说是可见的，这就是一个简单的可见性的描述。这种机器保证编译器不会把指令从一个同步块的内部移到外部，虽然有时候它会把指令由外部移动到内部。JMM在缺省情况下不做这样的保证——只要有多个线程访问相同变量时必须使用同步。</p><p><em>简单总结：<br>　　可见性就是在多核或者多线程运行过程中内存的一种共享模式，在JMM模型里面，通过并发线程修改变量值的时候，必须将线程变量同步回主存过后，其他线程才可能访问到。</em>　　</p><p>&nbsp;&nbsp;&nbsp;&nbsp;【*：简单讲，内存的可见性使内存资源可以共享，当一个线程执行的时候它所占有的内存，如果它占有的内存资源是可见的，那么这时候其他线程在一定规则内是可以访问该内存资源的，这种规则是由JMM内部定义的，这种情况下内存的该特性称为其可见性。】</p><p>&nbsp;&nbsp;&nbsp;&nbsp;可排序性提供了内存内部的访问顺序，在不同的程序针对不同的内存块进行访问的时候，其访问不是无序的，比如有一个内存块，A和B需要访问的时候，JMM会提供一定的内存分配策略有序地分配它们使用的内存，而在内存的调用过程也会变得有序地进行，内存的折中性质可以简单理解为有序性。而在Java多线程程序里面，JMM通过Java关键字volatile来保证内存的有序访问。</p><p>　　<strong><em>ii.JMM结构：</em></strong><br><br>　　<em>1)简单分析：</em><br><br>　　Java语言规范中提到过，JVM中存在一个主存区（Main Memory或Java Heap Memory），Java中所有变量都是存在主存中的，对于所有线程进行共享，而每个线程又存在自己的工作内存（Working Memory），工作内存中保存的是主存中某些变量的拷贝，线程对所有变量的操作并非发生在主存区，而是发生在工作内存中，而线程之间是不能直接相互访问，变量在程序中的传递，是依赖主存来完成的。而在多核处理器下，大部分数据存储在高速缓存中，如果高速缓存不经过内存的时候，也是不可见的一种表现。在Java程序中，内存本身是比较昂贵的资源，其实不仅仅针对Java应用程序，对操作系统本身而言内存也属于昂贵资源，Java程序在性能开销过程中有几个比较典型的可控制的来源。synchronized和volatile关键字提供的内存中模型的可见性保证程序使用一个特殊的、存储关卡（memory barrier）的指令，来刷新缓存，使缓存无效，刷新硬件的写缓存并且延迟执行的传递过程，无疑该机制会对Java程序的性能产生一定的影响。</p><p>　　JMM的最初目的，就是为了能够支持多线程程序设计的，每个线程可以认为是和其他线程不同的CPU上运行，或者对于多处理器的机器而言，该模型需要实现的就是使得每一个线程就像运行在不同的机器、不同的CPU或者本身就不同的线程上一样，这种情况实际上在项目开发中是常见的。对于CPU本身而言，不能直接访问其他CPU的寄存器，模型必须通过某种定义规则来使得线程和线程在工作内存中进行相互调用而实现CPU本身对其他CPU、或者说线程对其他线程的内存中资源的访问，而表现这种规则的运行环境一般为运行该程序的运行宿主环境（操作系统、服务器、分布式系统等），而程序本身表现就依赖于编写该程序的语言特性，这里也就是说用Java编写的应用程序在内存管理中的实现就是遵循其部分原则，也就是前边提及到的JMM定义了Java语言针对内存的一些的相关规则。然而，虽然设计之初是为了能够更好支持多线程，但是该模型的应用和实现当然不局限于多处理器，而在JVM编译器编译Java编写的程序的时候以及运行期执行该程序的时候，对于单CPU的系统而言，这种规则也是有效的，这就是是上边提到的线程和线程之间的内存策略。JMM本身在描述过程没有提过具体的内存地址以及在实现该策略中的实现方法是由JVM的哪一个环节（编译器、处理器、缓存控制器、其他）提供的机制来实现的，甚至针对一个开发非常熟悉的程序员，也不一定能够了解它内部对于类、对象、方法以及相关内容的一些具体可见的物理结构。相反，JMM定义了一个线程与主存之间的抽象关系，其实从上边的图可以知道，每一个线程可以抽象成为一个工作内存（抽象的高速缓存和寄存器），其中存储了Java的一些值，该模型保证了Java里面的属性、方法、字段存在一定的数学特性，按照该特性，该模型存储了对应的一些内容，并且针对这些内容进行了一定的序列化以及存储排序操作，这样使得Java对象在工作内存里面被JVM顺利调用，（当然这是比较抽象的一种解释）既然如此，大多数JMM的规则在实现的时候，必须使得主存和工作内存之间的通信能够得以保证，而且不能违反内存模型本身的结构，这是语言在设计之处必须考虑到的针对内存的一种设计方法。这里需要知道的一点是，这一切的操作在Java语言里面都是依靠Java语言自身来操作的，因为Java针对开发人员而言，内存的管理在不需要手动操作的情况下本身存在内存的管理策略，这也是Java自己进行内存管理的一种优势。<br><br>　　<br>==[1]原子性（Atomicity）：==<br><br>　　这一点说明了该模型定义的规则针对原子级别的内容存在独立的影响，对于模型设计最初，这些规则需要说明的仅仅是最简单的读取和存储单元写入的的一些操作，这种原子级别的包括——实例、静态变量、数组元素，只是在该规则中不包括方法中的局部变量。<br><br>　　<br>==[2]可见性（Visibility）：==<br><br>　　在该规则的约束下，定义了一个线程在哪种情况下可以访问另外一个线程或者影响另外一个线程，从JVM的操作上讲包括了从另外一个线程的可见区域读取相关数据以及将数据写入到另外一个线程内。<br><br>　　<br>==[3]可排序性（Ordering）：==<br><br>　　该规则将会约束任何一个违背了规则调用的线程在操作过程中的一些顺序，排序问题主要围绕了读取、写入和赋值语句有关的序列。<br>　　如果在该模型内部使用了一致的同步性的时候，这些属性中的每一个属性都遵循比较简单的原则：和所有同步的内存块一样，每个同步块之内的任何变化都具备了原子性以及可见性，和其他同步方法以及同步块遵循同样一致的原则，而且在这样的一个模型内，每个同步块不能使用同一个锁，在整个程序的调用过程是按照编写的程序指定指令运行的。即使某一个同步块内的处理可能会失效，但是该问题不会影响到其他线程的同步问题，也不会引起连环失效。简单讲：当程序运行的时候使用了一致的同步性的时候，每个同步块有一个独立的空间以及独立的同步控制器和锁机制，然后对外按照JVM的执行指令进行数据的读写操作。这种情况使得使用内存的过程变得非常严谨！<br>　　如果不使用同步或者说使用同步不一致（这里可以理解为异步，但不一定是异步操作），该程序执行的答案就会变得极其复杂。而且在这样的情况下，该内存模型处理的结果比起大多数程序员所期望的结果而言就变得十分脆弱，甚至比起JVM提供的实现都脆弱很多。因为这样所以出现了Java针对该内存操作的最简单的语言规范来进行一定的习惯限制，排除该情况发生的做法在于：<br>　　JVM线程必须依靠自身来维持对象的可见性以及对象自身应该提供相对应的操作而实现整个内存操作的三个特性，而不是仅仅依靠特定的修改对象状态的线程来完成如此复杂的一个流程。<br>　　【<em>：综上所属，JMM在JVM内部实现的结构就变得相对复杂，当然一般的Java初学者可以不用了解得这么深入。】<br>　　<strong>[4]三个特性的解析（针对JMM内部）：</strong><br>　　原子性（Atomicity）：<br>　　访问存储单元内的任何类型的字段的值以及对其更新操作的时候，除开long类型和double类型，其他类型的字段是必须要保证其原子性的，这些字段也包括为对象服务的引用。此外，该原子性规则扩展可以延伸到基于long和double的另外两种类型：volatile long和volatile double（volatile为java关键字），没有被volatile声明的long类型以及double类型的字段值虽然不保证其JMM中的原子性，但是是被允许的。针对non-long/non-double的字段在表达式中使用的时候，JMM的原子性有这样一种规则：如果你获得或者初始化该值或某一些值的时候，这些值是由其他线程写入，而且不是从两个或者多个线程产生的数据在同一时间戳混合写入的时候，该字段的原子性在JVM内部是必须得到保证的。也就是说JMM在定义JVM原子性的时候，只要在该规则不违反的条件下，JVM本身不去理睬该数据的值是来自于什么线程，因为这样使得Java语言在并行运算的设计的过程中针对多线程的原子性设计变得极其简单，而且即使开发人员没有考虑到最终的程序也没有太大的影响。再次解释一下：这里的原子性指的是原子级别的操作，比如最小的一块内存的读写操作，可以理解为Java语言最终编译过后最接近内存的最底层的操作单元，这种读写操作的数据单元不是变量的值，而是本机码，也就是前边在讲《Java基础知识》中提到的由运行器解释的时候生成的Native Code。<br>　　可见性（Visibility）：<br>　　当一个线程需要修改另外线程的可见单元的时候必须遵循以下原则：<br>一个写入线程释放的同步锁和紧随其后进行读取的读线程的同步锁是同一个<br>从本质上讲，释放锁操作强迫它的隶属线程【释放锁的线程】从工作内存中的写入缓存里面刷新（专业上讲这里不应该是刷新，可以理解为提供）数据（flush操作），然后获取锁操作使得另外一个线程【获得锁的线程】直接读取前一个线程可访问域（也就是可见区域）的字段的值。因为该锁内部提供了一个同步方法或者同步块，该同步内容具有线程排他性，这样就使得上边两个操作只能针对单一线程在同步内容内部进行操作，这样就使得所有操作该内容的单一线程具有该同步内容（加锁的同步方法或者同步块）内的线程排他性，这种情况的交替也可以理解为具有“短暂记忆效应”。<br>这里需要理解的是同步的双重含义：使用锁机制允许基于高层同步协议进行处理操作，这是最基本的同步；同时系统内存（很多时候这里是指基于机器指令的底层存储关卡memory barrier，前边提到过）在处理同步的时候能够跨线程操作，使得线程和线程之间的数据是同步的。这样的机制也折射出一点，并行编程相对于顺序编程而言，更加类似于分布式编程。后一种同步可以作为JMM机制中的方法在一个线程中运行的效果展示，注意这里不是多个线程运行的效果展示，因为它反应了该线程愿意发送或者接受的双重操作，并且使得它自己的可见区域可以提供给其他线程运行或者更新，从这个角度来看，使用锁和消息传递可以视为相互之间的变量同步，因为相对其他线程而言，它的操作针对其他线程也是对等的。<br>一旦某个字段被申明为volatile，在任何一个写入线程在工作内存中刷新缓存的之前需要进行进一步的内存操作，也就是说针对这样的字段进行立即刷新，可以理解为这种volatile不会出现一般变量的缓存操作，而读取线程每次必须根据前一个线程的可见域里面重新读取该变量的值，而不是直接读取。<br>当某个线程第一次去访问某个对象的域的时候，它要么初始化该对象的值，要么从其他写入线程可见域里面去读取该对象的值；这里结合上边理解，在满足某种条件下，该线程对某对象域的值的读取是直接读取，有些时候却需要重新读取。<br>这里需要小心一点的是，在并发编程里面，不好的一个实践就是使用一个合法引用去引用不完全构造的对象，这种情况在从其他写入线程可见域里面进行数据读取的时候发生频率比较高。从编程角度上讲，在构造函数里面开启一个新的线程是有一定的风险的，特别是该类是属于一个可子类化的类的时候。Thread.start由调用线程启动，然后由获得该启动的线程释放锁具有相同的“短暂记忆效应”，如果一个实现了Runnable接口的超类在子类构造子执行之前调用了Thread(this).start()方法，那么就可能使得该对象在线程方法run执行之前并没有被完全初始化，这样就使得一个指向该对象的合法引用去引用了不完全构造的一个对象。同样的，如果创建一个新的线程T并且启动该线程，然后再使用线程T来创建对象X，这种情况就不能保证X对象里面所有的属性针对线程T都是可见的除非是在所有针对X对象的引用中进行同步处理，或者最好的方法是在T线程启动之前创建对象X。<br>若一个线程终止，所有的变量值都必须从工作内存中刷到主存，比如，如果一个同步线程因为另一个使用Thread.join方法的线程而终止，那么该线程的可见域针对那个线程而言其发生的改变以及产生的一些影响是需要保证可知道的。<br>　　注意：如果在同一个线程里面通过方法调用去传一个对象的引用是绝对不会出现上边提及到的可见性问题的。JMM保证所有上边的规定以及关于内存可见性特性的描述——一个特殊的更新、一个特定字段的修改都是某个线程针对其他线程的一个“可见性”的概念，最终它发生的场所在内存模型中Java线程和线程之间，至于这个发生时间可以是一个任意长的时间，但是最终会发生，也就是说，Java内存模型中的可见性的特性主要是针对线程和线程之间使用内存的一种规则和约定，该约定由JMM定义。<br>　　不仅仅如此，该模型还允许不同步的情况下可见性特性。比如针对一个线程提供一个对象或者字段访问域的原始值进行操作，而针对另外一个线程提供一个对象或者字段刷新过后的值进行操作。同样也有可能针对一个线程读取一个原始的值以及引用对象的对象内容，针对另外一个线程读取一个刷新过后的值或者刷新过后的引用。<br>　　尽管如此，上边的可见性特性分析的一些特征在跨线程操作的时候是有可能失败的，而且不能够避免这些故障发生。这是一个不争的事实，使用同步多线程的代码并不能绝对保证线程安全的行为，只是允许某种规则对其操作进行一定的限制，但是在最新的JVM实现以及最新的Java平台中，即使是多个处理器，通过一些工具进行可见性的测试发现其实是很少发生故障的。跨线程共享CPU的共享缓存的使用，其缺陷就在于影响了编译器的优化操作，这也体现了强有力的缓存一致性使得硬件的价值有所提升，因为它们之间的关系在线程与线程之间的复杂度变得更高。这种方式使得可见度的自由测试显得更加不切实际，因为这些错误的发生极为罕见，或者说在平台上我们开发过程中根本碰不到。在并行程开发中，不使用同步导致失败的原因也不仅仅是对可见度的不良把握导致的，导致其程序失败的原因是多方面的，包括缓存一致性、内存一致性问题等。<br>　　可排序性（Ordering）：<br>　　可排序规则在线程与线程之间主要有下边两点：<br>从操作线程的角度看来，如果所有的指令执行都是按照普通顺序进行，那么对于一个顺序运行的程序而言，可排序性也是顺序的<br>从其他操作线程的角度看来，排序性如同在这个线程中运行在非同步方法中的一个“间谍”，所以任何事情都有可能发生。唯一有用的限制是同步方法和同步块的相对排序，就像操作volatile字段一样，总是保留下来使用<br>　　【</em>：如何理解这里“间谍”的意思，可以这样理解，排序规则在本线程里面遵循了第一条法则，但是对其他线程而言，某个线程自身的排序特性可能使得它不定地访问执行线程的可见域，而使得该线程对本身在执行的线程产生一定的影响。举个例子，A线程需要做三件事情分别是A1、A2、A3，而B是另外一个线程具有操作B1、B2，如果把参考定位到B线程，那么对A线程而言，B的操作B1、B2有可能随时会访问到A的可见区域，比如A有一个可见区域a，A1就是把a修改称为1，但是B线程在A线程调用了A1过后，却访问了a并且使用B1或者B2操作使得a发生了改变，变成了2，那么当A按照排序性进行A2操作读取到a的值的时候，读取到的是2而不是1，这样就使得程序最初设计的时候A线程的初衷发生了改变，就是排序被打乱了，那么B线程对A线程而言，其身份就是“间谍”，而且需要注意到一点，B线程的这些操作不会和A之间存在等待关系，那么B线程的这些操作就是异步操作，所以针对执行线程A而言，B的身份就是“非同步方法中的‘间谍’。】<br>　　同样的，这仅仅是一个最低限度的保障性质，在任何给定的程序或者平台，开发中有可能发现更加严格的排序，但是开发人员在设计程序的时候不能依赖这种排序，如果依赖它们会发现测试难度会成指数级递增，而且在复合规定的时候会因为不同的特性使得JVM的实现因为不符合设计初衷而失败。<br>　　注意：第一点在JLS（Java Language Specification）的所有讨论中也是被采用的，例如算数表达式一般情况都是从上到下、从左到右的顺序，但是这一点需要理解的是，从其他操作线程的角度看来这一点又具有不确定性，对线程内部而言，其内存模型本身是存在排序性的。【*：这里讨论的排序是最底层的内存里面执行的时候的NativeCode的排序，不是说按照顺序执行的Java代码具有的有序性质，本文主要分析的是JVM的内存模型，所以希望读者明白这里指代的讨论单元是内存区。】<br>　　iii.原始JMM缺陷：<br>　　JMM最初设计的时候存在一定的缺陷，这种缺陷虽然现有的JVM平台已经修复，但是这里不得不提及，也是为了读者更加了解JMM的设计思路，这一个小节的概念可能会牵涉到很多更加深入的知识，如果读者不能读懂没有关系先看了文章后边的章节再返回来看也可以。<br>　　1)问题1：不可变对象不是不可变的<br>　　学过Java的朋友都应该知道Java中的不可变对象，这一点在本文最后讲解String类的时候也会提及，而JMM最初设计的时候，这个问题一直都存在，就是：不可变对象似乎可以改变它们的值（这种对象的不可变指通过使用final关键字来得到保证），（Publis Service Reminder：让一个对象的所有字段都为final并不一定使得这个对象不可变——所有类型还必须是原始类型而不能是对象的引用。而不可变对象被认为不要求同步的。但是，因为在将内存写方面的更改从一个线程传播到另外一个线程的时候存在潜在的延迟，这样就使得有可能存在一种竞态条件，即允许一个线程首先看到不可变对象的一个值，一段时间之后看到的是一个不同的值。这种情况以前怎么发生的呢？在JDK 1.4中的String实现里，这儿基本有三个重要的决定性字段：对字符数组的引用、长度和描述字符串的开始数组的偏移量。String就是以这样的方式在JDK 1.4中实现的，而不是只有字符数组，因此字符数组可以在多个String和StringBuffer对象之间共享，而不需要在每次创建一个String的时候都拷贝到一个新的字符数组里。假设有下边的代码：<br>String s1 = ”/usr/tmp”;<br>String s2 = s1.substring(4); // “/tmp”<br>　　这种情况下，字符串s2将具有大小为4的长度和偏移量，但是它将和s1共享“/usr/tmp”里面的同一字符数组，在String构造函数运行之前，Object的构造函数将用它们默认的值初始化所有的字段，包括决定性的长度和偏移字段。当String构造函数运行的时候，字符串长度和偏移量被设置成所需要的值。但是在旧的内存模型中，因为缺乏同步，有可能另一个线程会临时地看到偏移量字段具有初始默认值0，而后又看到正确的值4，结果是s2的值从“/usr”变成了“/tmp”，这并不是我们真正的初衷，这个问题就是原始JMM的第一个缺陷所在，因为在原始JMM模型里面这是合理而且合法的，JDK 1.4以下的版本都允许这样做。<br>　　2)问题2：重新排序的易失性和非易失性存储<br>　　另一个主要领域是与volatile字段的内存操作重新排序有关，这个领域中现有的JMM引起了一些比较混乱的结果。现有的JMM表明易失性的读和写是直接和主存打交道的，这样避免了把值存储到寄存器或者绕过处理器特定的缓存，这使得多个线程一般能看见一个给定变量最新的值。可是，结果是这种volatile定义并没有最初想象中那样如愿以偿，并且导致了volatile的重大混乱。为了在缺乏同步的情况下提供较好的性能，编译器、运行时和缓存通常是允许进行内存的重新排序操作的，只要当前执行的线程分辨不出它们的区别。（这就是within-thread as-if-serial semantics[线程内似乎是串行]的解释）但是，易失性的读和写是完全跨线程安排的，编译器或缓存不能在彼此之间重新排序易失性的读和写。遗憾的是，通过参考普通变量的读写，JMM允许易失性的读和写被重排序，这样以为着开发人员不能使用易失性标志作为操作已经完成的标志。比如：<br>Map configOptions;<br>char[] configText;<br>volatile boolean initialized = false;</p><p>// 线程1<br>configOptions = new HashMap();<br>configText = readConfigFile(filename);<br>processConfigOptions(configText,configOptions);<br>initialized = true;</p><p>// 线程2<br>while(!initialized)<br>    sleep();<br>　　这里的思想是使用易失性变量initialized担任守卫来表明一套别的操作已经完成了，这是一个很好的思想，但是不能在JMM下工作，因为旧的JMM允许非易失性的写（比如写到configOptions字段，以及写到由configOptions引用Map的字段中）与易失性的写一起重新排序，因此另外一个线程可能会看到initialized为true，但是对于configOptions字段或它所引用的对象还没有一个一致的或者说当前的针对内存的视图变量，volatile的旧语义只承诺在读和写的变量的可见性，而不承诺其他变量，虽然这种方法更加有效的实现，但是结果会和我们设计之初大相径庭。</p><p>2.堆和栈<br>　　i.Java内存管理简介：<br>　　内存管理在Java语言中是JVM自动操作的，当JVM发现某些对象不再需要的时候，就会对该对象占用的内存进行重分配（释放）操作，而且使得分配出来的内存能够提供给所需要的对象。在一些编程语言里面，内存管理是一个程序的职责，但是书写过C++的程序员很清楚，如果该程序需要自己来书写很有可能引起很严重的错误或者说不可预料的程序行为，最终大部分开发时间都花在了调试这种程序以及修复相关错误上。一般情况下在Java程序开发过程把手动内存管理称为显示内存管理，而显示内存管理经常发生的一个情况就是引用悬挂——也就是说有可能在重新分配过程释放掉了一个被某个对象引用正在使用的内存空间，释放掉该空间过后，该引用就处于悬挂状态。如果这个被悬挂引用指向的对象试图进行原来对象（因为这个时候该对象有可能已经不存在了）进行操作的时候，由于该对象本身的内存空间已经被手动释放掉了，这个结果是不可预知的。显示内存管理另外一个常见的情况是内存泄漏，当某些引用不再引用该内存对象的时候，而该对象原本占用的内存并没有被释放，这种情况简言为内存泄漏。比如，如果针对某个链表进行了内存分配，而因为手动分配不当，仅仅让引用指向了某个元素所处的内存空间，这样就使得其他链表中的元素不能再被引用而且使得这些元素所处的内存让应用程序处于不可达状态而且这些对象所占有的内存也不能够被再使用，这个时候就发生了内存泄漏。而这种情况一旦在程序中发生，就会一直消耗系统的可用内存直到可用内存耗尽，而针对计算机而言内存泄漏的严重程度大了会使得本来正常运行的程序直接因为内存不足而中断，并不是Java程序里面出现Exception那么轻量级。<br>　　在以前的编程过程中，手动内存管理带了计算机程序不可避免的错误，而且这种错误对计算机程序是毁灭性的，所以内存管理就成为了一个很重要的话题，但是针对大多数纯面向对象语言而言，比如Java，提供了语言本身具有的内存特性：自动化内存管理，这种语言提供了一个程序垃圾回收器（Garbage Collector[GC]），自动内存管理提供了一个抽象的接口以及更加可靠的代码使得内存能够在程序里面进行合理的分配。最常见的情况就是垃圾回收器避免了悬挂引用的问题，因为一旦这些对象没有被任何引用“可达”的时候，也就是这些对象在JVM的内存池里面成为了不可引用对象，该垃圾回收器会直接回收掉这些对象占用的内存，当然这些对象必须满足垃圾回收器回收的某些对象规则，而垃圾回收器在回收的时候会自动释放掉这些内存。不仅仅如此，垃圾回收器同样会解决内存泄漏问题。<br>　　ii.详解堆和栈[图片以及部分内容来自《Inside JVM》]：<br>　　1)通用简介<br>　　[编译原理]学过编译原理的人都明白，程序运行时有三种内存分配策略：静态的、栈式的、堆式的<br>　　静态存储——是指在编译时就能够确定每个数据目标在运行时的存储空间需求，因而在编译时就可以给它们分配固定的内存空间。这种分配策略要求程序代码中不允许有可变数据结构的存在，也不允许有嵌套或者递归的结构出现，因为它们都会导致编译程序无法计算准确的存储空间。<br>　　栈式存储——该分配可成为动态存储分配，是由一个类似于堆栈的运行栈来实现的，和静态存储的分配方式相反，在栈式存储方案中，程序对数据区的需求在编译时是完全未知的，只有到了运行的时候才能知道，但是规定在运行中进入一个程序模块的时候，必须知道该程序模块所需要的数据区的大小才能分配其内存。和我们在数据结构中所熟知的栈一样，栈式存储分配按照先进后出的原则进行分配。<br>　　堆式存储——堆式存储分配则专门负责在编译时或运行时模块入口处都无法确定存储要求的数据结构的内存分配，比如可变长度串和对象实例，堆由大片的可利用块或空闲块组成，堆中的内存可以按照任意顺序分配和释放。<br>　　[C++语言]对比C++语言里面，程序占用的内存分为下边几个部分：<br>　　[1]栈区（Stack）：由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。我们在程序中定义的局部变量就是存放在栈里，当局部变量的生命周期结束的时候，它所占的内存会被自动释放。<br>　　[2]堆区（Heap）：一般由程序员分配和释放，若程序员不释放，程序结束时可能由OS回收。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。我们在程序中使用c++中new或者c中的malloc申请的一块内存，就是在heap上申请的，在使用完毕后，是需要我们自己动手释放的，否则就会产生“内存泄露”的问题。<br>　　[3]全局区（静态区）（Static）：全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。<br>　　[4]文字常量区：常量字符串就是放在这里的，程序结束后由系统释放。在Java中对应有一个字符串常量池。<br>　　[5]程序代码区：存放函数体的二进制代码<br>　　2)JVM结构【堆、栈解析】：<br>　　在Java虚拟机规范中，一个虚拟机实例的行为主要描述为：子系统、内存区域、数据类型和指令，这些组件在描述了抽象的JVM内部的一个抽象结构。与其说这些组成部分的目的是进行JVM内部结构的一种支配，更多的是提供一种严格定义实现的外部行为，该规范定义了这些抽象组成部分以及相互作用的任何Java虚拟机执行所需要的行为。下图描述了JVM内部的一个结构，其中主要包括主要的子系统、内存区域，如同以前在《Java基础知识》中描述的：Java虚拟机有一个类加载器作为JVM的子系统，类加载器针对Class进行检测以鉴定完全合格的类接口，而JVM内部也有一个执行引擎：</p><p>　　当JVM运行一个程序的时候，它的内存需要用来存储很多内容，包括字节码、以及从类文件中提取出来的一些附加信息、以及程序中实例化的对象、方法参数、返回值、局部变量以及计算的中间结果。JVM的内存组织需要在不同的运行时数据区进行以上的几个操作，下边针对上图里面出现的几个运行时数据区进行详细解析：一些运行时数据区共享了所有应用程序线程和其他特有的单个线程，每个JVM实例有一个方法区和一个内存堆，这些是共同在虚拟机内运行的线程。在Java程序里面，每个新的线程启动过后，它就会被JVM在内部分配自己的PC寄存器[PC registers]（程序计数器器）和Java堆栈（Java stacks）。若该线程正在执行一个非本地Java方法，在PC寄存器的值指示下一条指令执行，该线程在Java内存栈中保存了非本地Java方法调用状态，其状态包括局部变量、被调用的参数、它的返回值、以及中间计算结果。而本地方法调用的状态则是存储在独立的本地方法内存栈里面（native method stacks），这种情况下使得这些本地方法和其他内存运行时数据区的内容尽可能保证和其他内存运行时数据区独立，而且该方法的调用更靠近操作系统，这些方法执行的字节码有可能根据操作系统环境的不同使得其编译出来的本地字节码的结构也有一定的差异。JVM中的内存栈是一个栈帧的组合，一个栈帧包含了某个Java方法调用的状态，当某个线程调用方法的时候，JVM就会将一个新的帧压入到Java内存栈，当方法调用完成过后，JVM将会从内存栈中移除该栈帧。JVM里面不存在一个可以存放中间计算数据结果值的寄存器，其内部指令集使用Java栈空间来存储中间计算的数据结果值，这种做法的设计是为了保持Java虚拟机的指令集紧凑，使得与寄存器原理能够紧密结合并且进行操作。</p><p>　　1)方法区（Method Area）<br>　　在JVM实例中，对装载的类型信息是存储在一个逻辑方法内存区中，当Java虚拟机加载了一个类型的时候，它会跟着这个Class的类型去路径里面查找对应的Class文件，类加载器读取类文件（线性二进制数据），然后将该文件传递给Java虚拟机，JVM从二进制数据中提取信息并且将这些信息存储在方法区，而类中声明（静态）变量就是来自于方法区中存储的信息。在JVM里面用什么样的方式存储该信息是由JVM设计的时候决定的，例如：当数据进入方法的时候，多类文件字节的存储量以Big-Endian（第一次最重要的字节）的顺序存储，尽管如此，一个虚拟机可以用任何方式针对这些数据进行存储操作，若它存储在一个Little-Endian处理器上，设计的时候就有可能将多文件字节的值按照Little-Endian顺寻存储。<br>　　——【$Big-Endian和Little-Endian】——<br>　　程序存储数据过程中，如果数据是跨越多个字节对象就必须有一种约定：<br>它的地址是多少：对于跨越多个字节的对象，一般它所占的字节都是连续的，它的地址等于它所占字节最低地址，这种情况链表可能存储的仅仅是表头<br>它的字节在内存中是如何组织的<br>　　比如：int x，它的地址为0x100，那么它占据了内存中的0x100、0x101、0x102、0x103四个字节，所以一般情况我们觉得int是4个字节。上边只是内存组织的一种情况，多字节对象在内存中的组织有两种约定，还有一种情况：若一个整数为W位，它的表示如下：<br>　　每一位表示为：[Xw-1,Xw-2,…,X1,X0]<br>　　它的最高有效字节MSB（Most Significant Byte）为：[Xw-1,Xw-2,…,Xw-8]<br>　　最低有效字节LSB（Least Significant Byte）为：[X7,X6,…,X0]<br>　　其余字节则位于LSB和MSB之间<br>　　LSB和MSB谁位于内存的最低地址，即代表了该对象的地址，这样就引出了Big-Endian和Little-Endian的问题，如果LSB在MSB前，LSB是最低地址，则该机器是小端，反之则是大端。DES（Digital Equipment Corporation，现在是Compaq公司的一部分）和Intel机器（x86平台）一般采用小端，IBM、Motorola（Power PC）、Sun的机器一般采用大端。当然这种不能代表所有情况，有的CPU既能工作于小端、又可以工作于大端，比如ARM、Alpha、摩托罗拉的PowerPC，这些情况根据具体的处理器型号有所不同。但是大部分操作系统（Windows、FreeBSD、Linux）一般都是Little<br>Endian的，少部分系统（Mac OS）是Big Endian的，所以用什么方式存储还得依赖宿主操作系统环境。</p><p>　　由上图可以看到，映射访问（“写32位地址的0”）主要是由寄存器到内存、由内存到寄存器的一种数据映射方式，Big-Endian在上图可以看出的原子内存单位（Atomic Unit）在系统内存中的增长方向为从左到右，而Little-Endian的地址增长方向为从右到左。举个例子：<br>　　若要存储数据0x0A0B0C0D：<br>　　Big-Endian：<br>　　以8位为一个存储单位，其存储的地址增长为：</p><p>　　上图中可以看出MSB的值存储了0x0A，这种情况下数据的高位是从内存的低地址开始存储的，然后从左到右开始增长，第二位0x0B就是存储在第二位的，如果是按照16位为一个存储单位，其存储方式又为：</p><p>　　则可以看到Big-Endian的映射地址方式为：</p><p>　　MSB：在计算机中，最高有效位（MSB）是指位值的存储位置为转换为二进制数据后的最大值，MSB有时候在Big-Endian的架构中称为最左最大数据位，这种情况下再往左边的内存位则不是数据位了，而是有效位数位置的最高符号位，不仅仅如此，MSB也可以对应一个二进制符号位的符号位补码标记：“1”的含义为负，“0”的含义为正。最高位代表了“最重要字节”，也就是说当某些多字节数据拥有了最大值的时候它就是存储的时候最高位数据的字节对应的内存位置：</p><p>　　Little-Endian：<br>　　与Big-Endian相对的就是Little-Endian的存储方式，同样按照8位为一个存储单位上边的数据0x0A0B0C0D存储格式为：</p><p>　　可以看到LSB的值存储的0x0D，也就是数据的最低位是从内存的低地址开始存储的，它的高位是从右到左的顺序逐渐增加内存分配空间进行存储的，如果按照十六位为存储单位存储格式为：</p><p>　　从上图可以看到最低的16位的存储单位里面存储的值为0x0C0D，接着才是0x0A0B，这样就可以看到按照数据从高位到低位在内存中存储的时候是从右到左进行递增存储的，实际上可以从写内存的顺序来理解，实际上数据存储在内存中无非在使用的时候是写内存和读内存，针对LSB的方式最好的书面解释就是向左增加来看待，如果真正在进行内存读写的时候使用这样的顺序，其意义就体现出来了：</p><p>　　按照这种读写格式，0x0D存储在最低内存地址，而从右往左的增长就可以看到LSB存储的数据为0x0D，和初衷吻合，则十六位的存储就可以按照下边的格式来解释：</p><p>　　实际上从上边的存储还会考虑到另外一个问题，如果按照这种方式从右往左的方式进行存储，如果是遇到Unicode文字就和从左到右的语言显示方式相反。比如一个单词“XRAY”，使用Little-Endian的方式存储格式为：</p><p>　　使用这种方式进行内存读写的时候就会发现计算机语言和语言本身的顺序会有冲突，这种冲突主要是以使用语言的人的习惯有关，而书面化的语言从左到右就可以知道其冲突是不可避免的。我们一般使用语言的阅读方式都是从左到右，而低端存储（Little-Endian）的这种内存读写的方式使得我们最终从计算机里面读取字符需要进行倒序，而且考虑另外一个问题，如果是针对中文而言，一个字符是两个字节，就会出现整体顺序和每一个位的顺序会进行两次倒序操作，这种方式真正在制作处理器的时候也存在一种计算上的冲突，而针对使用文字从左到右进行阅读的国家而言，从右到左的方式（Big-Endian）则会有这样的文字冲突，另外一方面，尽管有很多国家使用语言是从右到左，但是仅仅和Big-Endian的方式存在冲突，这些国家毕竟占少数，所以可以理解的是，为什么主流的系统都是使用的Little-Endian的方式<br>　　【*：这里不解释Middle-Endian的方式以及Mixed-Endian的方式】<br>　　LSB：在计算机中，最低有效位是一个二进制给予单位的整数，位的位置确定了该数据是一个偶数还是奇数，LSB有时被称为最右位。在使用具体位二进制数之内，常见的存储方式就是每一位存储1或者0的方式，从0向上到1每一比特逢二进一的存储方式。LSB的这种特性用来指定单位位，而不是位的数字，而这种方式也有可能产生一定的混乱。</p><p>　　——以上是关于Big-Endian和Little-Endian的简单讲解——<br>　　JVM虚拟机将搜索和使用类型的一些信息也存储在方法区中以方便应用程序加载读取该数据。设计者在设计过程也考虑到要方便JVM进行Java应用程序的快速执行，而这种取舍主要是为了程序在运行过程中内存不足的情况能够通过一定的取舍去弥补内存不足的情况。在JVM内部，所有的线程共享相同的方法区，因此，访问方法区的数据结构必须是线程安全的，如果两个线程都试图去调用去找一个名为Lava的类，比如Lava还没有被加载，只有一个线程可以加载该类而另外的线程只能够等待。方法区的大小在分配过程中是不固定的，随着Java应用程序的运行，JVM可以调整其大小，需要注意一点，方法区的内存不需要是连续的，因为方法区内存可以分配在内存堆中，即使是虚拟机JVM实例对象自己所在的内存堆也是可行的，而在实现过程是允许程序员自身来指定方法区的初始化大小的。<br>　　同样的，因为Java本身的自动内存管理，方法区也会被垃圾回收的，Java程序可以通过类扩展动态加载器对象，类可以成为“未引用”向垃圾回收器进行申请，如果一个类是“未引用”的，则该类就可能被卸载，<br>　　而方法区针对具体的语言特性有几种信息是存储在方法区内的：<br>　　【类型信息】：<br>类型的完全限定名（java.lang.String格式）<br>类型的完全限定名的直接父类的完全限定名（除非这个父类的类型是一个接口或者java.lang.Object）<br>不论类型是一个类或者接口<br>类型的修饰符（例如public、abstract、final）<br>任何一个直接超类接口的完全限定名的列表<br>　　在JVM和类文件名的内部，类型名一般都是完全限定名（java.lang.String）格式，在Java源文件里面，完全限定名必须加入包前缀，而不是我们在开发过程写的简单类名，而在方法上，只要是符合Java语言规范的类的完全限定名都可以，而JVM可能直接进行解析，比如：（java.lang.String）在JVM内部名称为java/lang/String，这就是我们在异常捕捉的时候经常看到的ClassNotFoundException的异常里面类信息的名称格式。<br>　　除此之外，还必须为每一种加载过的类型在JVM内进行存储，下边的信息不存储在方法区内，下边的章节会一一说明<br>类型常量池<br>字段信息<br>方法信息<br>所有定义在Class内部的（静态）变量信息，除开常量<br>一个ClassLoader的引用<br>Class的引用<br>　　【常量池】<br>　　针对类型加载的类型信息，JVM将这些存储在常量池里，常量池是一个根据类型定义的常量的有序常量集，包括字面量（String、Integer、Float常量）以及符号引用（类型、字段、方法），整个长量池会被JVM的一个索引引用，如同数组里面的元素集合按照索引访问一样，JVM针对这些常量池里面存储的信息也是按照索引方式进行。实际上长量池在Java程序的动态链接过程起到了一个至关重要的作用。<br>　　【字段信息】<br>　　针对字段的类型信息，下边的信息是存储在方法区里面的：<br>字段名<br>字段类型<br>字段修饰符（public,private,protected,static,final,volatile,transient）<br>　　【方法信息】<br>　　针对方法信息，下边信息存储在方法区上：<br>方法名<br>方法的返回类型（包括void）<br>方法参数的类型、数目以及顺序<br>方法修饰符（public,private,protected,static,final,synchronized,native,abstract）<br>　　针对非本地方法，还有些附加方法信息需要存储在方法区内：<br>方法字节码<br>方法中局部变量区的大小、方法栈帧<br>异常表<br>　　【类变量】<br>　　类变量在一个类的多个实例之间共享，这些变量直接和类相关，而不是和类的实例相关，（定义过程简单理解为类里面定义的static类型的变量），针对类变量，其逻辑部分就是存储在方法区内的。在JVM使用这些类之前，JVM先要在方法区里面为定义的non-final变量分配内存空间；常量（定义为final）则在JVM内部则不是以同样的方式来进行存储的，尽管针对常量而言，一个final的类变量是拥有它自己的常量池，作为常量池里面的存储某部分，类常量是存储在方法区内的，而其逻辑部分则不是按照上边的类变量的方式来进行内存分配的。虽然non-final类变量是作为这些类型声明中存储数据的某一部分，final变量存储为任何使用它类型的一部分的数据格式进行简单存储。<br>　　【ClassLoader引用】<br>　　对于每种类型的加载，JVM必须检测其类型是否符合了JVM的语言规范，对于通过类加载器加载的对象类型，JVM必须存储对类的引用，而这些针对类加载器的引用是作为了方法区里面的类型数据部分进行存储的。<br>　　【类Class的引用】<br>　　JVM在加载了任何一个类型过后会创建一个java.lang.Class的实例，虚拟机必须通过一定的途径来引用该类型对应的一个Class的实例，并且将其存储在方法区内<br>　　【方法表】<br>　　为了提高访问效率，必须仔细的设计存储在方法区中的数据信息结构。除了以上讨论的结构，jvm的实现者还添加一些其他的数据结构，如方法表【下边会说明】。<br>　　2)内存栈（Stack）：<br>　　当一个新线程启动的时候，JVM会为Java线程创建每个线程的独立内存栈，如前所言Java的内存栈是由栈帧构成，栈帧本身处于游离状态，在JVM里面，栈帧的操作只有两种：出栈和入栈。正在被线程执行的方法一般称为当前线程方法，而该方法的栈帧就称为当前帧，而在该方法内定义的类称为当前类，常量池也称为当前常量池。当执行一个方法如此的时候，JVM保留当前类和当前常量池的跟踪，当虚拟机遇到了存储在栈帧中的数据上的操作指令的时候，它就执行当前帧的操作。当一个线程调用某个Java方法时，虚拟机创建并且将一个新帧压入到内存堆栈中，而这个压入到内存栈中的帧成为当前栈帧，当该方法执行的时候，JVM使用内存栈来存储参数、局部变量、中间计算结果以及其他相关数据。方法在执行过程有可能因为两种方式而结束：如果一个方法返回完成就属于方法执行的正常结束，如果在这个过程抛出异常而结束，可以称为非正常结束，不论是正常结束还是异常结束，JVM都会弹出或者丢弃该栈帧，则上一帧的方法就成为了当前帧。<br>　　在JVM中，Java线程的栈数据是属于某个线程独有的，其他的线程不能够修改或者通过其他方式来访问该线程的栈帧，正因为如此这种情况不用担心多线程同步访问Java的局部变量，当一个线程调用某个方法的时候，方法的局部变量是在方法内部进行的Java栈帧的存储，只有当前线程可以访问该局部变量，而其他线程不能随便访问该内存栈里面存储的数据。内存栈内的栈帧数据和方法区以及内存堆一样，Java栈的栈帧不需要分配在连续的堆栈内，或者说它们可能是在堆，或者两者组合分配，实际数据用于表示Java堆栈和栈帧结构是JVM本身的设计结构决定的，而且在编程过程可以允许程序员指定一个用于Java堆栈的初始大小以及最大、最小尺寸。<br>　　【概念区分】<br>内存栈：这里的内存栈和物理结构内存堆栈有点点区别，是内存里面数据存储的一种抽象数据结构。从操作系统上讲，在程序执行过程对内存的使用本身常用的数据结构就是内存堆栈，而这里的内存堆栈指代的就是JVM在使用内存过程整个内存的存储结构，多指内存的物理结构，而Java内存栈不是指代的一个物理结构，更多的时候指代的是一个抽象结构，就是符合JVM语言规范的内存栈的一个抽象结构。因为物理内存堆栈结构和Java内存栈的抽象模型结构本身比较相似，所以我们在学习过程就正常把这两种结构放在一起考虑了，而且二者除了概念上有一点点小的区别，理解成为一种结构对于初学者也未尝不可，所以实际上也可以觉得二者没有太大的本质区别。但是在学习的时候最好分清楚内存堆栈和Java内存栈的一小点细微的差距，前者是物理概念和本身模型，后者是抽象概念和本身模型的一个共同体。而内存堆栈更多的说法可以理解为一个内存块，因为内存块可以通过索引和指针进行数据结构的组合，内存栈就是内存块针对数据结构的一种表示，而内存堆则是内存块的另外一种数据结构的表示，这样理解更容易区分内存栈和内存堆栈（内存块）的概念。<br>栈帧：栈帧是内存栈里面的最小单位，指的是内存栈里面每一个最小内存存储单元，它针对内存栈仅仅做了两个操作：入栈和出栈，一般情况下：所说的堆栈帧和栈帧倒是一个概念，所以在理解上记得加以区分<br>内存堆：这里的内存堆和内存栈是相对应的，其实内存堆里面的数据也是存储在系统内存堆栈里面的，只是它使用了另外一种方式来进行堆里面内存的管理，而本章题目要讲到的就是Java语言本身的内存堆和内存栈，而这两个概念都是抽象的概念模型，而且是相对的。<br>　　栈帧：栈帧主要包括三个部分：局部变量、操作数栈帧（操作帧）和帧数据（数据帧）。本地变量和操作数帧的大小取决于需要，这些大小是在编译时就决定的，并且在每个方法的类文件数据中进行分配，帧的数据大小则不一样，它虽然也是在编译时就决定的但是它的大小和本身代码实现有关。当JVM调用一个Java方法的时候，它会检查类的数据来确定在本地变量和操作方法要求的栈大小，它计算该方法所需要的内存大小，然后将这些数据分配好内存空间压入到内存堆栈中。<br>　　栈帧——局部变量：局部变量是以Java栈帧组合成为的一个以零为基的数组，使用局部变量的时候使用的实际上是一个包含了0的一个基于索引的数组结构。int类型、float、引用以及返回值都占据了一个数组中的局部变量的条目，而byte、short、char则在存储到局部变量的时候是先转化成为int再进行操作的，则long和double则是在这样一个数组里面使用了两个元素的空间大小，在局部变量里面存储基本数据类型的时候使用的就是这样的结构。举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Example3a&#123;</span><br><span class="line">    public static int runClassMethod(int i,long l,float f,double d,Object o,byte b)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    public int runInstanceMethod(char c,double d,short s,boolean b)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　栈帧——操作帧：和局部变量一样，操作帧也是一组有组织的数组的存储结构，但是和局部变量不一样的是这个不是通过数组的索引访问的，而是直接进行的入栈和出栈的操作，当操作指令直接压入了操作栈帧过后，从栈帧里面出来的数据会直接在出栈的时候被读取和使用。除了程序计数器以外，操作帧也是可以直接被指令访问到的，JVM里面没有寄存器。处理操作帧的时候Java虚拟机是基于内存栈的而不是基于寄存器的，因为它在操作过程是直接对内存栈进行操作而不是针对寄存器进行操作。而JVM内部的指令也可以来源于其他地方比如紧接着操作符以及操作数的字节码流或者直接从常量池里面进行操作。JVM指令其实真正在操作过程的焦点是集中在内存栈栈帧的操作帧上的。JVM指令将操作帧作为一个工作空间，有许多指令都是从操作帧里面出栈读取的，对指令进行操作过后将操作帧的计算结果重新压入内存堆栈内。比如iadd指令将两个整数压入到操作帧里面，然后将两个操作数进行相加，相加的时候从内存栈里面读取两个操作数的值，然后进行运算，最后将运算结果重新存入到内存堆栈里面。举个简单的例子：<br>begin<br>iload_0 //将整数类型的局部变量0压入到内存栈里面<br>iload_1 //将整数类型的局部变量1压入到内存栈里面<br>iadd     //将两个变量出栈读取，然后进行相加操作，将结果重新压入栈中<br>istore_2 //将最终输出结果放在另外一个局部变量里面<br>end<br>　　综上所述，就是整个计算过程针对内存的一些操作内容，而整体的结构可以用下图来描述：</p><p>　　栈帧——数据帧：除了局部变量和操作帧以外，Java栈帧还包括了数据帧，用于支持常量池、普通的方法返回以及异常抛出等，这些数据都是存储在Java内存栈帧的数据帧中的。很多JVM的指令集实际上使用的都是常量池里面的一些条目，一些指令，只是把int、long、float、double或者String从常量池里面压入到Java栈帧的操作帧上边，一些指令使用常量池来管理类或者数组的实例化操作、字段的访问控制、或者方法的调用，其他的指令就用来决定常量池条目中记录的某一特定对象是否某一类或者常量池项中指定的接口。常量池会判断类型、字段、方法、类、接口、类字段以及引用是如何在JVM进行符号化描述，而这个过程由JVM本身进行对应的判断。这里就可以理解JVM如何来判断我们通常说的：“原始变量存储在内存栈上，而引用的对象存储在内存堆上边。”除了常量池判断帧数据符号化描述特性以外，这些数据帧必须在JVM正常执行或者异常执行过程辅助它进行处理操作。如果一个方法是正常结束的，JVM必须恢复栈帧调用方法的数据帧，而且必须设置PC寄存器指向调用方法后边等待的指令完成该调用方法的位置。如果该方法存在返回值，JVM也必须将这个值压入到操作帧里面以提供给需要这些数据的方法进行调用。不仅仅如此，数据帧也必须提供一个方法调用的异常表，当JVM在方法中抛出异常而非正常结束的时候，该异常表就用来存放异常信息。<br>　　3)内存堆（Heap）：<br>　　当一个Java应用程序在运行的时候在程序中创建一个对象或者一个数组的时候，JVM会针对该对象和数组分配一个新的内存堆空间。但是在JVM实例内部，只存在一个内存堆实例，所有的依赖该JVM的Java应用程序都需要共享该堆实例，而Java应用程序本身在运行的时候它自己包含了一个由JVM虚拟机实例分配的自己的堆空间，而在应用程序启动的时候，任何一个Java应用程序都会得到JVM分配的堆空间，而且针对每一个Java应用程序，这些运行Java应用程序的堆空间都是相互独立的。这里所提及到的共享堆实例是指JVM在初始化运行的时候整体堆空间只有一个，这个是Java语言平台直接从操作系统上能够拿到的整体堆空间，所以的依赖该JVM的程序都可以得到这些内存空间，但是针对每一个独立的Java应用程序而言，这些堆空间是相互独立的，每一个Java应用程序在运行最初都是依靠JVM来进行堆空间的分配的。即使是两个相同的Java应用程序，一旦在运行的时候处于不同的操作系统进程（一般为java.exe）中，它们各自分配的堆空间都是独立的，不能相互访问，只是两个Java应用进程初始化拿到的堆空间来自JVM的分配，而JVM是从最初的内存堆实例里面分配出来的。在同一个Java应用程序里面如果出现了不同的线程，则是可以共享每一个Java应用程序拿到的内存堆空间的，这也是为什么在开发多线程程序的时候，针对同一个Java应用程序必须考虑线程安全问题，因为在一个Java进程里面所有的线程是可以共享这个进程拿到的堆空间的数据的。但是Java内存堆有一个特性，就是JVM拥有针对新的对象分配内存的指令，但是它却不包含释放该内存空间的指令，当然开发过程可以在Java源代码中显示释放内存或者说在JVM字节码中进行显示的内存释放，但是JVM仅仅只是检测堆空间中是否有引用不可达（不可以引用）的对象，然后将接下来的操作交给垃圾回收器来处理。<br>　　对象表示：<br>　　JVM规范里面并没有提及到Java对象如何在堆空间中表示和描述，对象表示可以理解为设计JVM的工程师在最初考虑到对象调用以及垃圾回收器针对对象的判断而独立的一种Java对象在内存中的存储结构，该结构是由设计最初考虑的。针对一个创建的类实例而言，它内部定义的实例变量以及它的超类以及一些相关的核心数据，是必须通过一定的途径进行该对象内部存储以及表示的。当开发过程给定了一个对象引用的时候，JVM必须能够通过这个引用快速从对象堆空间中去拿到该对象能够访问的数据内容。也就是说，堆空间内对象的存储结构必须为外围对象引用提供一种可以访问该对象以及控制该对象的接口使得引用能够顺利地调用该对象以及相关操作。因此，针对堆空间的对象，分配的内存中往往也包含了一些指向方法区的指针，因为从整体存储结构上讲，方法区似乎存储了很多原子级别的内容，包括方法区内最原始最单一的一些变量：比如类字段、字段数据、类型数据等等。而JVM本身针对堆空间的管理存在两种设计结构：<br>　　【1】设计一：<br>　　堆空间的设计可以划分为两个部分：一个处理池和一个对象池，一个对象的引用可以拿到处理池的一个本地指针，而处理池主要分为两个部分：一个指向对象池里面的指针以及一个指向方法区的指针。这种结构的优势在于JVM在处理对象的时候，更加能够方便地组合堆碎片以使得所有的数据被更加方便地进行调用。当JVM需要将一个对象移动到对象池的时候，它仅仅需要更新该对象的指针到一个新的对象池的内存地址中就可以完成了，然后在处理池中针对该对象的内部结构进行相对应的处理工作。不过这样的方法也会出现一个缺点就是在处理一个对象的时候针对对象的访问需要提供两个不同的指针，这一点可能不好理解，其实可以这样讲，真正在对象处理过程存在一个根据时间戳有区别的对象状态，而对象在移动、更新以及创建的整个过程中，它的处理池里面总是包含了两个指针，一个指针是指向对象内容本身，一个指针是指向了方法区，因为一个完整的对外的对象是依靠这两部分被引用指针引用到的，而我们开发过程是不能够操作处理池的两个指针的，只有引用指针我们可以通过外围编程拿到。如果Java是按照这种设计进行对象存储，这里的引用指针就是平时提及到的“Java的引用”，只是JVM在引用指针还做了一定的封装，这种封装的规则是JVM本身设计的时候做的，它就通过这种结构在外围进行一次封装，比如Java引用不具备直接操作内存地址的能力就是该封装的一种限制规则。这种设计的结构图如下：</p><p>　　【2】设计二：<br>　　另外一种堆空间设计就是使用对象引用拿到的本地指针，将该指针直接指向绑定好的对象的实例数据，这些数据里面仅仅包含了一个指向方法区原子级别的数据去拿到该实例相关数据，这种情况下只需要引用一个指针来访问对象实例数据，但是这样的情况使得对象的移动以及对象的数据更新变得更加复杂。当JVM需要移动这些数据以及进行堆内存碎片的整理的时候，就必须直接更新该对象所有运行时的数据区，这种情况可以用下图进行表示：</p><p>　　JVM需要从一个对象引用来获得该引用能够引用的对象数据存在多个原因，当一个程序试图将一个对象的引用转换成为另外一个类型的时候，JVM就会检查两个引用指向的对象是否存在父子类关系，并且检查两个引用引用到的对象是否能够进行类型转换，而且所有这种类型的转换必须执行同样的一个操作：instanceof操作，在上边两种情况下，JVM都必须要去分析引用指向的对象内部的数据。当一个程序调用了一个实例方法的时候，JVM就必须进行动态绑定操作，它必须选择调用方法的引用类型，是一个基于类的方法调用还是一个基于对象的方法调用，要做到这一点，它又要获取该对象的唯一引用才可以。不管对象的实现是使用什么方式来进行对象描述，都是在针对内存中关于该对象的方法表进行操作，因为使用这样的方式加快了实例针对方法的调用，而且在JVM内部实现的时候这样的机制使得其运行表现比较良好，所以方法表的设计在JVM整体结构中发挥了极其重要的作用。关于方法表的存在与否，在JVM规范里面没有严格说明，也有可能真正在实现过程只是一个抽象概念，物理层它根本不存在，针对放发表实现对于一个创建的实例而言，它本身具有不太高的内存需要求，如果该实现里面使用了方法表，则对象的方法表应该是可以很快被外围引用访问到的。<br>　　有一种办法就是通过对象引用连接到方法表的时候，如下图：</p><p>　　该图表明，在每个指针指向一个对象的时候，实际上是使用的一个特殊的数据结构，这些特殊的结构包括几个部分：<br>一个指向该对象类所有数据的指针<br>该对象的方法表<br>　　实际上从图中可以看出，方法表就是一个指针数组，它的每一个元素包含了一个指针，针对每个对象的方法都可以直接通过该指针在方法区中找到匹配的数据进行相关调用，而这些方法表需要包括的内容如下：<br>方法内存堆栈段空间中操作栈的大小以及局部变量<br>方法字节码<br>一个方法的异常表<br>　　这些信息使得JVM足够针对该方法进行调用，在调用过程，这种结构也能够方便子类对象的方法直接通过指针引用到父类的一些方法定义，也就是说指针在内存空间之内通过JVM本身的调用使得父类的一些方法表也可以同样的方式被调用，当然这种调用过程避免不了两个对象之间的类型检查，但是这样的方式就使得继承的实现变得更加简单，而且方法表提供的这些数据足够引用对对象进行带有任何OO特征的对象操作。<br>　　另外一种数据在上边的途中没有显示出来，也是从逻辑上讲内存堆中的对象的真实数据结构——对象的锁。这一点可能需要关联到JMM模型中讲的进行理解。JVM中的每一个对象都是和一个锁（互斥）相关联的，这种结构使得该对象可以很容易支持多线程访问，而且该对象的对象锁一次只能被一个线程访问。当一个线程在运行的时候具有某个对象的锁的时候，仅仅只有这个线程可以访问该对象的实例变量，其他线程如果需要访问该实例的实例变量就必须等待这个线程将它占有的对象锁释放过后才能够正常访问，如果一个线程请求了一个被其他线程占有的对象锁，这个请求线程也必须等到该锁被释放过后才能够拿到这个对象的对象锁。一旦这个线程拥有了一个对象锁过后，它自己可以多次向同一个锁发送对象的锁请求，但是如果它要使得被该线程锁住的对象可以被其他锁访问到的话就需要同样的释放锁的次数，比如线程A请求了对象B的对象锁三次，那么A将会一直占有B对象的对象锁，直到它将该对象锁释放了三次。<br>　　很多对象也可能在整个生命周期都没有被对象锁锁住过，在这样的情况下对象锁相关的数据是不需要对象内部实现的，除非有线程向该对象请求了对象锁，否则这个对象就没有该对象锁的存储结构。所以上边的实现图可以知道，很多实现不包括指向对象锁的“锁数据”，锁数据的实现必须要等待某个线程向该对象发送了对象锁请求过后，而且是在第一次锁请求过后才会被实现。这个结构中，JVM却能够间接地通过一些办法针对对象的锁进行管理，比如把对象锁放在基于对象地址的搜索树上边。实现了锁结构的对象中，每一个Java对象逻辑上都在内存中成为了一个等待集，这样就使得所有的线程在锁结构里面针对对象内部数据可以独立操作，等待集就使得每个线程能够独立于其他线程去完成一个共同的设计目标以及程序执行的最终结果，这样就使得多线程的线程独享数据以及线程共享数据机制很容易实现。</p><p>　　不仅仅如此，针对内存堆对象还必须存在一个对象的镜像，该镜像的主要目的是提供给垃圾回收器进行监控操作，垃圾回收器是通过对象的状态来判断该对象是否被应用，同样它需要针对堆内的对象进行监控。而当监控过程垃圾回收器收到对象回收的事件触发的时候，虽然使用了不同的垃圾回收算法，不论使用什么算法都需要通过独有的机制来判断对象目前处于哪种状态，然后根据对象状态进行操作。开发过程程序员往往不会去仔细分析当一个对象引用设置成为null了过后虚拟机内部的操作，但实际上Java里面的引用往往不像我们想像中那么简单，Java引用中的虚引用、弱引用就是使得Java引用在显示提交可回收状态的情况下对内存堆中的对象进行的反向监控，这些引用可以监视到垃圾回收器回收该对象的过程。垃圾回收器本身的实现也是需要内存堆中的对象能够提供相对应的数据的。其实这个位置到底JVM里面是否使用了完整的Java对象的镜像还是使用的一个镜像索引我没有去仔细分析过，总之是在堆结构里面存在着堆内对象的一个类似拷贝的镜像机制，使得垃圾回收器能够顺利回收不再被引用的对象。<br>　　4)内存栈和内存堆的实现原理探测【该部分为不确定概念】：<br>　　实际上不论是内存栈结构、方法区还是内存堆结构，归根到底使用的是操作系统的内存，操作系统的内存结构可以理解为内存块，常用的抽象方式就是一个内存堆栈，而JVM在OS上边安装了过后，就在启动Java程序的时候按照配置文件里面的内容向操作系统申请内存空间，该内存空间会按照JVM内部的方法提供相应的结构调整。<br>　　内存栈应该是很容易理解的结构实现，一般情况下，内存栈是保持连续的，但是不绝对，内存栈申请到的地址实际上很多情况下都是连续的，而每个地址的最小单位是按照计算机位来算的，该计算机位里面只有两种状态1和0，而内存栈的使用过程就是典型的类似C++里面的普通指针结构的使用过程，直接针对指针进行++或者–操作就修改了该指针针对内存的偏移量，而这些偏移量就使得该指针可以调用不同的内存栈中的数据。至于针对内存栈发送的指令就是常见的计算机指令，而这些指令就使得该指针针对内存栈的栈帧进行指令发送，比如发送操作指令、变量读取等等，直接就使得内存栈的调用变得更加简单，而且栈帧在接受了该数据过后就知道到底针对栈帧内部的哪一个部分进行调用，是操作帧、数据帧还是局部变量。<br>　　内存堆实际上在操作系统里面使用了双向链表的数据结构，双向链表的结构使得即使内存堆不具有连续性，每一个堆空间里面的链表也可以进入下一个堆空间，而操作系统本身在整理内存堆的时候会做一些简单的操作，然后通过每一个内存堆的双向链表就使得内存堆更加方便。而且堆空间不需要有序，甚至说有序不影响堆空间的存储结构，因为它归根到底是在内存块上边进行实现的，内存块本身是一个堆栈结构，只是该内存堆栈里面的块如何分配不由JVM决定，是由操作系统已经最开始分配好了，也就是最小存储单位。然后JVM拿到从操作系统申请的堆空间过后，先进行初始化操作，然后就可以直接使用了。<br>　　常见的对程序有影响的内存问题主要是两种：溢出和内存泄漏，上边已经讲过了内存泄漏，其实从内存的结构分析，泄漏这种情况很难甚至说不可能发生在栈空间里面，其主要原因是栈空间本身很难出现悬停的内存，因为栈空间的存储结构有可能是内存的一个地址数组，所以在访问栈空间的时候使用的都是索引或者下标或者就是最原始的出栈和入栈的操作，这些操作使得栈里面很难出现像堆空间一样的内存悬停（也就是引用悬挂）问题。堆空间悬停的内存是因为栈中存放的引用的变化，其实引用可以理解为从栈到堆的一个指针，当该指针发生变化的时候，堆内存碎片就有可能产生，而这种情况下在原始语言里面就经常发生内存泄漏的情况，因为这些悬停的堆空间在系统里面是不能够被任何本地指针引用到，就使得这些对象在未被回收的时候脱离了可操作区域并且占用了系统资源。<br>　　栈溢出问题一直都是计算机领域里面的一个安全性问题，这里不做深入讨论，说多了就偏离主题了，而内存泄漏是程序员最容易理解的内存问题，还有一个问题来自于我一个黑客朋友就是：堆溢出现象，这种现象可能更加复杂。<br>　　其实Java里面的内存结构，最初看来就是堆和栈的结合，实际上可以这样理解，实际上对象的实际内容才存在对象池里面，而有关对象的其他东西有可能会存储于方法区，而平时使用的时候的引用是存在内存栈上的，这样就更加容易理解它内部的结构，不仅仅如此，有时候还需要考虑到Java里面的一些字段和属性到底是对象域的还是类域的，这个也是一个比较复杂的问题。<br>　　二者的区别简单总结一下：<br>管理方式：JVM自己可以针对内存栈进行管理操作，而且该内存空间的释放是编译器就可以操作的内容，而堆空间在Java中JVM本身执行引擎不会对其进行释放操作，而是让垃圾回收器进行自动回收<br>空间大小：一般情况下栈空间相对于堆空间而言比较小，这是由栈空间里面存储的数据以及本身需要的数据特性决定的，而堆空间在JVM堆实例进行分配的时候一般大小都比较大，因为堆空间在一个Java程序中需要存储太多的Java对象数据<br>碎片相关：针对堆空间而言，即使垃圾回收器能够进行自动堆内存回收，但是堆空间的活动量相对栈空间而言比较大，很有可能存在长期的堆空间分配和释放操作，而且垃圾回收器不是实时的，它有可能使得堆空间的内存碎片主键累积起来。针对栈空间而言，因为它本身就是一个堆栈的数据结构，它的操作都是一一对应的，而且每一个最小单位的结构栈帧和堆空间内复杂的内存结构不一样，所以它一般在使用过程很少出现内存碎片。<br>分配方式：一般情况下，栈空间有两种分配方式：静态分配和动态分配，静态分配是本身由编译器分配好了，而动态分配可能根据情况有所不同，而堆空间却是完全的动态分配的，是一个运行时级别的内存分配。而栈空间分配的内存不需要我们考虑释放问题，而堆空间即使在有垃圾回收器的前提下还是要考虑其释放问题。<br>效率：因为内存块本身的排列就是一个典型的堆栈结构，所以栈空间的效率自然比起堆空间要高很多，而且计算机底层内存空间本身就使用了最基础的堆栈结构使得栈空间和底层结构更加符合，它的操作也变得简单就是最简单的两个指令：入栈和出栈；栈空间针对堆空间而言的弱点是灵活程度不够，特别是在动态管理的时候。而堆空间最大的优势在于动态分配，因为它在计算机底层实现可能是一个双向链表结构，所以它在管理的时候操作比栈空间复杂很多，自然它的灵活度就高了，但是这样的设计也使得堆空间的效率不如栈空间，而且低很多。</p><p>3.本机内存[部分内容来源于IBM开发中心]<br>　　Java堆空间是在编写Java程序中被我们使用得最频繁的内存空间，平时开发过程，开发人员一定遇到过OutOfMemoryError，这种结果有可能来源于Java堆空间的内存泄漏，也可能是因为堆的大小不够而导致的，有时候这些错误是可以依靠开发人员修复的，但是随着Java程序需要处理越来越多的并发程序，可能有些错误就不是那么容易处理了。有些时候即使Java堆空间没有满也可能抛出错误，这种情况下需要了解的就是JRE（Java Runtime Environment）内部到底发生了什么。Java本身的运行宿主环境并不是操作系统，而是Java虚拟机，Java虚拟机本身是用C编写的本机程序，自然它会调用到本机资源，最常见的就是针对本机内存的调用。本机内存是可以用于运行时进程的，它和Java应用程序使用的Java堆内存不一样，每一种虚拟化资源都必须存储在本机内存里面，包括虚拟机本身运行的数据，这样也意味着主机的硬件和操作系统在本机内存的限制将直接影响到Java应用程序的性能。<br>　　i.Java运行时如何使用本机内存：<br>　　1)堆空间和垃圾回收<br>　　Java运行时是一个操作系统进程（Windows下一般为java.exe），该环境提供的功能会受一些位置的用户代码驱动，这虽然提高了运行时在处理资源的灵活性，但是无法预测每种情况下运行时环境需要何种资源，这一点Java堆空间讲解中已经提到过了。在Java命令行可以使用-Xmx和-Xms来控制堆空间初始配置，mx表示堆空间的最大大小，ms表示初始化大小，这也是上提到的启动Java的配置文件可以配置的内容。尽管逻辑内存堆可以根据堆上的对象数量和在GC上花费的时间增加或者减少，但是使用本机内存的大小是保持不变的，而且由-Xms的值指定，大部分GC算法都是依赖被分配的连续内存块的堆空间，因此不能在堆需要扩大的时候分配更多的本机内存，所有的堆内存必须保留下来，请注意这里说的不是Java堆内存空间是本机内存。<br>　　本机内存保留和本机内存分配不一样，本机内存被保留的时候，无法使用物理内存或者其他存储器作为备用内存，尽管保留地址空间块不会耗尽物理资源，但是会阻止内存用于其他用途，由保留从未使用过的内存导致的泄漏和泄漏分配的内存造成的问题其严重程度差不多，但使用的堆区域缩小时，一些垃圾回收器会回收堆空间的一部分内容，从而减少物理内存的使用。对于维护Java堆的内存管理系统，需要更多的本机内存来维护它的状态，进行垃圾收集的时候，必须分配数据结构来跟踪空闲存储空间和进度记录，这些数据结构的确切大小和性质因实现的不同而有所差异。<br>　　2)JIT<br>　　JIT编译器在运行时编译Java字节码来优化本机可执行代码，这样极大提高了Java运行时的速度，并且支持Java应用程序与本地代码相当的速度运行。字节码编译使用本机内存，而且JIT编译器的输入（字节码）和输出（可执行代码）也必须存储在本机内存里面，包含了多个经过JIT编译的方法的Java程序会比一些小型应用程序使用更多的本机内存。<br>　　3)类和类加载器<br>　　Java 应用程序由一些类组成，这些类定义对象结构和方法逻辑。Java 应用程序也使用 Java 运行时类库（比如 java.lang.String）中的类，也可以使用第三方库。这些类需要存储在内存中以备使用。存储类的方式取决于具体实现。Sun JDK 使用永久生成（permanent generation，PermGen）堆区域，从最基本的层面来看，使用更多的类将需要使用更多内存。（这可能意味着您的本机内存使用量会增加，或者您必须明确地重新设置 PermGen 或共享类缓存等区域的大小，以装入所有类）。记住，不仅您的应用程序需要加载到内存中，框架、应用服务器、第三方库以及包含类的 Java 运行时也会按需加载并占用空间。Java 运行时可以卸载类来回收空间，但是只有在非常严酷的条件下才会这样做，不能卸载单个类，而是卸载类加载器，随其加载的所有类都会被卸载。只有在以下情况下才能卸载类加载器<br>Java 堆不包含对表示该类加载器的 java.lang.ClassLoader 对象的引用。<br>Java 堆不包含对表示类加载器加载的类的任何 java.lang.Class 对象的引用。<br>在 Java 堆上，该类加载器加载的任何类的所有对象都不再存活（被引用）。<br>　　需要注意的是，Java 运行时为所有 Java 应用程序创建的 3 个默认类加载器（ bootstrap、extension 和 application ）都不可能满足这些条件，因此，任何系统类（比如 java.lang.String）或通过应用程序类加载器加载的任何应用程序类都不能在运行时释放。即使类加载器适合进行收集，运行时也只会将收集类加载器作为 GC 周期的一部分。一些实现只会在某些 GC 周期中卸载类加载器，也可能在运行时生成类，而不去释放它。许多 Java EE 应用程序使用 JavaServer Pages (JSP) 技术来生成 Web 页面。使用 JSP 会为执行的每个 .jsp 页面生成一个类，并且这些类会在加载它们的类加载器的整个生存期中一直存在 —— 这个生存期通常是 Web 应用程序的生存期。另一种生成类的常见方法是使用 Java 反射。反射的工作方式因 Java 实现的不同而不同，当使用 java.lang.reflect API 时，Java 运行时必须将一个反射对象（比如 java.lang.reflect.Field）的方法连接到被反射到的对象或类。这可以通过使用 Java 本机接口（Java Native Interface，JNI）访问器来完成，这种方法需要的设置很少，但是速度缓慢，也可以在运行时为您想要反射到的每种对象类型动态构建一个类。后一种方法在设置上更慢，但运行速度更快，非常适合于经常反射到一个特定类的应用程序。Java 运行时在最初几次反射到一个类时使用 JNI 方法，但当使用了若干次 JNI 方法之后，访问器会膨胀为字节码访问器，这涉及到构建类并通过新的类加载器进行加载。执行多次反射可能导致创建了许多访问器类和类加载器，保持对反射对象的引用会导致这些类一直存活，并继续占用空间，因为创建字节码访问器非常缓慢，所以 Java 运行时可以缓存这些访问器以备以后使用，一些应用程序和框架还会缓存反射对象，这进一步增加了它们的本机内存占用。<br>　　4)JNI<br>　　JNI支持本机代码调用Java方法，反之亦然，Java运行时本身极大依赖于JNI代码来实现类库功能，比如文件和网络I/O，JNI应用程序可以通过三种方式增加Java运行时对本机内存的使用：<br>JNI应用程序的本机代码被编译到共享库中，或编译为加载到进程地址空间中的可执行文件，大型本机应用程序可能仅仅加载就会占用大量进程地址空间<br>本机代码必须与Java运行时共享地址空间，任何本机代码分配或本机代码执行的内存映射都会耗用Java运行时内存<br>某些JNI函数可能在它们的常规操作中使用本机内存，GetTypeArrayElements和GetTypeArrayRegion函数可以将Java堆复制到本机内存缓冲区中，提供给本地代码使用，是否复制数据依赖于运行时实现，通过这种方式访问大量Java堆数据就可能使用大量的本机内存堆空间<br>　　5)NIO<br>　　JDK 1.4开始添加了新的I/O类，引入了一种基于通道和缓冲区执行I/O的新方式，就像Java堆上的内存支持I/O缓冲区一样，NIO添加了对直接ByteBuffer的支持，ByteBuffer受本机内存而不是Java堆的支持，直接ByteBuffer可以直接传递到本机操作系统库函数，以执行I/O，这种情况虽然提高了Java程序在I/O的执行效率，但是会对本机内存进行直接的内存开销。ByteBuffer直接操作和非直接操作的区别如下：</p><p>　　对于在何处存储直接 ByteBuffer 数据，很容易产生混淆。应用程序仍然在 Java 堆上使用一个对象来编排 I/O 操作，但持有该数据的缓冲区将保存在本机内存中，Java 堆对象仅包含对本机堆缓冲区的引用。非直接 ByteBuffer 将其数据保存在 Java 堆上的 byte[] 数组中。直接ByteBuffer对象会自动清理本机缓冲区，但这个过程只能作为Java堆GC的一部分执行，它不会自动影响施加在本机上的压力。GC仅在Java堆被填满，以至于无法为堆分配请求提供服务的时候，或者在Java应用程序中显示请求它发生。<br>　　6)线程：<br>　　应用程序中的每个线程都需要内存来存储器堆栈（用于在调用函数时持有局部变量并维护状态的内存区域）。每个 Java 线程都需要堆栈空间来运行。根据实现的不同，Java 线程可以分为本机线程和 Java 堆栈。除了堆栈空间，每个线程还需要为线程本地存储（thread-local storage）和内部数据结构提供一些本机内存。尽管每个线程使用的内存量非常小，但对于拥有数百个线程的应用程序来说，线程堆栈的总内存使用量可能非常大。如果运行的应用程序的线程数量比可用于处理它们的处理器数量多，效率通常很低，并且可能导致糟糕的性能和更高的内存占用。<br>　　ii.本机内存耗尽：<br>　　Java运行时善于以不同的方式来处理Java堆空间的耗尽和本机堆空间的耗尽，但是这两种情形具有类似症状，当Java堆空间耗尽的时候，Java应用程序很难正常运行，因为Java应用程序必须通过分配对象来完成工作，只要Java堆被填满，就会出现糟糕的GC性能，并且抛出OutOfMemoryError。相反，一旦 Java 运行时开始运行并且应用程序处于稳定状态，它可以在本机堆完全耗尽之后继续正常运行，不一定会发生奇怪的行为，因为需要分配本机内存的操作比需要分配 Java 堆的操作少得多。尽管需要本机内存的操作因 JVM 实现不同而异，但也有一些操作很常见：启动线程、加载类以及执行某种类型的网络和文件 I/O。本机内存不足行为与 Java 堆内存不足行为也不太一样，因为无法对本机堆分配进行控制，尽管所有 Java 堆分配都在 Java 内存管理系统控制之下，但任何本机代码（无论其位于 JVM、Java 类库还是应用程序代码中）都可能执行本机内存分配，而且会失败。尝试进行分配的代码然后会处理这种情况，无论设计人员的意图是什么：它可能通过 JNI 接口抛出一个 OutOfMemoryError，在屏幕上输出一条消息，发生无提示失败并在稍后再试一次，或者执行其他操作。<br>　　iii.例子：<br>　　这篇文章一致都在讲概念，这里既然提到了ByteBuffer，先提供一个简单的例子演示该类的使用：<br>　　——[$]使用NIO读取txt文件——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package org.susan.java.io;</span><br><span class="line"> </span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.nio.ByteBuffer;</span><br><span class="line">import java.nio.channels.FileChannel;</span><br><span class="line"> </span><br><span class="line">public class ExplicitChannelRead &#123;</span><br><span class="line">    public static void main(String args[])&#123;</span><br><span class="line">        FileInputStream fileInputStream;</span><br><span class="line">        FileChannel fileChannel;</span><br><span class="line">        long fileSize;</span><br><span class="line">        ByteBuffer byteBuffer;</span><br><span class="line">        try&#123;</span><br><span class="line">            fileInputStream = new FileInputStream(“D://read.txt”);</span><br><span class="line">            fileChannel = fileInputStream.getChannel();</span><br><span class="line">            fileSize = fileChannel.size();</span><br><span class="line">            byteBuffer = ByteBuffer.allocate((int)fileSize);</span><br><span class="line">            fileChannel.read(byteBuffer);</span><br><span class="line">            byteBuffer.rewind();</span><br><span class="line">            for( int i = 0; i &lt; fileSize; i++ )</span><br><span class="line">                System.out.print((char)byteBuffer.get());</span><br><span class="line">            fileChannel.close();</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125;catch(IOException ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　在读取文件的路径放上该txt文件里面写入：Hello World，上边这段代码就是使用NIO的方式读取文件系统上的文件，这段程序的输入就为：<br>Hello World<br>　　——[$]获取ByteBuffer上的字节转换为Byte数组——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package org.susan.java.io;</span><br><span class="line"> </span><br><span class="line">import java.nio.ByteBuffer;</span><br><span class="line"> </span><br><span class="line">public class ByteBufferToByteArray &#123;</span><br><span class="line">    public static void main(String args[]) throws Exception&#123;</span><br><span class="line">        // 从byte数组创建ByteBuffer</span><br><span class="line">        byte[] bytes = new byte[10];</span><br><span class="line">        ByteBuffer buffer = ByteBuffer.wrap(bytes);</span><br><span class="line"> </span><br><span class="line">        // 在position和limit，也就是ByteBuffer缓冲区的首尾之间读取字节</span><br><span class="line">        bytes = new byte[buffer.remaining()];</span><br><span class="line">        buffer.get(bytes, 0, bytes.length);</span><br><span class="line"> </span><br><span class="line">        // 读取所有ByteBuffer内的字节</span><br><span class="line">        buffer.clear();</span><br><span class="line">        bytes = new byte[buffer.capacity()];</span><br><span class="line">        buffer.get(bytes, 0, bytes.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　上边代码就是从ByteBuffer到byte数组的转换过程，有了这个过程在开发过程中可能更加方便，ByteBuffer的详细讲解我保留到IO部分，这里仅仅是涉及到了一些，所以提供两段实例代码。<br>　　iv.共享内存：<br>　　在Java语言里面，没有共享内存的概念，但是在某些引用中，共享内存却很受用，例如Java语言的分布式系统，存着大量的Java分布式共享对象，很多时候需要查询这些对象的状态，以查看系统是否运行正常或者了解这些对象目前的一些统计数据和状态。如果使用的是网络通信的方式，显然会增加应用的额外开销，也增加了不必要的应用编程，如果是共享内存方式，则可以直接通过共享内存查看到所需要的对象的数据和统计数据，从而减少一些不必要的麻烦。<br>　　1)共享内存特点：<br>可以被多个进程打开访问<br>读写操作的进程在执行读写操作的时候其他进程不能进行写操作<br>多个进程可以交替对某一个共享内存执行写操作<br>一个进程执行了内存写操作过后，不影响其他进程对该内存的访问，同时其他进程对更新后的内存具有可见性<br>在进程执行写操作时如果异常退出，对其他进程的写操作禁止自动解除<br>相对共享文件，数据访问的方便性和效率　　<br>　　2)出现情况：<br>独占的写操作，相应有独占的写操作等待队列。独占的写操作本身不会发生数据的一致性问题；<br>共享的写操作，相应有共享的写操作等待队列。共享的写操作则要注意防止发生数据的一致性问题；<br>独占的读操作，相应有共享的读操作等待队列；<br>共享的读操作，相应有共享的读操作等待队列；<br>　　3)Java中共享内存的实现：<br>　　JDK 1.4里面的MappedByteBuffer为开发人员在Java中实现共享内存提供了良好的方法，该缓冲区实际上是一个磁盘文件的内存映象，二者的变化会保持同步，即内存数据发生变化过后会立即反应到磁盘文件中，这样会有效地保证共享内存的实现，将共享文件和磁盘文件简历联系的是文件通道类：FileChannel，该类的加入是JDK为了统一外围设备的访问方法，并且加强了多线程对同一文件进行存取的安全性，这里可以使用它来建立共享内存用，它建立了共享内存和磁盘文件之间的一个通道。打开一个文件可使用RandomAccessFile类的getChannel方法，该方法直接返回一个文件通道，该文件通道由于对应的文件设为随机存取，一方面可以进行读写两种操作，另外一个方面使用它不会破坏映象文件的内容。这里，如果使用FileOutputStream和FileInputStream则不能理想地实现共享内存的要求，因为这两个类同时实现自由读写很困难。<br>　　下边代码段实现了上边提及的共享内存功能<br>// 获得一个只读的随机存取文件对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile RAFile = new RandomAccessFile(filename,”r”);</span><br><span class="line">// 获得相应的文件通道</span><br><span class="line">FileChannel fc = RAFile.getChannel();</span><br><span class="line">// 取得文件的实际大小</span><br><span class="line">int size = (int)fc.size();</span><br><span class="line">// 获得共享内存缓冲区，该共享内存只读 </span><br><span class="line">MappedByteBuffer mapBuf = fc.map(FileChannel.MAP_RO,0,size);</span><br><span class="line">// 获得一个可读写的随机存取文件对象 </span><br><span class="line">RAFile = new RandomAccessFile(filename,”rw”);</span><br><span class="line">// 获得相应的文件通道 </span><br><span class="line">fc = RAFile.getChannel();</span><br><span class="line">// 取得文件的实际大小，以便映像到共享内存 </span><br><span class="line">size = (int)fc.size();</span><br><span class="line">// 获得共享内存缓冲区，该共享内存可读写 </span><br><span class="line">mapBuf = fc.map(FileChannel.MAP_RW,0,size);</span><br><span class="line">// 获取头部消息：存取权限 </span><br><span class="line">mode = mapBuf.getInt();</span><br></pre></td></tr></table></figure><p>　　如果多个应用映象使用同一文件名的共享内存，则意味着这多个应用共享了同一内存数据，这些应用对于文件可以具有同等存取权限，一个应用对数据的刷新会更新到多个应用中。为了防止多个应用同时对共享内存进行写操作，可以在该共享内存的头部信息加入写操作标记，该共享文件的头部基本信息至少有：<br>共享内存长度<br>共享内存目前的存取模式<br>　　共享文件的头部信息是私有信息，多个应用可以对同一个共享内存执行写操作，执行写操作和结束写操作的时候，可以使用如下方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public boolean startWrite()</span><br><span class="line">&#123;</span><br><span class="line">    if(mode == 0) // 这里mode代表共享内存的存取模式，为0代表可写</span><br><span class="line">    &#123;</span><br><span class="line">        mode = 1; // 意味着别的应用不可写</span><br><span class="line">        mapBuf.flip();</span><br><span class="line">        mapBuf.putInt(mode);    //写入共享内存的头部信息</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        return false; //表明已经有应用在写该共享内存了，本应用不能够针对共享内存再做写操作</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public boolean stopWrite()</span><br><span class="line">&#123;</span><br><span class="line">    mode = 0; // 释放写权限</span><br><span class="line">    mapBuf.flip();</span><br><span class="line">    mapBuf.putInt(mode);    //写入共享内存头部信息</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　【<em>：上边提供了对共享内存执行写操作过程的两个方法，这两个方法其实理解起来很简单，真正需要思考的是一个针对存取模式的设置，其实这种机制和最前面提到的内存的锁模式有点类似，一旦当mode（存取模式）设置称为可写的时候，startWrite才能返回true，不仅仅如此，某个应用程序在向共享内存写入数据的时候还会修改其存取模式，因为如果不修改的话就会导致其他应用同样针对该内存是可写的，这样就使得共享内存的实现变得混乱，而在停止写操作stopWrite的时候，需要将mode设置称为1，也就是上边注释段提到的释放写权限。】<br>　　关于锁的知识这里简单做个补充【</em>：上边代码的这种模式可以理解为一种简单的锁模式】：一般情况下，计算机编程中会经常遇到锁模式，在整个锁模式过程中可以将锁分为两类（这里只是辅助理解，不是严格的锁分类）——共享锁和排他锁（也称为独占锁），锁的定位是定位于针对所有与计算机有关的资源比如内存、文件、存储空间等，针对这些资源都可能出现锁模式。在上边堆和栈一节讲到了Java对象锁，其实不仅仅是对象，只要是计算机中会出现写入和读取共同操作的资源，都有可能出现锁模式。<br>　　共享锁——当应用程序获得了资源的共享锁的时候，那么应用程序就可以直接访问该资源，资源的共享锁可以被多个应用程序拿到，在Java里面线程之间有时候也存在对象的共享锁，但是有一个很明显的特征，也就是内存共享锁只能读取数据，不能够写入数据，不论是什么资源，当应用程序仅仅只能拿到该资源的共享锁的时候，是不能够针对该资源进行写操作的。<br>　　独占锁——当应用程序获得了资源的独占锁的时候，应用程序访问该资源在共享锁上边多了一个权限就是写权限，针对资源本身而言，一个资源只有一把独占锁，也就是说一个资源只能同时被一个应用或者一个执行代码程序允许写操作，Java线程中的对象写操作也是这个道理，若某个应用拿到了独占锁的时候，不仅仅可以读取资源里面的数据，而且可以向该资源进行数据写操作。<br>　　数据一致性——当资源同时被应用进行读写访问的时候，有可能会出现数据一致性问题，比如A应用拿到了资源R1的独占锁，B应用拿到了资源R1的共享锁，A在针对R1进行写操作，而两个应用的操作——A的写操作和B的读操作出现了一个时间差，s1的时候B读取了R1的资源，s2的时候A写入了数据修改了R1的资源，s3的时候B又进行了第二次读，而两次读取相隔时间比较短暂而且初衷没有考虑到A在B的读取过程修改了资源，这种情况下针对锁模式就需要考虑到数据一致性问题。独占锁的排他性在这里的意思是该锁只能被一个应用获取，获取过程只能由这个应用写入数据到资源内部，除非它释放该锁，否则其他拿不到锁的应用是无法对资源进行写入操作的。<br>　　按照上边的思路去理解代码里面实现共享内存的过程就更加容易理解了。<br>　　如果执行写操作的应用异常中止，那么映像文件的共享内存将不再能执行写操作。为了在应用异常中止后，写操作禁止标志自动消除，必须让运行的应用获知退出的应用。在多线程应用中，可以用同步方法获得这样的效果，但是在多进程中，同步是不起作用的。方法可以采用的多种技巧，这里只是描述一可能的实现：采用文件锁的方式。写共享内存应用在获得对一个共享内存写权限的时候，除了判断头部信息的写权限标志外，还要判断一个临时的锁文件是否可以得到，如果可以得到，则即使头部信息的写权限标志为1（上述），也可以启动写权限，其实这已经表明写权限获得的应用已经异常退出，这段代码如下：<br>// 打开一个临时文件，注意统一共享内存，该文件名必须相同，可以在共享文件名后边添加“.lock”后缀</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile files = new RandomAccessFile(“memory.lock”,”rw”);</span><br><span class="line">// 获取文件通道</span><br><span class="line">FileChannel lockFileChannel = files.getChannel();</span><br><span class="line">// 获取文件的独占锁，该方法不产生任何阻塞直接返回</span><br><span class="line">FileLock fileLock = lockFileChannel.tryLock();</span><br><span class="line">// 如果为空表示已经有应用占有了</span><br><span class="line">if( fileLock == null )&#123;</span><br><span class="line">    // …不可写</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    // …可以执行写操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　4)共享内存的应用：<br>　　在Java中，共享内存一般有两种应用：<br>　　[1]永久对象配置——在java服务器应用中，用户可能会在运行过程中配置一些参数，而这些参数需要永久 有效，当服务器应用重新启动后，这些配置参数仍然可以对应用起作用。这就可以用到该文 中的共享内存。该共享内存中保存了服务器的运行参数和一些对象运行特性。可以在应用启动时读入以启用以前配置的参数。<br>　　[2]查询共享数据——一个应用（例 sys.java）是系统的服务进程，其系统的运行状态记录在共享内存中，其中运行状态可能是不断变化的。为了随时了解系统的运行状态，启动另一个应用（例 mon.java），该应用查询该共享内存，汇报系统的运行状态。<br>　　v.小节：<br>　　提供本机内存以及共享内存的知识，主要是为了让读者能够更顺利地理解JVM内部内存模型的物理原理，包括JVM如何和操作系统在内存这个级别进行交互，理解了这些内容就让读者对Java内存模型的认识会更加深入，而且不容易遗忘。其实Java的内存模型远不及我们想象中那么简单，而且其结构极端复杂，看过《Inside JVM》的朋友应该就知道，结合JVM指令集去写点小代码测试.class文件的里层结构也不失为一种好玩的学习方法。<br>　　<br>4.防止内存泄漏<br>　　Java中会有内存泄漏，听起来似乎是很不正常的，因为Java提供了垃圾回收器针对内存进行自动回收，但是Java还是会出现内存泄漏的。<br>　　i.什么是Java中的内存泄漏：<br>　　在Java语言中，内存泄漏就是存在一些被分配的对象，这些对象有两个特点：这些对象可达，即在对象内存的有向图中存在通路可以与其相连；其次，这些对象是无用的，即程序以后不会再使用这些对象了。如果对象满足这两个条件，该对象就可以判定为Java中的内存泄漏，这些对象不会被GC回收，然而它却占用内存，这就是Java语言中的内存泄漏。Java中的内存泄漏和C++中的内存泄漏还存在一定的区别，在C++里面，内存泄漏的范围更大一些，有些对象被分配了内存空间，但是却不可达，由于C++中没有GC，这些内存将会永远收不回来，在Java中这些不可达对象则是被GC负责回收的，因此程序员不需要考虑这一部分的内存泄漏。二者的图如下：</p><p>　　因此按照上边的分析，Java语言中也是存在内存泄漏的，但是其内存泄漏范围比C++要小很多，因为Java里面有个特殊程序回收所有的不可达对象：垃圾回收器。对于程序员来说，GC基本是透明的，不可见的。虽然，我们只有几个函数可以访问GC，例如运行GC的函数System.gc()，但是根据Java语言规范定义，该函数不保证JVM的垃圾收集器一定会执行。因为，不同的JVM实现者可能使用不同的算法管理GC。通常，GC的线程的优先级别较低，JVM调用GC的策略也有很多种，有的是内存使用到达一定程度时，GC才开始工作，也有定时执行的，有的是平缓执行GC，有的是中断式执行GC。但通常来说，我们不需要关心这些。除非在一些特定的场合，GC的执行影响应用程序的性能，例如对于基于Web的实时系统，如网络游戏等，用户不希望GC突然中断应用程序执行而进行垃圾回收，那么我们需要调整GC的参数，让GC能够通过平缓的方式释放内存，例如将垃圾回收分解为一系列的小步骤执行，Sun提供的HotSpot JVM就支持这一特性。<br>　　举个例子：<br>　　——[$]内存泄漏的例子——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package org.susan.java.collection;</span><br><span class="line"> </span><br><span class="line">import java.util.Vector;</span><br><span class="line"> </span><br><span class="line">public class VectorMemoryLeak &#123;</span><br><span class="line">    public static void main(String args[])&#123;</span><br><span class="line">        Vector&lt;String&gt; vector = new Vector&lt;String&gt;();</span><br><span class="line">        for( int i = 0; i &lt; 1000; i++ )&#123;</span><br><span class="line">            String tempString = new String();</span><br><span class="line">            vector.add(tempString);</span><br><span class="line">            tempString = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　从上边这个例子可以看到，循环申请了String对象，并且将申请的对象放入了一个Vector中，如果仅仅是释放对象本身，因为Vector仍然引用了该对象，所以这个对象对CG来说是不可回收的，因此如果对象加入到Vector后，还必须从Vector删除才能够回收，最简单的方式是将Vector引用设置成null。实际上这些对象已经没有用了，但是还是被代码里面的引用引用到了，这种情况GC拿它就没有了任何办法，这样就可以导致了内存泄漏。<br>　　【*：Java语言因为提供了垃圾回收器，照理说是不会出现内存泄漏的，Java里面导致内存泄漏的主要原因就是，先前申请了内存空间而忘记了释放。如果程序中存在对无用对象的引用，这些对象就会驻留在内存中消耗内存，因为无法让GC判断这些对象是否可达。如果存在对象的引用，这个对象就被定义为“有效的活动状态”，同时不会被释放，要确定对象所占内存被回收，必须要确认该对象不再被使用。典型的做法就是把对象数据成员设置成为null或者中集合中移除，当局部变量不需要的情况则不需要显示声明为null。】<br>　　ii.常见的Java内存泄漏<br>　　1)全局集合：<br>　　在大型应用程序中存在各种各样的全局数据仓库是很普遍的，比如一个JNDI树或者一个Session table（会话表），在这些情况下，必须注意管理存储库的大小，必须有某种机制从存储库中移除不再需要的数据。<br>　　[$]解决：<br>　　[1]常用的解决方法是周期运作清除作业，该作业会验证仓库中的数据然后清楚一切不需要的数据<br>　　[2]另外一种方式是反向链接计数，集合负责统计集合中每个入口的反向链接数据，这要求反向链接告诉集合合适会退出入口，当反向链接数目为零的时候，该元素就可以移除了。<br>　　2)缓存：<br>　　缓存一种用来快速查找已经执行过的操作结果的数据结构。因此，如果一个操作执行需要比较多的资源并会多次被使用，通常做法是把常用的输入数据的操作结果进行缓存，以便在下次调用该操作时使用缓存的数据。缓存通常都是以动态方式实现的,如果缓存设置不正确而大量使用缓存的话则会出现内存溢出的后果，因此需要将所使用的内存容量与检索数据的速度加以平衡。<br>　　[$]解决：<br>　　[1]常用的解决途径是使用java.lang.ref.SoftReference类坚持将对象放入缓存，这个方法可以保证当虚拟机用完内存或者需要更多堆的时候，可以释放这些对象的引用。<br>　　3)类加载器：<br>　　Java类装载器的使用为内存泄漏提供了许多可乘之机。一般来说类装载器都具有复杂结构，因为类装载器不仅仅是只与”常规”对象引用有关，同时也和对象内部的引用有关。比如数据变量，方法和各种类。这意味着只要存在对数据变量，方法，各种类和对象的类装载器，那么类装载器将驻留在JVM中。既然类装载器可以同很多的类关联，同时也可以和静态数据变量关联，那么相当多的内存就可能发生泄漏。<br>　　iii.Java引用【摘录自前边的《Java引用总结》】：<br>　　Java中的对象引用主要有以下几种类型：<br>　　1)强可及对象（strongly reachable）：<br>　　可以通过强引用访问的对象，一般来说，我们平时写代码的方式都是使用的强引用对象，比如下边的代码段：<br>　　StringBuilder builder= new StringBuilder()；<br>　　上边代码部分引用obj这个引用将引用内存堆中的一个对象，这种情况下，只要obj的引用存在，垃圾回收器就永远不会释放该对象的存储空间。这种对象我们又成为强引用（Strong references），这种强引用方式就是Java语言的原生的Java引用，我们几乎每天编程的时候都用到。上边代码JVM存储了一个StringBuilder类型的对象的强引用在变量builder呢。强引用和GC的交互是这样的，如果一个对象通过强引用可达或者通过强引用链可达的话这种对象就成为强可及对象，这种情况下的对象垃圾回收器不予理睬。如果我们开发过程不需要垃圾回器回收该对象，就直接将该对象赋为强引用，也是普通的编程方法。<br>　　2)软可及对象（softly reachable）：<br>　　不通过强引用访问的对象，即不是强可及对象，但是可以通过软引用访问的对象就成为软可及对象，软可及对象就需要使用类SoftReference（java.lang.ref.SoftReference）。此种类型的引用主要用于内存比较敏感的高速缓存，而且此种引用还是具有较强的引用功能，当内存不够的时候GC会回收这类内存，因此如果内存充足的时候，这种引用通常不会被回收的。不仅仅如此，这种引用对象在JVM里面保证在抛出OutOfMemory异常之前，设置成为null。通俗地讲，这种类型的引用保证在JVM内存不足的时候全部被清除，但是有个关键在于：垃圾收集器在运行时是否释放软可及对象是不确定的，而且使用垃圾回收算法并不能保证一次性寻找到所有的软可及对象。当垃圾回收器每次运行的时候都可以随意释放不是强可及对象占用的内存，如果垃圾回收器找到了软可及对象过后，可能会进行以下操作：<br>将SoftReference对象的referent域设置成为null，从而使该对象不再引用heap对象。<br>SoftReference引用过的内存堆上的对象一律被生命为finalizable。<br>当内存堆上的对象finalize()方法被运行而且该对象占用的内存被释放，SoftReference对象就会被添加到它的ReferenceQueue，前提条件是ReferenceQueue本身是存在的。<br>　　既然Java里面存在这样的对象，那么我们在编写代码的时候如何创建这样的对象呢？创建步骤如下：<br>　　先创建一个对象，并使用普通引用方式【强引用】，然后再创建一个SoftReference来引用该对象，最后将普通引用设置为null，通过这样的方式，这个对象就仅仅保留了一个SoftReference引用，同时这种情况我们所创建的对象就是SoftReference对象。一般情况下，我们可以使用该引用来完成Cache功能，就是前边说的用于高速缓存，保证最大限度使用内存而不会引起内存泄漏的情况。下边的代码段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String args[])</span><br><span class="line">　　&#123;</span><br><span class="line">　　　　//创建一个强可及对象</span><br><span class="line">　　　　A a = new A();</span><br><span class="line">　　　　//创建这个对象的软引用SoftReference</span><br><span class="line">　　　　SoftReference sr = new SoftReference(a);</span><br><span class="line">　　　　//将强引用设置为空，以遍垃圾回收器回收强引用</span><br><span class="line">　　　　a = null;</span><br><span class="line">　　　　//下次使用该对象的操作</span><br><span class="line">　　　　if( sr != null )&#123;</span><br><span class="line">　　　　　　a = (A)sr.get();</span><br><span class="line">　　　　&#125;else&#123;</span><br><span class="line">　　　　　　//这种情况就是由于内存过低，已经将软引用释放了，因此需要重新装载一次</span><br><span class="line">　　　　　　a = new A();</span><br><span class="line">　　　　　　sr = new SoftReference(a);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>　　软引用技术使得Java系统可以更好地管理内存，保持系统稳定，防止内存泄漏，避免系统崩溃，因此在处理一些内存占用大而且生命周期长使用不频繁的对象可以使用该技术。<br>　　3)弱可及对象（weakly reachable）：<br>　　不是强可及对象同样也不是软可及对象，仅仅通过弱引用WeakReference（java.lang.ref.WeakReference）访问的对象，这种对象的用途在于规范化映射（canonicalized mapping），对于生存周期相对比较长而且重新创建的时候开销少的对象，弱引用也比较有用，和软引用对象不同的是，垃圾回收器如果碰到了弱可及对象，将释放WeakReference对象的内存，但是垃圾回收器需要运行很多次才能够找到弱可及对象。弱引用对象在使用的时候，可以配合ReferenceQueue类使用，如果弱引用被回收，JVM就会把这个弱引用加入到相关的引用队列中去。最简单的弱引用方法如以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WeakReference weakWidget = new WeakReference(classA);</span><br></pre></td></tr></table></figure><p>　　在上边代码里面，当我们使用weakWidget.get()来获取classA的时候，由于弱引用本身是无法阻止垃圾回收的，所以我们也许会拿到一个null为返回。【*：这里提供一个小技巧，如果我们希望取得某个对象的信息，但是又不影响该对象的垃圾回收过程，我们就可以使用WeakReference来记住该对象，一般我们在开发调试器和优化器的时候使用这个是很好的一个手段。】<br>　　如果上边的代码部分，我们通过weakWidget.get()返回的是null就证明该对象已经被垃圾回收器回收了，而这种情况下弱引用对象就失去了使用价值，GC就会定义为需要进行清除工作。这种情况下弱引用无法引用任何对象，所以在JVM里面就成为了一个死引用，这就是为什么我们有时候需要通过ReferenceQueue类来配合使用的原因，使用了ReferenceQueue过后，就使得我们更加容易监视该引用的对象，如果我们通过一ReferenceQueue类来构造一个弱引用，当弱引用的对象已经被回收的时候，系统将自动使用对象引用队列来代替对象引用，而且我们可以通过ReferenceQueue类的运行来决定是否真正要从垃圾回收器里面将该死引用（Dead Reference）清除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">弱引用代码段：</span><br><span class="line">　　//创建普通引用对象</span><br><span class="line">　　MyObject object = new MyObject();</span><br><span class="line">　　//创建一个引用队列</span><br><span class="line">　　ReferenceQueue rq = new ReferenceQueue();</span><br><span class="line">　　//使用引用队列创建MyObject的弱引用</span><br><span class="line">　　WeakReference wr = new WeakReference(object,rq);</span><br></pre></td></tr></table></figure><p>　　这里提供两个实在的场景来描述弱引用的相关用法：<br>　　[1]你想给对象附加一些信息，于是你用一个 Hashtable 把对象和附加信息关联起来。你不停的把对象和附加信息放入 Hashtable 中，但是当对象用完的时候，你不得不把对象再从 Hashtable 中移除，否则它占用的内存变不会释放。万一你忘记了，那么没有从 Hashtable 中移除的对象也可以算作是内存泄漏。理想的状况应该是当对象用完时，Hashtable 中的对象会自动被垃圾收集器回收，不然你就是在做垃圾回收的工作。<br>　　[2]你想实现一个图片缓存，因为加载图片的开销比较大。你将图片对象的引用放入这个缓存，以便以后能够重新使用这个对象。但是你必须决定缓存中的哪些图片不再需要了，从而将引用从缓存中移除。不管你使用什么管理缓存的算法，你实际上都在处理垃圾收集的工作，更简单的办法（除非你有特殊的需求，这也应该是最好的办法）是让垃圾收集器来处理，由它来决定回收哪个对象。<br>　　当Java回收器遇到了弱引用的时候有可能会执行以下操作：<br>将WeakReference对象的referent域设置成为null，从而使该对象不再引用heap对象。<br>WeakReference引用过的内存堆上的对象一律被生命为finalizable。<br>当内存堆上的对象finalize()方法被运行而且该对象占用的内存被释放，WeakReference对象就会被添加到它的ReferenceQueue，前提条件是ReferenceQueue本身是存在的。<br>　　4)清除：<br>　　当引用对象的referent域设置为null，并且引用类在内存堆中引用的对象声明为可结束的时候，该对象就可以清除，清除不做过多的讲述<br>　　5)虚可及对象（phantomly reachable）：<br>　　不是强可及对象，也不是软可及对象，同样不是弱可及对象，之所以把虚可及对象放到最后来讲，主要也是因为它的特殊性，有时候我们又称之为“幽灵对象”，已经结束的，可以通过虚引用来访问该对象。我们使用类PhantomReference（java.lang.ref.PhantomReference）来访问，这个类只能用于跟踪被引用对象进行的收集，同样的，可以用于执行per-mortern清除操作。PhantomReference必须与ReferenceQueue类一起使用。需要使用ReferenceQueue是因为它能够充当通知机制，当垃圾收集器确定了某个对象是虚可及对象的时候，PhantomReference对象就被放在了它的ReferenceQueue上，这就是一个通知，表明PhantomReference引用的对象已经结束，可以收集了，一般情况下我们刚好在对象内存在回收之前采取该行为。这种引用不同于弱引用和软引用，这种方式通过get()获取到的对象总是返回null，仅仅当这些对象在ReferenceQueue队列里面的时候，我们可以知道它所引用的哪些对对象是死引用（Dead Reference）。而这种引用和弱引用的区别在于：<br>　　弱引用（WeakReference）是在对象不可达的时候尽快进入ReferenceQueue队列的，在finalization方法执行和垃圾回收之前是确实会发生的，理论上这类对象是不正确的对象，但是WeakReference对象可以继续保持Dead状态，<br>　　虚引用（PhantomReference）是在对象确实已经从物理内存中移除过后才进入的ReferenceQueue队列，而且get()方法会一直返回null<br>　　当垃圾回收器遇到了虚引用的时候将有可能执行以下操作：<br>PhantomReference引用过的heap对象声明为finalizable；<br>虚引用在堆对象释放之前就添加到了它的ReferenceQueue里面，这种情况使得我们可以在堆对象被回收之前采取操作【*：再次提醒，PhantomReference对象必须经过关联的ReferenceQueue来创建，就是说必须和ReferenceQueue类配合操作】<br>　　看似没有用处的虚引用，有什么用途呢？<br>首先，我们可以通过虚引用知道对象究竟什么时候真正从内存里面移除的，而且这也是唯一的途径。<br>虚引用避过了finalize()方法，因为对于此方法的执行而言，虚引用真正引用到的对象是异常对象，若在该方法内要使用对象只能重建。一般情况垃圾回收器会轮询两次，一次标记为finalization，第二次进行真实的回收，而往往标记工作不能实时进行，或者垃圾回收其会等待一个对象去标记finalization。这种情况很有可能引起MemoryOut，而使用虚引用这种情况就会完全避免。因为虚引用在引用对象的过程不会去使得这个对象由Dead复活，而且这种对象是可以在回收周期进行回收的。<br>　　在JVM内部，虚引用比起使用finalize()方法更加安全一点而且更加有效。而finaliaze()方法回收在虚拟机里面实现起来相对简单，而且也可以处理大部分工作，所以我们仍然使用这种方式来进行对象回收的扫尾操作，但是有了虚引用过后我们可以选择是否手动操作该对象使得程序更加高效完美。<br>　　iv.防止内存泄漏[来自IBM开发中心]：<br>　　1)使用软引用阻止泄漏：<br>　　[1]在Java语言中有一种形式的内存泄漏称为对象游离（Object Loitering）：<br>　　——[$]对象游离——<br>// 注意，这段代码属于概念说明代码，实际应用中不要模仿</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class LeakyChecksum&#123;</span><br><span class="line">    private byte[] byteArray;</span><br><span class="line">    public synchronized int getFileCheckSum(String filename)</span><br><span class="line">    &#123;</span><br><span class="line">        int len = getFileSize(filename);</span><br><span class="line">        if( byteArray == null || byteArray.length &lt; len )</span><br><span class="line">            byteArray = new byte[len];</span><br><span class="line">        readFileContents(filename,byteArray);</span><br><span class="line">        // 计算该文件的值然后返回该对象</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　上边的代码是类LeakyChecksum用来说明对象游离的概念，里面有一个getFileChecksum()方法用来计算文件内容校验和，getFileCheckSum方法将文件内容读取到缓冲区中计算校验和，更加直观的实现就是简单地将缓冲区作为getFileChecksum中的本地变量分配，但是上边这个版本比这种版本更加“聪明”，不是将缓冲区缓冲在实例中字段中减少内存churn。该“优化”通常不带来预期的好处，对象分配比很多人期望的更加便宜。（还要注意，将缓冲区从本地变量提升到实例变量，使得类若不带有附加的同步，就不再是线程安全的了。直观的实现不需要将 getFileChecksum() 声明为 synchronized，并且会在同时调用时提供更好的可伸缩性。）<br>　　这个类存在很多的问题，但是我们着重来看内存泄漏。缓存缓冲区的决定很可能是根据这样的假设得出的，即该类将在一个程序中被调用许多次，因此它应该更加有效，以重用缓冲区而不是重新分配它。但是结果是，缓冲区永远不会被释放，因为它对程序来说总是可及的（除非LeakyChecksum对象被垃圾收集了）。更坏的是，它可以增长，却不可以缩小，所以 LeakyChecksum 将永久保持一个与所处理的最大文件一样大小的缓冲区。退一万步说，这也会给垃圾收集器带来压力，并且要求更频繁的收集；为计算未来的校验和而保持一个大型缓冲区并不是可用内存的最有效利用。LeakyChecksum 中问题的原因是，缓冲区对于 getFileChecksum() 操作来说逻辑上是本地的，但是它的生命周期已经被人为延长了，因为将它提升到了实例字段。因此，该类必须自己管理缓冲区的生命周期，而不是让 JVM 来管理。<br>　　这里可以提供一种策略就是使用Java里面的软引用：<br>　　弱引用如何可以给应用程序提供当对象被程序使用时另一种到达该对象的方法，但是不会延长对象的生命周期。Reference 的另一个子类——软引用——可满足一个不同却相关的目的。其中弱引用允许应用程序创建不妨碍垃圾收集的引用，软引用允许应用程序通过将一些对象指定为 “expendable” 而利用垃圾收集器的帮助。尽管垃圾收集器在找出哪些内存在由应用程序使用哪些没在使用方面做得很好，但是确定可用内存的最适当使用还是取决于应用程序。如果应用程序做出了不好的决定，使得对象被保持，那么性能会受到影响，因为垃圾收集器必须更加辛勤地工作，以防止应用程序消耗掉所有内存。高速缓存是一种常见的性能优化，允许应用程序重用以前的计算结果，而不是重新进行计算。高速缓存是 CPU 利用和内存使用之间的一种折衷，这种折衷理想的平衡状态取决于有多少内存可用。若高速缓存太少，则所要求的性能优势无法达到；若太多，则性能会受到影响，因为太多的内存被用于高速缓存上，导致其他用途没有足够的可用内存。因为垃圾收集器比应用程序更适合决定内存需求，所以应该利用垃圾收集器在做这些决定方面的帮助，这就是件引用所要做的。如果一个对象惟一剩下的引用是弱引用或软引用，那么该对象是软可及的（softly reachable）。垃圾收集器并不像其收集弱可及的对象一样尽量地收集软可及的对象，相反，它只在真正 “需要” 内存时才收集软可及的对象。软引用对于垃圾收集器来说是这样一种方式，即 “只要内存不太紧张，我就会保留该对象。但是如果内存变得真正紧张了，我就会去收集并处理这个对象。” 垃圾收集器在可以抛出OutOfMemoryError 之前需要清除所有的软引用。通过使用一个软引用来管理高速缓存的缓冲区，可以解决 LeakyChecksum中的问题，如上边代码所示。现在，只要不是特别需要内存，缓冲区就会被保留，但是在需要时，也可被垃圾收集器回收：<br>　　——[$]使用软引用修复上边代码段——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class CachingChecksum</span><br><span class="line">&#123;</span><br><span class="line">    private SoftReference&lt;byte[]&gt; bufferRef;</span><br><span class="line">    public synchronized int getFileChecksum(String filename)</span><br><span class="line">    &#123;</span><br><span class="line">        int len = getFileSize(filename);</span><br><span class="line">        byte[] byteArray = bufferRef.get();</span><br><span class="line">        if( byteArray == null || byteArray.length &lt; len )</span><br><span class="line">        &#123;</span><br><span class="line">            byteArray = new byte[len];</span><br><span class="line">            bufferRef.set(byteArray);</span><br><span class="line">        &#125;</span><br><span class="line">        readFileContents(filename,byteArray);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　一种廉价缓存：<br>　　CachingChecksum使用一个软引用来缓存单个对象，并让 JVM 处理从缓存中取走对象时的细节。类似地，软引用也经常用于 GUI 应用程序中，用于缓存位图图形。是否可使用软引用的关键在于，应用程序是否可从大量缓存的数据恢复。如果需要缓存不止一个对象，您可以使用一个 Map，但是可以选择如何使用软引用。您可以将缓存作为 Map&lt;K, SoftReference<v>&gt; 或SoftReference&lt;Map&lt;K,V&gt;&gt; 管理。后一种选项通常更好一些，因为它给垃圾收集器带来的工作更少，并且允许在特别需要内存时以较少的工作回收整个缓存。弱引用有时会错误地用于取代软引用，用于构建缓存，但是这会导致差的缓存性能。在实践中，弱引用将在对象变得弱可及之后被很快地清除掉——通常是在缓存的对象再次用到之前——因为小的垃圾收集运行得很频繁。对于在性能上非常依赖高速缓存的应用程序来说，软引用是一个不管用的手段，它确实不能取代能够提供灵活终止期、复制和事务型高速缓存的复杂的高速缓存框架。但是作为一种 “廉价（cheap and dirty）” 的高速缓存机制，它对于降低价格是很有吸引力的。正如弱引用一样，软引用也可创建为具有一个相关的引用队列，引用在被垃圾收集器清除时进入队列。引用队列对于软引用来说，没有对弱引用那么有用，但是它们可以用于发出管理警报，说明应用程序开始缺少内存。<br>　　2)垃圾回收对引用的处理：<br>　　弱引用和软引用都扩展了抽象的 Reference 类虚引用（phantom references），引用对象被垃圾收集器特殊地看待。垃圾收集器在跟踪堆期间遇到一个 Reference 时，不会标记或跟踪该引用对象，而是在已知活跃的 Reference 对象的队列上放置一个 Reference。在跟踪之后，垃圾收集器就识别软可及的对象——这些对象上除了软引用外，没有任何强引用。垃圾收集器然后根据当前收集所回收的内存总量和其他策略考虑因素，判断软引用此时是否需要被清除。将被清除的软引用如果具有相应的引用队列，就会进入队列。其余的软可及对象（没有清除的对象）然后被看作一个根集（root set），堆跟踪继续使用这些新的根，以便通过活跃的软引用而可及的对象能够被标记。处理软引用之后，弱可及对象的集合被识别 —— 这样的对象上不存在强引用或软引用。这些对象被清除和加入队列。所有 Reference 类型在加入队列之前被清除，所以处理事后检查（post-mortem）清除的线程永远不会具有 referent 对象的访问权，而只具有Reference 对象的访问权。因此，当 References 与引用队列一起使用时，通常需要细分适当的引用类型，并将它直接用于您的设计中（与 WeakHashMap 一样，它的 Map.Entry 扩展了 WeakReference）或者存储对需要清除的实体的引用。<br>　　3)使用弱引用堵住内存泄漏：<br>　　[1]全局Map造成的内存泄漏：<br>　　无意识对象保留最常见的原因是使用 Map 将元数据与临时对象（transient object）相关联。假定一个对象具有中等生命周期，比分配它的那个方法调用的生命周期长，但是比应用程序的生命周期短，如客户机的套接字连接。需要将一些元数据与这个套接字关联，如生成连接的用户的标识。在创建 Socket 时是不知道这些信息的，并且不能将数据添加到 Socket 对象上，因为不能控制 Socket 类或者它的子类。这时，典型的方法就是在一个全局 Map 中存储这些信息：</v></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class SocketManager&#123;</span><br><span class="line">    private Map&lt;Socket,User&gt; m = new HashMap&lt;Socket,User&gt;();</span><br><span class="line">    public void setUser(Socket s,User u)</span><br><span class="line">    &#123;</span><br><span class="line">        m.put(s,u);</span><br><span class="line">    &#125;</span><br><span class="line">    public User getUser(Socket s)&#123;</span><br><span class="line">        return m.get(s);</span><br><span class="line">    &#125;</span><br><span class="line">    public void removeUser(Socket s)&#123;</span><br><span class="line">        m.remove(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">SocketManager socketManager;</span><br><span class="line">//…</span><br><span class="line">socketManager.setUser(socket,user);</span><br></pre></td></tr></table></figure><p>　　这种方法的问题是元数据的生命周期需要与套接字的生命周期挂钩，但是除非准确地知道什么时候程序不再需要这个套接字，并记住从 Map 中删除相应的映射，否则，Socket 和 User 对象将会永远留在 Map 中，远远超过响应了请求和关闭套接字的时间。这会阻止 Socket 和User 对象被垃圾收集，即使应用程序不会再使用它们。这些对象留下来不受控制，很容易造成程序在长时间运行后内存爆满。除了最简单的情况，在几乎所有情况下找出什么时候 Socket 不再被程序使用是一件很烦人和容易出错的任务，需要人工对内存进行管理。<br>　　[2]弱引用内存泄漏代码：<br>　　程序有内存泄漏的第一个迹象通常是它抛出一个 OutOfMemoryError，或者因为频繁的垃圾收集而表现出糟糕的性能。幸运的是，垃圾收集可以提供能够用来诊断内存泄漏的大量信息。如果以 -verbose:gc 或者 -Xloggc 选项调用 JVM，那么每次 GC 运行时在控制台上或者日志文件中会打印出一个诊断信息，包括它所花费的时间、当前堆使用情况以及恢复了多少内存。记录 GC 使用情况并不具有干扰性，因此如果需要分析内存问题或者调优垃圾收集器，在生产环境中默认启用 GC 日志是值得的。有工具可以利用 GC 日志输出并以图形方式将它显示出来，JTune 就是这样的一种工具。观察 GC 之后堆大小的图，可以看到程序内存使用的趋势。对于大多数程序来说，可以将内存使用分为两部分：baseline 使用和 current load 使用。对于服务器应用程序，baseline 使用就是应用程序在没有任何负荷、但是已经准备好接受请求时的内存使用，current load 使用是在处理请求过程中使用的、但是在请求处理完成后会释放的内存。只要负荷大体上是恒定的，应用程序通常会很快达到一个稳定的内存使用水平。如果在应用程序已经完成了其初始化并且负荷没有增加的情况下，内存使用持续增加，那么程序就可能在处理前面的请求时保留了生成的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class MapLeaker&#123;</span><br><span class="line">    public ExecuteService exec = Executors.newFixedThreadPool(5);</span><br><span class="line">    public Map&lt;Task,TaskStatus&gt; taskStatus</span><br><span class="line">        = Collections.synchronizedMap(new HashMap&lt;Task,TaskStatus&gt;());</span><br><span class="line">    private Random random = new Random();</span><br><span class="line">    private enum TaskStatus &#123; NOT_STARTED, STARTED, FINISHED &#125;;</span><br><span class="line">    private class Task implements Runnable&#123;</span><br><span class="line">        private int[] numbers = new int[random.nextInt(200)];</span><br><span class="line">        public void run()</span><br><span class="line">        &#123;</span><br><span class="line">            int[] temp = new int[random.nextInt(10000)];</span><br><span class="line">            taskStatus.put(this,TaskStatus.STARTED);</span><br><span class="line">            doSomework();</span><br><span class="line">            taskStatus.put(this,TaskStatus.FINISHED);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public Task newTask()</span><br><span class="line">    &#123;</span><br><span class="line">        Task t = new Task();</span><br><span class="line">        taskStatus.put(t,TaskStatus.NOT_STARTED);</span><br><span class="line">        exec.execute(t);</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　[3]使用弱引用堵住内存泄漏：<br>　　SocketManager 的问题是 Socket-User 映射的生命周期应当与 Socket 的生命周期相匹配，但是语言没有提供任何容易的方法实施这项规则。这使得程序不得不使用人工内存管理的老技术。幸运的是，从 JDK 1.2 开始，垃圾收集器提供了一种声明这种对象生命周期依赖性的方法，这样垃圾收集器就可以帮助我们防止这种内存泄漏——利用弱引用。弱引用是对一个对象（称为 referent）的引用的持有者。使用弱引用后，可以维持对 referent 的引用，而不会阻止它被垃圾收集。当垃圾收集器跟踪堆的时候，如果对一个对象的引用只有弱引用，那么这个 referent 就会成为垃圾收集的候选对象，就像没有任何剩余的引用一样，而且所有剩余的弱引用都被清除。（只有弱引用的对象称为弱可及（weakly reachable））WeakReference 的 referent 是在构造时设置的，在没有被清除之前，可以用 get() 获取它的值。如果弱引用被清除了（不管是 referent 已经被垃圾收集了，还是有人调用了 WeakReference.clear()），get() 会返回 null。相应地，在使用其结果之前，应当总是检查get() 是否返回一个非 null 值，因为 referent 最终总是会被垃圾收集的。用一个普通的（强）引用拷贝一个对象引用时，限制 referent 的生命周期至少与被拷贝的引用的生命周期一样长。如果不小心，那么它可能就与程序的生命周期一样——如果将一个对象放入一个全局集合中的话。另一方面，在创建对一个对象的弱引用时，完全没有扩展 referent 的生命周期，只是在对象仍然存活的时候，保持另一种到达它的方法。弱引用对于构造弱集合最有用，如那些在应用程序的其余部分使用对象期间存储关于这些对象的元数据的集合——这就是 SocketManager 类所要做的工作。因为这是弱引用最常见的用法，WeakHashMap 也被添加到 JDK 1.2 的类库中，它对键（而不是对值）使用弱引用。如果在一个普通 HashMap 中用一个对象作为键，那么这个对象在映射从 Map 中删除之前不能被回收，WeakHashMap 使您可以用一个对象作为 Map 键，同时不会阻止这个对象被垃圾收集。下边的代码给出了 WeakHashMap 的 get() 方法的一种可能实现，它展示了弱引用的使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class WeakHashMap&lt;K,V&gt; implements Map&lt;K,V&gt;</span><br><span class="line">&#123;</span><br><span class="line">    private static class Entry&lt;K,V&gt; extends WeakReference&lt;K&gt; implements Map.Entry&lt;K,V&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        private V value;</span><br><span class="line">        private final int hash;</span><br><span class="line">        private Entry&lt;K,V&gt; next;</span><br><span class="line">        // …</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public V get(Object key)</span><br><span class="line">    &#123;</span><br><span class="line">        int hash = getHash(key);</span><br><span class="line">        Entry&lt;K,V&gt; e = getChain(hash);</span><br><span class="line">        while(e != null)</span><br><span class="line">        &#123;</span><br><span class="line">            k eKey = e.get();</span><br><span class="line">            if( e.hash == hash &amp;&amp; (key == eKey || key.equals(eKey)))</span><br><span class="line">                return e.value;</span><br><span class="line">            e = e.next;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　调用 WeakReference.get() 时，它返回一个对 referent 的强引用（如果它仍然存活的话），因此不需要担心映射在 while 循环体中消失，因为强引用会防止它被垃圾收集。WeakHashMap 的实现展示了弱引用的一种常见用法——一些内部对象扩展 WeakReference。其原因在下面一节讨论引用队列时会得到解释。在向 WeakHashMap 中添加映射时，请记住映射可能会在以后“脱离”，因为键被垃圾收集了。在这种情况下，get() 返回 null，这使得测试 get() 的返回值是否为 null 变得比平时更重要了。<br>　　[4]使用WeakHashMap堵住泄漏<br>　　在 SocketManager 中防止泄漏很容易，只要用 WeakHashMap 代替 HashMap 就行了，如下边代码所示。（如果 SocketManager 需要线程安全，那么可以用 Collections.synchronizedMap() 包装 WeakHashMap）。当映射的生命周期必须与键的生命周期联系在一起时，可以使用这种方法。不过，应当小心不滥用这种技术，大多数时候还是应当使用普通的 HashMap 作为 Map 的实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class SocketManager&#123;</span><br><span class="line">    private Map&lt;Socket,User&gt; m = new WeakHashMap&lt;Socket,User&gt;();</span><br><span class="line">    public void setUser(Socket s, User s)</span><br><span class="line">    &#123;</span><br><span class="line">        m.put(s,u);</span><br><span class="line">    &#125;</span><br><span class="line">    public User getUser(Socket s)</span><br><span class="line">    &#123;</span><br><span class="line">        return m.get(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　引用队列：　　</p><p>　　WeakHashMap 用弱引用承载映射键，这使得应用程序不再使用键对象时它们可以被垃圾收集，get() 实现可以根据 WeakReference.get() 是否返回 null 来区分死的映射和活的映射。但是这只是防止 Map 的内存消耗在应用程序的生命周期中不断增加所需要做的工作的一半，还需要做一些工作以便在键对象被收集后从 Map 中删除死项。否则，Map 会充满对应于死键的项。虽然这对于应用程序是不可见的，但是它仍然会造成应用程序耗尽内存，因为即使键被收集了，Map.Entry 和值对象也不会被收集。可以通过周期性地扫描 Map，对每一个弱引用调用 get()，并在 get() 返回 null 时删除那个映射而消除死映射。但是如果 Map 有许多活的项，那么这种方法的效率很低。如果有一种方法可以在弱引用的 referent 被垃圾收集时发出通知就好了，这就是引用队列的作用。引用队列是垃圾收集器向应用程序返回关于对象生命周期的信息的主要方法。弱引用有两个构造函数：一个只取 referent 作为参数，另一个还取引用队列作为参数。如果用关联的引用队列创建弱引用，在 referent 成为 GC 候选对象时，这个引用对象（不是referent）就在引用清除后加入 到引用队列中。之后，应用程序从引用队列提取引用并了解到它的 referent 已被收集，因此可以进行相应的清理活动，如去掉已不在弱集合中的对象的项。（引用队列提供了与 BlockingQueue 同样的出列模式 ——polled、timed blocking 和 untimed blocking。）WeakHashMap 有一个名为 expungeStaleEntries() 的私有方法，大多数 Map 操作中会调用它，它去掉引用队列中所有失效的引用，并删除关联的映射。<br>　　<br>　　4)关于Java中引用思考：<br>　　先观察一个列表：<br>级别 回收时间 用途 生存时间<br>强引用 从来不会被回收 对象的一般状态 JVM停止运行时终止<br>软引用 在内存不足时<br>在客户端移除对象引用过后，除非再次激活，否则就放在内存敏感的缓存中 内存不足时终止<br>弱引用 在垃圾回收时，也就是客户端已经移除了强引用，但是这种情况下内存还是客户端引用可达的 阻止自动删除不需要用的对象 GC运行后终止<br>虚引用[幽灵引用]</p><p>对象死亡之前，就是进行finalize()方法调用附近 特殊的清除过程</p><p>不定，当finalize()函数运行过后再回收，有可能之前就已经被回收了。<br>　　可以这样理解：</p><p>　　SoftReference：假定垃圾回收器确定在某一时间点某个对象是软可到达对象。这时，它可以选择自动清除针对该对象的所有软引用，以及通过强引用链，从其可以到达该对象的针对任何其他软可到达对象的所有软引用。在同一时间或晚些时候，它会将那些已经向引用队列注册的新清除的软引用加入队列。 软可到达对象的所有软引用都要保证在虚拟机抛出 OutOfMemoryError<br>　　<br>　　之前已经被清除。否则，清除软引用的时间或者清除不同对象的一组此类引用的顺序将不受任何约束。然而，虚拟机实现不鼓励清除最近访问或使用过的软引用。 此类的直接实例可用于实现简单缓存；该类或其派生的子类还可用于更大型的数据结构，以实现更复杂的缓存。只要软引用的指示对象是强可到达对象，即正在实际使用的对象，就不会清除软引用。例如，通过保持最近使用的项的强指示对象，并由垃圾回收器决定是否放弃剩余的项，复杂的缓存可以防止放弃最近使用的项。一般来说，WeakReference我们用来防止内存泄漏，保证内存对象被VM回收。<br>　　<br>　　<br>　　WeakReference：弱引用对象，它们并不禁止其指示对象变得可终结，并被终结，然后被回收。弱引用最常用于实现规范化的映射。假定垃圾回收器确定在某一时间点上某个对象是弱可到达对象。这时，它将自动清除针对此对象的所有弱引用，以及通过强引用链和软引用，可以从其到达该对象的针对任何其他弱可到达对象的所有弱引用。同时它将声明所有以前的弱可到达对象为可终结的。在同一时间或晚些时候，它将那些已经向引用队列注册的新清除的弱引用加入队列。<br>　　<br>　　SoftReference多用作来实现cache机制，保证cache的有效性。<br>　　<br>　　<br>　　PhantomReference：虚引用对象，在回收器确定其指示对象可另外回收之后，被加入队列。虚引用最常见的用法是以某种可能比使用 Java 终结机制更灵活的方式来指派 pre-mortem 清除操作。如果垃圾回收器确定在某一特定时间点上虚引用的指示对象是虚可到达对象，那么在那时或者在以后的某一时间，它会将该引用加入队列。为了确保可回收的对象仍然保持原状，虚引用的指示对象不能被检索：虚引用的 get 方法总是返回 null。与软引用和弱引用不同，虚引用在加入队列时并没有通过垃圾回收器自动清除。通过虚引用可到达的对象将仍然保持原状，直到所有这类引用都被清除，或者它们都变得不可到达。<br>　　<br>　　<br>　　以下是不确定概念<br>　　<br>　　<br>　　【*：Java引用的深入部分一直都是讨论得比较多的话题，上边大部分为摘录整理，这里再谈谈我个人的一些看法。从整个JVM框架结构来看，Java的引用和垃圾回收器形成了针对Java内存堆的一个对象的“闭包管理集”，其中在基本代码里面常用的就是强引用，强引用主要使用目的是就是编程的正常逻辑，这是所有的开发人员最容易理解的，而弱引用和软引用的作用是比较耐人寻味的。按照引用强弱，其排序可以为：强引用——软引用——弱引用——虚引用，为什么这样写呢，实际上针对垃圾回收器而言，强引用是它绝对不会随便去动的区域，因为在内存堆里面的对象，只有当前对象不是强引用的时候，该对象才会进入垃圾回收器的目标区域。<br>　　软引用又可以理解为“内存应急引用”，也就是说它和GC是完整地配合操作的，为了防止内存泄漏，当GC在回收过程出现内存不足的时候，软引用会被优先回收，从垃圾回收算法上讲，软引用在设计的时候是很容易被垃圾回收器发现的。为什么软引用是处理告诉缓存的优先选择的，主要有两个原因：第一，它对内存非常敏感，从抽象意义上讲，我们甚至可以任何它和内存的变化紧紧绑定到一起操作的，因为内存一旦不足的时候，它会优先向垃圾回收器报警以提示内存不足；第二，它会尽量保证系统在OutOfMemoryError之前将对象直接设置成为不可达，以保证不会出现内存溢出的情况；所以使用软引用来处理Java引用里面的高速缓存是很不错的选择。其实软引用不仅仅和内存敏感，实际上和垃圾回收器的交互也是敏感的，这点可以这样理解，因为当内存不足的时候，软引用会报警，而这种报警会提示垃圾回收器针对目前的一些内存进行清除操作，而在有软引用存在的内存堆里面，垃圾回收器会第一时间反应，否则就会MemoryOut了。按照我们正常的思维来考虑，垃圾回收器针对我们调用System.gc()的时候，是不会轻易理睬的，因为仅仅是收到了来自强引用层代码的请求，至于它是否回收还得看JVM内部环境的条件是否满足，但是如果是软引用的方式去申请垃圾回收器会优先反应，只是我们在开发过程不能控制软引用对垃圾回收器发送垃圾回收申请，而JVM规范里面也指出了软引用不会轻易发送申请到垃圾回收器。这里还需要解释的一点的是软引用发送申请不是说软引用像我们调用System.gc()这样直接申请垃圾回收，而是说软引用会设置对象引用为null，而垃圾回收器针对该引用的这种做法也会优先响应，我们可以理解为是软引用对象在向垃圾回收器发送申请。反应快并不代表垃圾回收器会实时反应，还是会在寻找软引用引用到的对象的时候遵循一定的回收规则，反应快在这里的解释是相对强引用设置对象为null，当软引用设置对象为null的时候，该对象的被收集的优先级比较高。<br>　　<br>　　<br>　　弱引用是一种比软引用相对复杂的引用，其实弱引用和软引用都是Java程序可以控制的，也就是说可以通过代码直接使得引用针对弱可及对象以及软可及对象是可引用的，软引用和弱引用引用的对象实际上通过一定的代码操作是可重新激活的，只是一般不会做这样的操作，这样的用法违背了最初的设计。弱引用和软引用在垃圾回收器的目标范围有一点点不同的就是，使用垃圾回收算法是很难找到弱引用的，也就是说弱引用用来监控垃圾回收的整个流程也是一种很好的选择，它不会影响垃圾回收的正常流程，这样就可以规范化整个对象从设置为null了过后的一个生命周期的代码监控。而且因为弱引用是否存在对垃圾回收整个流程都不会造成影响，可以这样认为，垃圾回收器找得到弱引用，该引用的对象就会被回收，如果找不到弱引用，一旦等到GC完成了垃圾回收过后，弱引用引用的对象占用的内存也会自动释放，这就是软引用在垃圾回收过后的自动终止。<br>　　<br>　　<br>　　最后谈谈虚引用，虚引用应该是JVM里面最厉害的一种引用，它的厉害在于它可以在对象的内存从物理内存中清除掉了过后再引用该对象，也就是说当虚引用引用到对象的时候，这个对象实际已经从物理内存堆中清除掉了，如果我们不用手动对对象死亡或者濒临死亡进行处理的话，JVM会默认调用finalize函数，但是虚引用存在于该函数附近的生命周期内，所以可以手动对对象的这个范围的周期进行监控。它之所以称为“幽灵引用”就是因为该对象的物理内存已经不存在的，我个人觉得JVM保存了一个对象状态的镜像索引，而这个镜像索引里面包含了对象在这个生命周期需要的所有内容，这里的所需要就是这个生命周期内需要的对象数据内容，也就是对象死亡和濒临死亡之前finalize函数附近，至于强引用所需要的其他对象附加内容是不需要在这个镜像里面包含的，所以即使物理内存不存在，还是可以通过虚引用监控到该对象的，只是这种情况是否可以让对象重新激活为强引用我就不敢说了。因为虚引用在引用对象的过程不会去使得这个对象由Dead复活，而且这种对象是可以在回收周期进行回收的。】</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;i.内存模型概述&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java平台自动集成了线程以及多处理器技术，这种集成程度比Java以前诞生的计算机语言要厉害很多，该语言针对多种异构平台的平台独立性而使用的多线程技术支持也是具有开拓性的一面，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/%E8%BF%9B%E7%A8%8B%EF%BC%8C%E7%AB%AF%E5%8F%A3%EF%BC%8C%E6%9C%8D%E5%8A%A1/"/>
    <id>http://kongxianghe.top/2018/10/23/进程，端口，服务/</id>
    <published>2018-10-23T14:29:57.192Z</published>
    <updated>2018-10-23T14:29:36.271Z</updated>
    
    <content type="html"><![CDATA[<p><strong>进程：</strong> </p><p>计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础   ——》360.exe</p><p><strong>端口：</strong> </p><p>硬件端口/usb接口/音频接口等；软件端口：进行互联网传输的一个开放区域 netstat -n </p><p><strong>服务：</strong> </p><p>cmd—&gt;services.msc /在电脑中，需要各种服务以支持各种功能，可以手动开启或关闭某些服务以达到管理相应的功能的目的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;进程：&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础   ——》360.exe&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;端口：&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;硬件端口/us
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/javascript%E5%89%8D%E7%AB%AF%E8%84%9A%E6%9C%AC%E6%8A%80%E6%9C%AF/"/>
    <id>http://kongxianghe.top/2018/10/23/javascript前端脚本技术/</id>
    <published>2018-10-23T14:06:03.507Z</published>
    <updated>2018-07-09T06:15:56.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascript前端脚本技术"><a href="#javascript前端脚本技术" class="headerlink" title="javascript前端脚本技术"></a>javascript前端脚本技术</h1><p><strong>今日内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">1、JavaScript概述</span><br><span class="line">简介</span><br><span class="line">作用</span><br><span class="line">发展史</span><br><span class="line">2、JavaScript数据类型</span><br><span class="line">声明变量</span><br><span class="line">基本类型</span><br><span class="line">引用类型(JSON)</span><br><span class="line">数组类型</span><br><span class="line">3、JavaScript运算符</span><br><span class="line">算术运算符</span><br><span class="line">关系运算符</span><br><span class="line">逻辑运算符</span><br><span class="line">4、JavaScript条件语句</span><br><span class="line">if结构</span><br><span class="line">switch结构</span><br><span class="line">5、JavaScript循环语句</span><br><span class="line">for结构</span><br><span class="line">while结构</span><br><span class="line">do while结构</span><br><span class="line">break和continue</span><br><span class="line">6、JavaScript弹窗函数</span><br><span class="line">alert()</span><br><span class="line">confirm()</span><br><span class="line">prompt()</span><br><span class="line">7、JavaScript事件函数</span><br><span class="line">onchange()</span><br><span class="line">onclick()</span><br><span class="line">onmouseover()</span><br><span class="line">onmouseout()</span><br><span class="line">onkeydown()</span><br><span class="line">onkeyup()</span><br><span class="line">onload()</span><br><span class="line">onfocus()</span><br><span class="line">onblur()</span><br><span class="line">8、JavaScript事件冒泡</span><br><span class="line">stopPropagation()</span><br><span class="line">9、JavaScript自定义函数</span><br><span class="line">function 函数名(参数)&#123;&#125;</span><br><span class="line">对像.事件=function()&#123;&#125;</span><br><span class="line">10、JavaScript正则表达式</span><br><span class="line">创建正则表达式方式</span><br><span class="line">正则表达式规则</span><br><span class="line">正则表达式方法</span><br><span class="line">支持正则表达式相关String方法</span><br><span class="line">正则表达式使用</span><br><span class="line">11、JavaScript:void(0)用法</span><br><span class="line">12、JavaScript阻止默认事件</span><br><span class="line">preventDefault()</span><br><span class="line">13、作业</span><br></pre></td></tr></table></figure><p><strong>一.JavaScript概述</strong><br>    简介:</p><p>​        是前端脚本语言,弱类型语言,具有一些特定的对像的语言,内嵌式语言,JavaScript解析器称javaScipt引擎,引擎是浏览器的一部份,所以浏览器可以直接解析javascript</p><p>​    作用:</p><p>​        可以控制网元素,可以做出更煊的动态网页效果</p><p>​    发展史:</p><p>​        netScape: javascript</p><p>​        microsoft: JScript</p><p>​        CEnvi: scriptEase</p><p>​    ECMA(欧洲计算机制造商协会):制定了前端脚本技术的规范,把前面三种技术统一.所以现在脚本也可称作为ECMAScript</p><p><strong>二.Javascript的使用</strong></p><p>​    1.使用规则:请把Javascript语句写标签<script type="text/javascript">脚本语言</script>中</p><p>​    <script></script>标签可以放在head标签中</p><p>​                    ,也可以放在body标签中,</p><p>​                    也在html标签中,</p><p>​                    也可以放在html标签之后</p><p>​    其中type类型属性,指浏览器会使用JS解析器解析该标签中的文本</p><p>==注意:为了提高文档加载效率,script标签一般放在html之后书写==</p><p><strong>三. JavaScript数据类型</strong></p><p>1.声明变量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var i;</span><br><span class="line">var j,k;</span><br><span class="line">var a = 1;</span><br><span class="line">var b = new number(1);</span><br></pre></td></tr></table></figure><p>2.基本类型:number,String,null,undefined,Date,Array,Object等</p><p>３.数组类型:和java一致,但创建时,数组长度可有可无.</p><p>​    注意:JS中没有集合类型,</p><p>​    数组下标从0开始.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array();</span><br><span class="line">//创建长度为5数组</span><br><span class="line">var arr2 = new Array(5);</span><br><span class="line">//先声明后付值</span><br><span class="line">var arr3 = new Array();</span><br><span class="line">arr3[0] = 1;</span><br><span class="line">//创建数组的同时付值</span><br><span class="line">var arr4 = [1,2,3,4];</span><br><span class="line">var arr5 = new Array(1,2,3,4);</span><br><span class="line">//取值</span><br><span class="line">var i = arr4[0]取出的值为1</span><br></pre></td></tr></table></figure><pre><code>4. 引用类型(JSON:javascript object notation):JS对像标记</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class User&#123;</span><br><span class="line">    </span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">//java中对对像的描述</span><br><span class="line">User user = new User();</span><br></pre></td></tr></table></figure><p>JS中怎么描述对像呢????</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">是通key:value形式描述对像的属性</span><br><span class="line">//key要使用引号(单引号|双引号),value如果是数值或引用类型则不加引号,如果字符串请使用用引号引起来.</span><br><span class="line">var user = &#123;&apos;username&apos;:&apos;admin&apos;,&apos;password&apos;:&apos;1234&apos;&#125;;</span><br></pre></td></tr></table></figure><p>JS中怎么描述一组对像???</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var users = &#123;</span><br><span class="line">&quot;user1&quot;:&#123;&apos;username&apos;:&apos;admin&apos;,&apos;password&apos;:&apos;1234&apos;&#125;&quot;,</span><br><span class="line">&quot;user2&quot;:&#123;&apos;username&apos;:&apos;user&apos;,&apos;password&apos;:&apos;1234&apos;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//取值</span><br><span class="line">alert(users.user1.username)</span><br></pre></td></tr></table></figure><p>数组中包含JSON数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var users2 = [&#123;&apos;username&apos;:&apos;admin&apos;,&apos;password&apos;:&apos;1234&apos;&#125;,&#123;&apos;username&apos;:&apos;user&apos;,&apos;password&apos;:&apos;1234&apos;&#125;];</span><br><span class="line"></span><br><span class="line">alert(users2[0].username)</span><br></pre></td></tr></table></figure><p>JSON中包含数组类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">／／学校中的班级和学生</span><br><span class="line">var grade = &#123;</span><br><span class="line"></span><br><span class="line">&quot;class1&quot;:[&#123;&apos;username&apos;:&apos;admin&apos;,&apos;password&apos;:&apos;1234&apos;&#125;,&#123;&apos;username&apos;:&apos;user&apos;,&apos;password&apos;:&apos;1234&apos;&#125;],</span><br><span class="line">&quot;class2&quot;:[&#123;&apos;username&apos;:&apos;张三&apos;,&apos;password&apos;:&apos;1234&apos;&#125;,&#123;&apos;username&apos;:&apos;李四&apos;,&apos;password&apos;:&apos;1234&apos;&#125;],</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(grade.class1[0].username)</span><br></pre></td></tr></table></figure><p><strong>四．JavaScript运算符</strong></p><p>​    １.算术运算符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">＋</span><br><span class="line">－　</span><br><span class="line">＊</span><br><span class="line">／</span><br><span class="line">％</span><br><span class="line">++</span><br><span class="line">--</span><br><span class="line">+=</span><br><span class="line">-=</span><br><span class="line">*=</span><br><span class="line">/=</span><br><span class="line">%=</span><br></pre></td></tr></table></figure><p>​    2.关系运算符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt;=</span><br><span class="line">&lt;</span><br><span class="line">&lt;=</span><br><span class="line">a&gt;b?a:b</span><br><span class="line">== 值相等</span><br><span class="line">===恒等即值相等且类型相等</span><br><span class="line">可以使用typeof(变量),可以获取变量的类型</span><br></pre></td></tr></table></figure><p>​    3.逻辑运算符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&amp;</span><br><span class="line">|</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line">&amp;&amp;</span><br><span class="line">||</span><br><span class="line">!</span><br></pre></td></tr></table></figure><p><strong>五.JavaScript条件语句</strong><br>    1.if结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//if结构</span><br><span class="line">if()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//if..else结构</span><br><span class="line">if()&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//if...else if...else结构</span><br><span class="line">if()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;else if()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2.switch结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">switch()&#123;</span><br><span class="line">    </span><br><span class="line">    case 1:</span><br><span class="line">    break;</span><br><span class="line">    case 2:</span><br><span class="line">    break;</span><br><span class="line">    default:</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>六.JavaScript循环语句</strong></p><p>​    1.for结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//基本for结构</span><br><span class="line">for(var i = 0;i&lt;10;i++)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">//forEach迭代</span><br><span class="line">//注意,这里i指下标</span><br><span class="line">for(var i in JOSN或数组)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">var arr = [1,2,3,4];</span><br><span class="line"></span><br><span class="line">for(var i in arr)&#123;</span><br><span class="line">alert(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>​    2.while结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while()&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    3.do while结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;while();</span><br></pre></td></tr></table></figure><p>​    4.break和continue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">break:跳转出当前循环体</span><br><span class="line">continue:加速循环</span><br></pre></td></tr></table></figure><p><strong>课堂练习</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.write(内容)写入文档</span><br></pre></td></tr></table></figure><p><img src="D:\JAVAEE教案\JAVAEE笔记\第3天 javaScript脚本\笔记\1.PNG" alt="1.png"></p><p><strong>七.JavaScript弹窗函数</strong><br>    1.alert(内容)  :弹出框架<br>    2.confirm(参数1): 确认框</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 返回值为boolean值</span><br><span class="line"> */</span><br><span class="line">var ret = confirm(&quot;确认退出吗&quot;);</span><br><span class="line"></span><br><span class="line">alert(ret)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>​    3.prompt(参数1) : 提示框</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 返回值为提示框输入的内容</span><br><span class="line"> */</span><br><span class="line">var info = prompt(&quot;请输入值:&quot;);</span><br><span class="line"></span><br><span class="line">alert(info)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>八.JavaScript事件函数</strong></p><p>​    1.onchange():文本内容发生改变事件</p><p>​    2.onclick():鼠标单击事件</p><p>​    3.onmouseover() :鼠标移入事件</p><p>​    4.onmouseout() :鼠标移出事件</p><p>​    5.onkeydown() :键盘键被按下事件</p><p>​    6.onkeyup() :键盘键抬起事件</p><p>​    7.onkeypress():键盘按下并抬起事件</p><p>​    8.onload() : 文档加载完毕事件,只能放在body标签中</p><p>​    9. onfocus(): 获得焦点事件</p><p>​    10.onblur():失去焦点事件</p><p><strong>九.JavaScript自定义函数</strong></p><ol><li>==function 函数名(参数){ 操作code….}==    </li></ol><p>​    函数是你想要做的事情,通常和事件一起联用</p><p>注意:代码放入自定义函数中,该代码段不会随着html文档加载而执行,其执行的时机是该函数被调用.</p><p>一般函数会被激发的事件而调用</p><p>调用语法:</p><p>​    ==事件名=”函数名()”;==</p><p>事件通常放在标签之中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//JS代码</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function doWriter()&#123;</span><br><span class="line">alert(&quot;控件被点击&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=&quot;button&quot;  id=&quot;btn&quot; value=&quot;点击&quot; onclick=&quot;doWriter()&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>==标签对像.事件=function(){}==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;d2&quot;&gt;div2&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//注意，该js代码写在html后面，如果写在head标签中，请放在onload事件中使用，否则，div标签将获取不到</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">//JS会把html文档中的标签抽像成JS的对像</span><br><span class="line">//getElementById(&quot;标签的ID&quot;),根据标签的ID获取该标签对像</span><br><span class="line">var d2 = document.getElementById(&quot;d2&quot;);</span><br><span class="line">//d2标签被点击要做的事情是????</span><br><span class="line">d2.onclick = function()&#123;</span><br><span class="line">alert(&quot;div2被点击&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>十.JavaScript事件冒泡</strong></p><p>表示子类标签事件被触发时，同时也触发父类标签相同的事件，这个过程叫冒泡</p><p>表示父类标签事件被触发时，同时也触发子类标签相同的事件，这个过程叫捕获</p><p>阻止事件冒泡的通常做法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">#d1&#123;</span><br><span class="line">width:300px;</span><br><span class="line">height: 300px;</span><br><span class="line">background: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#d2&#123;</span><br><span class="line">width:100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background: green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;d1&quot; onclick=&quot;dothing()&quot;&gt;</span><br><span class="line">&lt;div id=&quot;d2&quot; onclick=&quot;dothing2()&quot;&gt;</span><br><span class="line">div</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">//JS代码</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function dothing()&#123;</span><br><span class="line">alert(&quot;父类div被点击&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function dothing2()&#123;</span><br><span class="line">alert(&quot;子类div被点击&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//给标签加监听，以监听到某个事件的执行，恰当去阻止不想被触发的事件执行</span><br><span class="line">var div2 = document.getElementById(&quot;d2&quot;);</span><br><span class="line">//注意：false表示事件由子到父传播，true表示由父到子传播，监听的事件名称都去掉on前缀</span><br><span class="line">div2.addEventListener(&quot;click&quot;,function(e)&#123;</span><br><span class="line">//阻止冒泡,即组止事件向上传播</span><br><span class="line">e.stopPropagation();</span><br><span class="line"></span><br><span class="line">&#125;,false)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>十一.JS正则表达式</strong></p><p>==作用：使用正则表达式来书写校验规则，一般用作表单提交时的数据校验==</p><ol><li><p>正则表达式创建方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.创建方式一</span><br><span class="line">var reg = new RegExp(&quot;表达式字符串&quot;)</span><br><span class="line"></span><br><span class="line">2.创建方式二</span><br><span class="line">var reg2 = /^表达式字符串$/;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>正则表达式规则</p><p><strong>修饰符</strong></p><p>修饰符用于执行区分大小写和全局匹配:</p><p>| 修饰符                                                   | 描述                                                     |<br>| ——————————————————– | ——————————————————– |<br>| <a href="http://www.w3school.com.cn/jsref/jsref_regexp_i.asp" target="_blank" rel="noopener">i</a> | 执行对大小写不敏感的匹配。（不区分大小写）               |<br>| <a href="http://www.w3school.com.cn/jsref/jsref_regexp_g.asp" target="_blank" rel="noopener">g</a> | 执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。 |<br>| m                                                        | 执行多行匹配。                                           |</p><p><strong>方括号</strong></p><p>方括号用于查找某个范围内的字符：</p><p>| 表达式                                                       | 描述                               |<br>| ———————————————————— | ———————————- |<br>| <a href="http://www.w3school.com.cn/jsref/jsref_regexp_charset.asp" target="_blank" rel="noopener">[abc]</a> | 查找方括号之间的任何字符。         |<br>| <a href="http://www.w3school.com.cn/jsref/jsref_regexp_charset_not.asp" target="_blank" rel="noopener">[^abc]</a> | 查找任何不在方括号之间的字符。     |<br>| [0-9]                                                        | 查找任何从 0 至 9 的数字。         |<br>| [a-z]                                                        | 查找任何从小写 a 到小写 z 的字符。 |<br>| [A-Z]                                                        | 查找任何从大写 A 到大写 Z 的字符。 |<br>| [A-z]                                                        | 查找任何从大写 A 到小写 z 的字符。 |<br>| [adgk]                                                       | 查找给定集合内的任何字符。         |<br>| [^adgk]                                                      | 查找给定集合外的任何字符。         |<br>| (red|blue|green)                                           | 查找任何指定的选项。               |</p><p><strong>元字符</strong></p><p>元字符（Metacharacter）是拥有特殊含义的字符：</p><p>| 元字符                                                       | 描述                                        |<br>| ———————————————————— | ——————————————- |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-dot.html" target="_blank" rel="noopener">.</a>       | 查找单个字符，除了换行/n和行结束符/r.       |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-wordchar.html" target="_blank" rel="noopener">\w</a> | 查找单词字符。[ASCALL表中字符]？            |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-wordchar-non.html" target="_blank" rel="noopener">\W</a> | 查找非单词字符。[非ASCALL表中字符]？        |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-digit.html" target="_blank" rel="noopener">\d</a>    | 查找数字。相当于[0-9]                       |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-digit-non.html" target="_blank" rel="noopener">\D</a> | 查找非数字字符。[ ^ 0-9 ]                   |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-whitespace.html" target="_blank" rel="noopener">\s</a> | 查找空白字符。                              |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-whitespace-non.html" target="_blank" rel="noopener">\S</a> | 查找非空白字符。                            |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-begin.html" target="_blank" rel="noopener">\b</a>    | 匹配单词边界。                              |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-begin-not.html" target="_blank" rel="noopener">\B</a> | 匹配非单词边界。                            |<br>| \0                                                           | 查找 NULL 字符。                            |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-newline.html" target="_blank" rel="noopener">\n</a>  | 查找换行符。                                |<br>| \f                                                           | 查找换页符。                                |<br>| \r                                                           | 查找回车符。                                |<br>| \t                                                           | 查找制表符。                                |<br>| \v                                                           | 查找垂直制表符。                            |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-octal.html" target="_blank" rel="noopener">\xxx</a>  | 查找以八进制数 xxx 规定的字符。             |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-hex.html" target="_blank" rel="noopener">\xdd</a>    | 查找以十六进制数 dd 规定的字符。            |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-unicode-hex.html" target="_blank" rel="noopener">\uxxxx</a> | 查找以十六进制数 xxxx 规定的 Unicode 字符。 |</p><p><strong>量词</strong></p><p>| 量词                                                         | 描述                                                         |<br>| ———————————————————— | ———————————————————— |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-onemore.html" target="_blank" rel="noopener">n+</a>  | 匹配任何包含至少一个 n 的字符串。例如，/a+/ 匹配 “candy” 中的 “a”，”caaaaaaandy” 中所有的 “a”。 |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-zeromore.html" target="_blank" rel="noopener">n*</a> | 匹配任何包含零个或多个 n 的字符串。例如，/bo*/ 匹配 “A ghost booooed” 中的 “boooo”，”A bird warbled” 中的 “b”，但是不匹配 “A goat grunted”。 |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-zeroone.html" target="_blank" rel="noopener">n?</a>  | 匹配任何包含零个或一个 n 的字符串。例如，/e?le?/ 匹配 “angel” 中的 “el”，”angle” 中的 “le”。 |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-nx.html" target="_blank" rel="noopener">n{X}</a>     | 匹配包含 X 个 n 的序列的字符串。例如，/a{2}/ 不匹配 “candy,” 中的 “a”，但是匹配 “caandy,” 中的两个 “a”，且匹配 “caaandy.” 中的前两个 “a”。 |<br>| n{X,}                                                        | 匹配包含至少 X 个 n 的序列的字符串。X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配。例如，/a{2,}/ 不匹配 “candy” 中的 “a”，但是匹配 “caandy” 和 “caaaaaaandy.” 中所有的 “a”。 |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-nxy.html" target="_blank" rel="noopener">n{X,Y}</a>  | X 和 Y 为正整数。前面的模式 n 连续出现至少 X 次，至多 Y 次时匹配。例如，/a{1,3}/ 不匹配 “cndy”，匹配 “candy,” 中的 “a”，”caandy,” 中的两个 “a”，匹配 “caaaaaaandy” 中的前面三个 “a”。注意，当匹配 “caaaaaaandy” 时，即使原始字符串拥有更多的 “a”，匹配项也是 “aaa”。 |<br>|                                                              |                                                              |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-ndollar.html" target="_blank" rel="noopener">n$</a>  | 匹配任何结尾为 n 的字符串。                                  |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-ncaret.html" target="_blank" rel="noopener">^n</a>   | 匹配任何开头为 n 的字符串。                                  |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-nfollow.html" target="_blank" rel="noopener">?=n</a> | 匹配任何其后紧接指定字符串 n 的字符串。                      |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-nfollow-not.html" target="_blank" rel="noopener">?!n</a> | 匹配任何其后没有紧接指定字符串 n 的字符串。                  |</p></li><li><p>正则表达式方法</p><p><strong>RegExp 对象方法</strong></p><p>==test()方法重要==</p><p>| 方法                                                         | 描述                                               | FF   | IE   |<br>| ———————————————————— | ————————————————– | —- | —- |<br>| <a href="http://www.runoob.com/jsref/jsref-regexp-compile.html" target="_blank" rel="noopener">compile</a> | 编译正则表达式。                                   | 1    | 4    |<br>| <a href="http://www.runoob.com/jsref/jsref-exec-regexp.html" target="_blank" rel="noopener">exec</a>   | 检索字符串中指定的值。返回找到的值，并确定其位置。 | 1    | 4    |<br>| <a href="http://www.runoob.com/jsref/jsref-test-regexp.html" target="_blank" rel="noopener">test</a>   | 检索字符串中指定的值。返回 true 或 false。         | 1    | 4    |</p></li><li><p>支持正则表达式String 方法</p><p>| 方法                                                   | 描述                             | FF   | IE   |<br>| —————————————————— | ——————————– | —- | —- |<br>| <a href="http://www.runoob.com/js/jsref-search.html" target="_blank" rel="noopener">search</a>   | 检索与正则表达式相匹配的值。     | 1    | 4    |<br>| <a href="http://www.runoob.com/js/jsref-match.html" target="_blank" rel="noopener">match</a>     | 找到一个或多个正则表达式的匹配。 | 1    | 4    |<br>| <a href="http://www.runoob.com/js/jsref-replace.html" target="_blank" rel="noopener">replace</a> | 替换与正则表达式匹配的子串。     | 1    | 4    |<br>| <a href="http://www.runoob.com/js/jsref-split.html" target="_blank" rel="noopener">split</a>     | 把字符串分割为字符串数组。       | 1    | 4    |</p></li><li><p>正则表达式使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">  //0到9开始，0-9结尾，任意一个字符必须是0-9之间，也可以这样理解，其他字符必须是0-9，且最少出现一次</span><br><span class="line"></span><br><span class="line">var num = prompt(&quot;请输入数字!&quot;);</span><br><span class="line">//验证输入的是数字，结果返回true,否则返回false</span><br><span class="line">var reg = /^[0-9]+$/;</span><br><span class="line">var flag=reg.test(num);</span><br><span class="line">alert(flag);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">//手机号码必须是130开头，11位，数字</span><br><span class="line">var num = prompt(&quot;请输入电话!&quot;);</span><br><span class="line">var reg = /^130[0-9]&#123;8&#125;$/</span><br><span class="line">var flag=reg.test(num);</span><br><span class="line">alert(flag)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">//邮箱验证 1.用户名A-z0-9组成最少4位最多10位,出现@符号，</span><br><span class="line">//域名A-z0-9组成最少2位，最多10位，域名后缀.com|.cn|(.com.cn)</span><br><span class="line"></span><br><span class="line">var num = prompt(&quot;请输入邮箱!&quot;);</span><br><span class="line"></span><br><span class="line">var reg = /^[A-z0-9]&#123;4,10&#125;@[A-z0-9]&#123;2,10&#125;(.com|.cn|(.com.cn))$/</span><br><span class="line"></span><br><span class="line">var flag=reg.test(num);</span><br><span class="line"></span><br><span class="line">alert(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>十二 .JavaScript:void(0)用法</strong></p><p>​</p><p>​</p><p><strong>十三.JavaScript阻止默认事件</strong></p><p>​</p><p>​</p><p><strong>十四.作业</strong></p><p>​    1.使用正则表达式验证年纪必须在[0-120]之间。</p><p>​    2.使用正则表达式验证：用户名 必须是字母(大小写)开头,可以有数字和下划线 限制5-8位，不能为空</p><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;javascript前端脚本技术&quot;&gt;&lt;a href=&quot;#javascript前端脚本技术&quot; class=&quot;headerlink&quot; title=&quot;javascript前端脚本技术&quot;&gt;&lt;/a&gt;javascript前端脚本技术&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;今日内容&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/CSS%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    <id>http://kongxianghe.top/2018/10/23/CSS样式表/</id>
    <published>2018-10-23T14:06:03.503Z</published>
    <updated>2018-07-09T06:15:57.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS样式表"><a href="#CSS样式表" class="headerlink" title="CSS样式表"></a>CSS样式表</h1><p><strong>今日内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">1、CSS简介</span><br><span class="line">概念</span><br><span class="line">作用</span><br><span class="line">语法规范</span><br><span class="line">2、CSS导入方式</span><br><span class="line">行内样式</span><br><span class="line">内部样式</span><br><span class="line">外部样式</span><br><span class="line">3、CSS选择器</span><br><span class="line">基本选择器</span><br><span class="line">属性选择器</span><br><span class="line">层级选择器</span><br><span class="line">并集选择器</span><br><span class="line">伪选择器</span><br><span class="line">4、CSS属性</span><br><span class="line">文字属性</span><br><span class="line">文本属性</span><br><span class="line">背景属性</span><br><span class="line">列表属性</span><br><span class="line">尺寸属性</span><br><span class="line">显示属性</span><br><span class="line">轮廓属性</span><br><span class="line">浮动属性</span><br><span class="line">清除浮动</span><br><span class="line">5、CSS盒子模型</span><br><span class="line">概念</span><br><span class="line">边框属性</span><br><span class="line">内边距属性</span><br><span class="line">外边距属性</span><br><span class="line">6. 盒子定位及Z-index属性</span><br><span class="line">position属性</span><br><span class="line">z-index属性</span><br><span class="line">7、CSS扩展属性（CSS3）</span><br><span class="line">border-radius圆角属性</span><br><span class="line">box-shadow阴影属性</span><br><span class="line">background-size背景尺寸属性</span><br><span class="line">background-image背图片属性</span><br><span class="line">text-shadow文本阴影属性</span><br><span class="line">8、选择器优先级及样式引入的优先级</span><br><span class="line">选择器优先级</span><br><span class="line">引入方式优先级</span><br><span class="line">9、案例</span><br><span class="line">10、作业</span><br></pre></td></tr></table></figure><p>一.<strong>CSS简介</strong></p><p>1,概念:级联样式表或层叠样式表(Cascading style sheets)</p><p>2.作用:==修饰网页标签元素.渲染网页==</p><p>3.优点:</p><p>​    可以渲染网页,使用网页呈现良好的效果</p><p>​    外部样式表可以复用</p><p>​    容易修改,可以扩展</p><p>4.语法规范</p><p>​    W3C:(world wide web) 中立性的web技术规范的制定者,CSS只是其中的一项技术规范</p><p>​    <a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">http://www.w3school.com.cn/</a></p><p>​    <img src="D:\JAVAEE教案\JAVA笔记\第2天 CSS样式表\笔记\1.PNG" alt="1.jpg"></p><p>​    ==选择器:选中的一个或一组标签==</p><p>​    ==声明:key :value 其中key表示属性,value表示属性的值==</p><p>​    注意:声明和声明之间请用分号分隔</p><p>二.<strong>CSS导入方式</strong></p><p>​    行内样式:</p><p>​        样式写在标签元素中style属性之中 ,style=”声明1;声明2….”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style=&quot;color: green;font-size: 20px;&quot;&gt;中华人民共和国3&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>​    ==内部样式:==</p><p>​        在<head></head>使用<style>标签,所有样式都写在<style>标签之中</p><p>​        其中style标签中type=”test/css” 属性的作用:告诉浏览器使用CSS样式解析器解析style标签里面的样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;!--内部样式--&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">/*style标签内注释:内部样式*/</span><br><span class="line">h1&#123;</span><br><span class="line">color: red;</span><br><span class="line">font-size:24px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p>​    ==外部样式:==</p><p>​    把样式单独写在一样独立的文件中,文件以.css为后缀.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">span&#123;</span><br><span class="line">color: yellow;</span><br><span class="line">font-size: 18px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    要在html文档中使用link标签引入外部样式表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--引入外部样式表--&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/style.css&quot;/&gt;</span><br><span class="line">其中rel:引入样式表</span><br><span class="line">type:使用CSS解析器解析这段文本</span><br><span class="line">href:引入外部链接,这里面指外部样式表的路径</span><br></pre></td></tr></table></figure><p>三.<strong>选择器</strong></p><p>作用:选中要修饰的标签元素.</p><p><strong>1.基本选择器:</strong></p><p>​    ==ID选择器==: 给标签设置ID属性,通过ID属性寻找到该标签来加以修饰</p><p>​    语法结构:#id值{声明1;声明2….}</p><p>​    注意:ID属性在该Html文档中值要唯一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">#myh2&#123;</span><br><span class="line">color: red;</span><br><span class="line">font-size: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2 id=&quot;myh2&quot;&gt;中华人民共和国5&lt;/h2&gt;</span><br></pre></td></tr></table></figure><p>​    ==类选择器:==class选择器,给标签设置class属性,把这些标签看成一类标签来加以修饰</p><p>​    语法结构:   .class值{声明1;声明2….}</p><p>​    注意:class属性在html文档中可以出现多次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.mycla&#123;</span><br><span class="line">        color: red;</span><br><span class="line">    font-size: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h1 class=&quot;mycla&quot;&gt;中华人民共和国&lt;/h1&gt;</span><br><span class="line">&lt;h1 class=&quot;mycla&quot;&gt;中华人民共和国2&lt;/h1&gt;</span><br><span class="line">&lt;h2 class=&quot;mycla&quot;&gt;中华人民共和国5&lt;/h2&gt;</span><br></pre></td></tr></table></figure><p>​    ==标签选择器:==通过标签名来选中一组标签</p><p>​    语法结构: 标签名{声明1;声明2….}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">h1 &#123;</span><br><span class="line">        color: red;</span><br><span class="line">    font-size: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h1&gt;中华人民共和国&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;中华人民共和国2&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p><strong>2.属性选择器:</strong></p><p>​    语法结构:  标签名[属性=’属性值’]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">选中myp属性的标签</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">/*属性选择器</span><br><span class="line">语法规则:标签名[属性=&apos;属性值&apos;]</span><br><span class="line"> * */</span><br><span class="line"></span><br><span class="line">p[name=&apos;myp&apos;]&#123;</span><br><span class="line"></span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;p name=&quot;myp&quot;&gt;p&lt;/p&gt;</span><br><span class="line">&lt;p name=&quot;yourp&quot;&gt;p2&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>​    语法结构二:标签名[属性] 可以选中一组标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">* 属性选择器二:</span><br><span class="line">* 只通过标签名 属性名选中标签</span><br><span class="line">* 语法结构:标签名[属性名]</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">p[name]&#123;</span><br><span class="line">color:red</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;p name=&quot;myp&quot;&gt;p&lt;/p&gt;</span><br><span class="line">&lt;p name=&quot;yourp&quot;&gt;p2&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>​    语法结构三:标签名省略 只通过[属性]来选中一组标签,也可以[属性=’属性值’]来选中一组标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">* 属性选择器三:</span><br><span class="line">* 只通过属性名选中标签</span><br><span class="line">* 语法结构:[属性名]</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">[name]&#123;</span><br><span class="line">color:red</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;p name=&quot;myp&quot;&gt;p&lt;/p&gt;</span><br><span class="line">&lt;p name=&quot;yourp&quot;&gt;p2&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><strong>3.层级选择器</strong></p><p>​    语法结构:选择器1  选择器2  …..{声明1;声明2….}</p><p>​    注意:选择1和选择器2之间需要有空格,表示先选中选择器1的标签,然后通过选对器2选中其后代标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">/*</span><br><span class="line"> * 层级选择器</span><br><span class="line"> * 选中id=div1标签中的li,而id=div2标签中的li不会被选中</span><br><span class="line"> */</span><br><span class="line">#div1 li&#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;li 11&lt;/li&gt;</span><br><span class="line">&lt;li&gt;li 12&lt;/li&gt;</span><br><span class="line">&lt;li&gt;li 13&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;div2&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;li 21&lt;/li&gt;</span><br><span class="line">&lt;li&gt;li 22&lt;/li&gt;</span><br><span class="line">&lt;li&gt;li 23&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>4.并集选择器</strong></p><p>​    语法结构:选择器1 , 选择器2  …..{声明1;声明2….}</p><p>​    注意:选择器1和选择器2…中间要用逗号隔开,表示即选中选择器1的标签,也选中选择器2的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">/*</span><br><span class="line"> * 并集选择器</span><br><span class="line"> * id为div1和div2的标签同时会被选中</span><br><span class="line"> */</span><br><span class="line">#div1,#div2&#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;li 11&lt;/li&gt;</span><br><span class="line">&lt;li&gt;li 12&lt;/li&gt;</span><br><span class="line">&lt;li&gt;li 13&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;div2&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;li 21&lt;/li&gt;</span><br><span class="line">&lt;li&gt;li 22&lt;/li&gt;</span><br><span class="line">&lt;li&gt;li 23&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>5.伪选择器</strong></p><p>​        ==a标签的几个同生状态标签==</p><p>​        a:link</p><p>​            原始状态a标签</p><p>​        a:hover</p><p>​            鼠标放在a标签之上,这时的状态</p><p>​        a:active</p><p>​            击活链接以后,这时的状态</p><p>​        a:visited</p><p>​            a标签被访问后的,这时的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">/*</span><br><span class="line"> * a链结没被访问时的状态</span><br><span class="line"> */</span><br><span class="line">a:link&#123;color: yellow;&#125;</span><br><span class="line">/*</span><br><span class="line"> * 鼠标悬停时的状态</span><br><span class="line"> */</span><br><span class="line">a:hover&#123;color:blue;&#125;</span><br><span class="line">/*</span><br><span class="line"> * 鼠标点击击活时的状态</span><br><span class="line"> */</span><br><span class="line">a:active&#123;color:red;&#125;</span><br><span class="line">/*</span><br><span class="line"> * 访问过已后的状态</span><br><span class="line"> */</span><br><span class="line">a:visited&#123;color:gray&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;##&quot;&gt;点击我&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>四.CSS中的各种修饰属性</strong></p><p>​    1.文字属性(font):    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">/*</span><br><span class="line"> * font-family字体种类:宋体,黑体等</span><br><span class="line"> * font-size:表示字体大小,一般以px像素设置</span><br><span class="line"> * inherit从父级标签继承属性</span><br><span class="line"> * light:细字体</span><br><span class="line"> * normal:正常字体</span><br><span class="line"> * bold:加粗字体</span><br><span class="line"> * font-style:字体样式,如斜体</span><br><span class="line"> * normal:正常字体</span><br><span class="line"> * italic:斜体</span><br><span class="line"> * oblique:斜体,从呈现形式上与italic没有区别</span><br><span class="line"> * </span><br><span class="line"> * font-stretch:字体间的间距(css2.1以后废弃)</span><br><span class="line"> * condensed:间距紧密</span><br><span class="line"> * expanded:间距松散</span><br><span class="line"> * normal:间距正常</span><br><span class="line"> * narrower:间距较窄</span><br><span class="line"> * semi- 半</span><br><span class="line"> * </span><br><span class="line"> * font-variant:设置字体大小写</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">p&#123;</span><br><span class="line">font-family:&quot;微软雅黑&quot;;</span><br><span class="line">font-size: 24px;</span><br><span class="line">font-weight: bolder;</span><br><span class="line">font-style:oblique;</span><br><span class="line">font-stretch:expanded;</span><br><span class="line">font-variant: all-small-caps;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;p&gt;我是Paragraphy&lt;/p&gt;</span><br><span class="line">&lt;p&gt;我是Paragraphy2&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>​        font的简写方式:</p><p>​        ==注意:属性值的声明顺序==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *可以省略键,只 写值的方式来声明样式</span><br><span class="line"> * 可以按顺序设置如下属性：</span><br><span class="line">font-style</span><br><span class="line">font-variant</span><br><span class="line">font-weight</span><br><span class="line">font-size/line-height</span><br><span class="line">font-family</span><br><span class="line"> */</span><br><span class="line">p&#123;</span><br><span class="line">font:italic bolder 24px &quot;微软雅黑&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>​    <strong>2.文本属性(text):</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * text-align:文本的水平对齐方式</span><br><span class="line"> * left 居左(默认)</span><br><span class="line"> * center 居中</span><br><span class="line"> * right 居右</span><br><span class="line"> * text-indent: 文本缩进,一般以em字符作为后缀</span><br><span class="line"> * 也可以使用%表示缩进,如10%</span><br><span class="line"> * </span><br><span class="line"> * text-decoration:文本修饰</span><br><span class="line"> * line-through中划线</span><br><span class="line"> * overline 上划线</span><br><span class="line"> * underline 下划线</span><br><span class="line"> * </span><br><span class="line"> * letter-spacing:字符水平间距</span><br><span class="line"> *   一般以像素作为单位</span><br><span class="line"> * </span><br><span class="line"> * word-spacing:单词与单词之间的间距</span><br><span class="line"> * 一般以像素作为单位</span><br><span class="line"> * line-height:文本的行高,属性设置行间的距离</span><br><span class="line"> * line-height 与 font-size 的计算值之差（在 CSS 中成为“行间距”）分为两半，</span><br><span class="line"> *         分别加到一个文本行内容的顶部和底部。可以包含这些内容的最小框就是行框。</span><br><span class="line"> * 可以调整文本在标签中的上下垂直的位置</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">p&#123;</span><br><span class="line">background: gray;</span><br><span class="line">height: 100px;</span><br><span class="line">text-align: left;</span><br><span class="line">text-indent: 10%;</span><br><span class="line">text-decoration:overline;</span><br><span class="line">letter-spacing: 20px;</span><br><span class="line">word-spacing: 40px;</span><br><span class="line">line-height: 160px;</span><br><span class="line">font-size: 40px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;p&gt;我是 Paragraphy&lt;/p&gt;</span><br><span class="line">&lt;p&gt;我是 Paragraphy2&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>​    <strong>3.背景属性</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * background-color:设置背景颜色,通常单独使用</span><br><span class="line"> * </span><br><span class="line"> * background-image:设置背景图片,通常和background-repeat,</span><br><span class="line"> * background-position,background-attachment一起使用</span><br><span class="line"> * </span><br><span class="line"> * background-image:url(图片链接)</span><br><span class="line"> * </span><br><span class="line"> * background-repeat:背景图片是否重复</span><br><span class="line"> *   repeat-x,沿X轴重复</span><br><span class="line"> *   repeat-y,没Y轴重复</span><br><span class="line"> *   repeat,没x轴和Y轴都重复</span><br><span class="line"> *   no-repeat,表示不重复</span><br><span class="line"> * </span><br><span class="line"> * background-position:背景图片的位置</span><br><span class="line"> *   left:居左</span><br><span class="line"> *   center:居中</span><br><span class="line"> *   right:居右</span><br><span class="line"> *   top:居上</span><br><span class="line"> *   bottom:居下</span><br><span class="line"> * </span><br><span class="line"> * background-attachment:背景图片是否固定</span><br><span class="line"> * fixed:表示固定,不随滚动条滚动</span><br><span class="line"> * scroll:表示随滚动条滚动</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">#p1&#123;</span><br><span class="line">background-color: gray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#p2&#123;</span><br><span class="line">height: 100px;</span><br><span class="line">background-image:url(img/1.PNG);</span><br><span class="line">background-repeat:no-repeat;</span><br><span class="line">background-position:to;</span><br><span class="line">background-attachment:fixed;</span><br><span class="line">border:1px solid red;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;p id=&quot;p1&quot;&gt;P&lt;/p&gt;</span><br><span class="line">&lt;p id=&quot;p2&quot;&gt;P2&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>​    <strong>4.列表属性</strong>(list)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">/*</span><br><span class="line"> * list-style:设置list列表的外观,可以使用简写方式</span><br><span class="line"> * </span><br><span class="line"> * list-style-image:设置图标</span><br><span class="line"> * </span><br><span class="line"> * list-style-position:可以设置图标显示的位置</span><br><span class="line"> * </span><br><span class="line"> * list-style-type:表的外观</span><br><span class="line"> */</span><br><span class="line">#ul1&#123;</span><br><span class="line">border: 1px solid red;</span><br><span class="line">list-style-type: none;</span><br><span class="line">list-style-image:url(img/2.PNG);</span><br><span class="line">list-style-position: inside;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#ul2&#123;</span><br><span class="line">border: 1px solid red;</span><br><span class="line">list-style:url(img/2.PNG) inside;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ol&#123;</span><br><span class="line">list-style-type:upper-alpha;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;ul id=&quot;ul1&quot;&gt;</span><br><span class="line">&lt;li&gt;li 1&lt;/li&gt;</span><br><span class="line">&lt;li&gt;li 2&lt;/li&gt;</span><br><span class="line">&lt;li&gt;li 3&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul id=&apos;ul2&apos;&gt;</span><br><span class="line">&lt;li&gt;li 4&lt;/li&gt;</span><br><span class="line">&lt;li&gt;li 5&lt;/li&gt;</span><br><span class="line">&lt;li&gt;li 6&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;ol&gt;</span><br><span class="line">&lt;li&gt;li 7&lt;/li&gt;</span><br><span class="line">&lt;li&gt;li 8&lt;/li&gt;</span><br><span class="line">&lt;li&gt;li 9&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure><p>​    </p><p>​    <strong>5.尺寸属性</strong></p><p>​        width:标签的宽度</p><p>​        height:标签的高度</p><p>​    注意:只对块状标签(block)有效,宽度和浏览器宽度相同,高度默认为0,如p标签,ul标签,h1-h6标签,这种标签一般    具有换行效果</p><p>​    对内联(行内inline)标签无效,如label标签,br标签,input标签,这种标签一般没有换行效果.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">/*width和height有效*/</span><br><span class="line">p&#123;</span><br><span class="line">background-color: red;</span><br><span class="line">width: 300px;</span><br><span class="line">height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">/*width和height无效*/</span><br><span class="line">label&#123;</span><br><span class="line">background-color: green;</span><br><span class="line">width: 300px;</span><br><span class="line">height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">&lt;p&gt;P&lt;/p&gt;</span><br><span class="line">&lt;p&gt;P2&lt;/p&gt;</span><br><span class="line">&lt;label&gt;label1&lt;/label&gt;</span><br><span class="line">&lt;label&gt;label2&lt;/label&gt;</span><br></pre></td></tr></table></figure><p>​    <strong>6.显示属性</strong>(display)</p><p>​    作用:是否显示标签的,可以决定标签的性质,可以修改标签的块状标签还是内联标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * display:标签是否显示,及标签性质</span><br><span class="line"> * none,标签不显示</span><br><span class="line"> * block,标签显示成块状标签</span><br><span class="line"> * inline 标签显示成内联标签</span><br><span class="line"> * inline-block,显示成内联标签,但可以像块状标签一样设置高和宽</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">p&#123;</span><br><span class="line">display:inline-block;</span><br><span class="line">border:1px solid red;</span><br><span class="line">width:100px;</span><br><span class="line">height: 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;p&gt;p1&lt;/p&gt;</span><br><span class="line">&lt;p&gt;p2&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;label&gt;label1&lt;/label&gt;</span><br><span class="line">&lt;label&gt;label2&lt;/label&gt;</span><br></pre></td></tr></table></figure><p>​    <strong>7.轮廓属性(outline)</strong></p><p>outline （轮廓）是绘制于标签元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。outline 属性可设置元素周围的轮廓线。</p><p>==注意：请始终在 outline-color 属性之前声明 outline-style 属性。元素只有获得轮廓以后才能改变其轮廓的颜色==。</p><p>注意：轮廓线不会占据空间，也不一定是矩形。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">/*</span><br><span class="line"> * outline-style:设置轮廓的形状solid,dotted....</span><br><span class="line"> * </span><br><span class="line"> * outline-color:设置轮廓的颜色</span><br><span class="line"> * </span><br><span class="line"> * outline-width:设置轮廓的宽度</span><br><span class="line"> * </span><br><span class="line"> * 只起到突出标签的功能,没有其他意义,不占据文档的空间</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">p&#123;</span><br><span class="line">width:100px;</span><br><span class="line">height: 100px;</span><br><span class="line">border:3px solid red;</span><br><span class="line">outline:3px dotted green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;p&gt;p&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>​    <strong>8.边框属性(border)</strong>    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * border-color:边框的颜色</span><br><span class="line"> * border-style :边框的线条类型</span><br><span class="line"> * double,双实线</span><br><span class="line"> * solid,单实线</span><br><span class="line"> * dotted,省略号线</span><br><span class="line"> * dashed,破折号线</span><br><span class="line"> * </span><br><span class="line"> * border-width:边框的宽度</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">p,label&#123;</span><br><span class="line"></span><br><span class="line">border-color: red;</span><br><span class="line">border-style:double;</span><br><span class="line">border-width: 10px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;p&gt;p&lt;/p&gt;</span><br><span class="line">&lt;label&gt;label&lt;/label&gt;</span><br></pre></td></tr></table></figure><p>​    9<strong>.浮动属性(float)</strong></p><p>​    浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。</p><p>​    由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。</p><p>请看下图，当把框 1 向右浮动时，它脱离文档流并且向右移动，直到它的右边缘碰到包含框的右边缘：</p><p>​    <img src="2.png" alt="2.png"></p><p>​    再请看下图，当框 1 向左浮动时，它脱离文档流并且向左移动，直到它的左边缘碰到包含框的左边缘。因为    它不再处于文档流中，所以它不占据空间，实际上覆盖住了框 2，使框 2 从视图中消失(注意:框2中的内容不能被覆盖.需要使用定位,设置z-index属性)。</p><p>​    如果把所有三个框都向左移动，那么框 1 向左浮动直到碰到包含框，另外两个框向左浮动直到碰到前一个浮动框。</p><p>​    <img src="3.png" alt="3.png"></p><p>如下图所示，如果包含框太窄，无法容纳水平排列的三个浮动元素，那么其它浮动块向下移动，直到有足够的空间。如果浮动元素的高度不同，那么当它们向下移动时可能被其它浮动元素“卡住”：</p><p>​    <img src="D:\JAVAEE教案\JAVA笔记\第2天 CSS样式表\笔记\4.PNG" alt="4.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">/*</span><br><span class="line"> * float表示块状标签向哪个方向浮动</span><br><span class="line"> * none,表示不浮动</span><br><span class="line"> * left,居左浮动</span><br><span class="line"> * right,居右浮动</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#p1,#p2,#p3&#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#p1&#123;</span><br><span class="line">background: blue;</span><br><span class="line">&#125;</span><br><span class="line">#p2&#123;</span><br><span class="line">background: red;</span><br><span class="line">&#125;</span><br><span class="line">#p3&#123;</span><br><span class="line">background: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;p1&quot;&gt;div1&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;p2&quot;&gt;div2&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;p3&quot;&gt;div3&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>​    10<strong>.清除浮动clear</strong></p><p>​        作用:清除标签两边的浮动标签元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">/*</span><br><span class="line"> *clear:表示清除该标签左右两边的浮动标签 </span><br><span class="line"> * none:不清除</span><br><span class="line"> * both:左右两边全部清除</span><br><span class="line"> * left:清除左边的浮动</span><br><span class="line"> * right:清除右边的浮动</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">.fl&#123;</span><br><span class="line">float: left;</span><br><span class="line">border: 1px solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#div4&#123;</span><br><span class="line">border: 1px solid green;</span><br><span class="line">clear:both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;fl&quot;&gt;div1&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;fl&quot;&gt;div2&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;fl&quot;&gt;div3&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;div4&quot;&gt;div4&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>​    使用overflow属性来清除浮动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.fl&#123;</span><br><span class="line">float: left;</span><br><span class="line">border: 1px solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#div1&#123;</span><br><span class="line">border: 1px solid green;</span><br><span class="line">overflow:hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * overflow:表示标签中溢出的内容该如何显示</span><br><span class="line"> * hidden把溢出的内容隐藏掉</span><br><span class="line"> * scroll把溢出的内容隐藏掉,但加上滚动条</span><br><span class="line"> * none 不隐藏</span><br><span class="line"> * 用此属性可以做到清除浮动</span><br><span class="line"> *如父标签中有浮动标签,当使用overflow,不会把浮动的内容隐藏掉,会自动为父标签增加高度</span><br><span class="line"> *为了把浮动的元素内容包含进来.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;</span><br><span class="line">&lt;div class=&quot;fl&quot;&gt;div1&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;fl&quot;&gt;div2&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;fl&quot;&gt;div3&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;div4&quot;&gt;div4&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>五.<strong>盒子模型(div)</strong></p><p><img src="D:\JAVAEE教案\JAVA笔记\第2天 CSS样式表\笔记\5.PNG" alt="5.png"></p><p> ==盒子一般作为容器使用,里面可以盛放其它的标签元素或内容==</p><p>通常盒子是由:内容+内边距(padding)+边框(border)+外边距(margin)组成,</p><p>Div是一个经典的盒子,没有任何样式修饰,一般的盒子都是块状元素</p><p>span标签是一个inline标签,其上也没有任何样式修饰.</p><p>通常网页使用div+span+css进行排版布局</p><p>Div盒子可以设置width和height:</p><p>对于非IE浏览器,width和height只是内容的宽和高(标准的盒子),通常内容距和外边距默认宽度0</p><p>而IE浏览器,width和height等于边框(border)+内边距(padding)+内容</p><p>==其中重要的属性:==</p><p>border:</p><p>​    border-color:</p><p>​    border-width:</p><p>​    border-style:</p><p>margin:</p><p>​    margin-top</p><p>​    margin-right</p><p>​    margin-bottom</p><p>​    margin-left</p><p>padding:</p><p>​    padding-top</p><p>​    padding-right</p><p>​    padding-bottom</p><p>​    padding-left</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">/*</span><br><span class="line"> * padding表示内边距</span><br><span class="line"> * padding-left</span><br><span class="line"> * padding-right</span><br><span class="line"> * padding-top</span><br><span class="line"> * padding-bottom</span><br><span class="line"> * </span><br><span class="line"> * </span><br><span class="line"> * margin表示外边距</span><br><span class="line"> * margin-left</span><br><span class="line"> * margin-right</span><br><span class="line"> * margin-top</span><br><span class="line"> * margin-bottom</span><br><span class="line"> * </span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">body&#123;</span><br><span class="line">padding-left:10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 注意:简写方式的顺序为----&gt;上右下左</span><br><span class="line"> */</span><br><span class="line">#d2&#123;</span><br><span class="line">width:200px;</span><br><span class="line">height: 200px;</span><br><span class="line">border: 1px solid green;</span><br><span class="line"></span><br><span class="line">/*padding 50px;相当于 padding: 50px 50px 50px 50px;*/</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * padding:50px 60px; 相当于 padding:50px 60px 50px 60px;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">padding:50px 60px 70px;</span><br><span class="line">/*</span><br><span class="line"> * padding:50px 60px 70px;; 相当于 padding:50px 60px 70px 60px;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;d2&quot;&gt;</span><br><span class="line">div2</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>**六.盒子定位(position)及Z-index属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * position表示定位</span><br><span class="line"> * fixed:固定定位,标签不会随着滚动条而滚动</span><br><span class="line"> * static:无定位(默认值)</span><br><span class="line"> * relative:相对定位,元素没有脱离文档流,相对于原先自己位置进行的定位</span><br><span class="line"> * absolute:绝对定位,元素脱离文档流,原来位置可以被其他标签占据,</span><br><span class="line"> *  不管是行内还是块状元素,绝对定位后,被定位的标签都会变成块状标签</span><br><span class="line"> * </span><br><span class="line"> * 通常定位要和几个重要属性(其中之一)联用</span><br><span class="line"> * top,</span><br><span class="line"> * left</span><br><span class="line"> * right,</span><br><span class="line"> * bottom</span><br><span class="line"> * </span><br><span class="line"> * </span><br><span class="line"> * </span><br><span class="line">   </span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">div&#123;</span><br><span class="line">width:100px;</span><br><span class="line">height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">#d1&#123;</span><br><span class="line">background: blue;</span><br><span class="line">position:fixed;</span><br><span class="line">left: 200px;</span><br><span class="line">&#125;</span><br><span class="line">#d2&#123;</span><br><span class="line">background: green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;d1&quot;&gt;div1&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;d2&quot;&gt;div2&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>​    z-index表示z轴属性,用来设置标签元素是否远离屏幕.通常值越大,越靠近阅读者,越小越远离阅读者,可以设置小于0的整数.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * </span><br><span class="line"> * Z-index必须出现在定位的元素的一方</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">div&#123;</span><br><span class="line">width:100px;</span><br><span class="line">height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">#d1&#123;</span><br><span class="line">background: blue;</span><br><span class="line">position:absolute;</span><br><span class="line">left: 20px;</span><br><span class="line">z-index: -2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">#d2&#123;</span><br><span class="line">background: green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;d1&quot;&gt;div1&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;d2&quot;&gt;div2&lt;/div&gt;</span><br></pre></td></tr></table></figure></style></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSS样式表&quot;&gt;&lt;a href=&quot;#CSS样式表&quot; class=&quot;headerlink&quot; title=&quot;CSS样式表&quot;&gt;&lt;/a&gt;CSS样式表&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;今日内容&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight pla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/javaScript%E5%89%8D%E7%AB%AF%E8%84%9A%E6%9C%AC%E6%8A%80%E6%9C%AF%E4%BA%8C/"/>
    <id>http://kongxianghe.top/2018/10/23/javaScript前端脚本技术二/</id>
    <published>2018-10-23T14:06:03.500Z</published>
    <updated>2018-07-09T06:15:55.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javaScript前端脚本技术二"><a href="#javaScript前端脚本技术二" class="headerlink" title="javaScript前端脚本技术二"></a>javaScript前端脚本技术二</h1><p>一.<strong>今日内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1、Js的DOM</span><br><span class="line">概念</span><br><span class="line">作用</span><br><span class="line">查找HMTL标签</span><br><span class="line">增加标签</span><br><span class="line">删除标签</span><br><span class="line">改变双标签内容</span><br><span class="line">查找标签属性</span><br><span class="line">增加标签属性</span><br><span class="line">改变标签属性</span><br><span class="line">删除标签属性</span><br><span class="line">操作样式属性 </span><br><span class="line">2、Js的BOM</span><br><span class="line">概念</span><br><span class="line">window对像及尺寸</span><br><span class="line">window对像属性</span><br><span class="line">window对像方法</span><br><span class="line">3、Js的Cookie</span><br><span class="line">概念</span><br><span class="line">向浏览器存放cookie</span><br><span class="line">从浏览器读取cookie</span><br><span class="line">4、作业</span><br></pre></td></tr></table></figure><p><strong>一.JS的DOM操作</strong></p><ol><li><p>概念DOM(document object model）</p><p>把html文档抽像成对像，该对像称为document,其代表内存中的整个html文件</p><p>如图：</p><p><img src="D:\JAVAEE教案\JAVAEE笔记\第4天 javaScript脚本\笔记\捕获.PNG" alt="1.png"></p></li><li><p>作用 </p><p>操作document文档中的标签，属性，样式进行增删改查，对事件进行响应，做出动态的网页效果</p></li><li><p>==查找HMTL标签==</p><p>按标签的ID去查找标签对像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//返回单个标签对像</span><br><span class="line">document.getElementById(&quot;标签的ID&quot;);</span><br></pre></td></tr></table></figure><p>按标签的名字去查找标签对像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//返回一组标签对像</span><br><span class="line">document.getElementsByTagName(&quot;标签名&quot;);</span><br></pre></td></tr></table></figure><p>按标签的class属性的值去查找标签对像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//得到一组class修饰的标签</span><br><span class="line">document.getElementsByClassName(&quot;class类名&quot;)</span><br></pre></td></tr></table></figure><p>按标签的name属性的值去查找标签对像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//得到一组name修饰的标签对像，一般用于表单标签对像</span><br><span class="line">document.getElementsByName(&quot;表单的name值&quot;)</span><br></pre></td></tr></table></figure></li><li><p>增加标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&quot;ul1&quot;&gt;</span><br><span class="line">&lt;li&gt;lia&lt;/li&gt;</span><br><span class="line">&lt;li&gt;lib&lt;/li&gt;</span><br><span class="line">&lt;li&gt;lic&lt;/li&gt;</span><br><span class="line">&lt;li&gt;lid&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;button&quot;  id=&quot;btn&quot; value=&quot;创建并增加li&quot;  onclick=&quot;dobiz()&quot;/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">//增加li</span><br><span class="line">//JS如果想动态增加标签，必须使用其父类标签</span><br><span class="line">function dobiz()&#123;</span><br><span class="line"></span><br><span class="line">//获取父类标签</span><br><span class="line">var ul = document.getElementById(&quot;ul1&quot;);</span><br><span class="line"></span><br><span class="line">//创建新的li标签</span><br><span class="line">var newLi = document.createElement(&quot;li&quot;);</span><br><span class="line"></span><br><span class="line">//给li标签添加文本内容</span><br><span class="line">newLi.innerHTML = &quot;lie&quot;;</span><br><span class="line"></span><br><span class="line">//使用父标签追加子标签</span><br><span class="line">//appendChild()追加到子类标签的末尾</span><br><span class="line">ul.appendChild(newLi);</span><br><span class="line">//insertBefore(&quot;新增加标签&quot;,&quot;依据标签：新标签增加到这个标签前面&quot;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>删除标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul id=&quot;ul1&quot;&gt;</span><br><span class="line">&lt;li&gt;lia&lt;/li&gt;</span><br><span class="line">&lt;li&gt;lib&lt;/li&gt;</span><br><span class="line">&lt;li&gt;lic&lt;/li&gt;</span><br><span class="line">&lt;li&gt;lid&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;button&quot;  id=&quot;btn&quot; value=&quot;删除li&quot;  onclick=&quot;dobiz()&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">//删除li</span><br><span class="line">function dobiz()&#123;</span><br><span class="line"></span><br><span class="line">//1.获取父标签</span><br><span class="line">var ul = document.getElementById(&quot;ul1&quot;);</span><br><span class="line"></span><br><span class="line">//2.子标签对像</span><br><span class="line">//获取第一个子节点，文本节点，属性节点，或标签节点</span><br><span class="line">var txt = ul.firstChild;</span><br><span class="line">//获取标签子节点</span><br><span class="line">var li =  ul.firstElementChild;</span><br><span class="line"></span><br><span class="line">//alert(txt+&quot;,&quot;+li)</span><br><span class="line">//3.删除标签</span><br><span class="line">ul.removeChild(li);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>改变双标签内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">innerHTML属性</span><br><span class="line">标签.innerHTML，表示取值</span><br><span class="line">标签.innerHTML =&quot;值&quot;，表示付值</span><br><span class="line"></span><br><span class="line">innnerText属性</span><br><span class="line">标签.innerText,表示取</span><br><span class="line">标签.innerText=&quot;值&quot;，表示付值</span><br><span class="line"></span><br><span class="line">区别：innerHTML可以把标签类型的字符串解析成标签对像</span><br><span class="line"> innerText只会把标签类型的字符串解析成普通的字符串</span><br></pre></td></tr></table></figure><p>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p id=&quot;p&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;给双标签付值&quot; onclick=&quot;dobiz()&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">function dobiz()&#123;</span><br><span class="line"></span><br><span class="line">var p = document.getElementById(&quot;p&quot;);</span><br><span class="line">p.innerText = &quot;&lt;h1&gt;hello js&lt;/h1&gt;&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">//显示的结果为</span><br><span class="line">&lt;h1&gt;hello js&lt;/h1&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p id=&quot;p&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;给双标签付值&quot; onclick=&quot;dobiz()&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">function dobiz()&#123;</span><br><span class="line"></span><br><span class="line">var p = document.getElementById(&quot;p&quot;);</span><br><span class="line">p.innerHTML = &quot;&lt;h1&gt;hello js&lt;/h1&gt;&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">//显示的结果为</span><br><span class="line">粗体的 hello js</span><br></pre></td></tr></table></figure></li><li><p>查找标签属性</p><p>标签属性是标签的一部份，所以一般先获取标签对像，再来操作属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;请输入用户名&quot; id=&quot;un&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;获取属性值&quot; onclick=&quot;dobiz()&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">function dobiz()&#123;</span><br><span class="line"></span><br><span class="line">//1.获取标签对像</span><br><span class="line">var input_un = document.getElementById(&quot;un&quot;);</span><br><span class="line"></span><br><span class="line">//2.获取属性，一般根属性名获取属性值</span><br><span class="line">var typ = input_un.type;</span><br><span class="line"></span><br><span class="line">var un = input_un.name;</span><br><span class="line"></span><br><span class="line">var val = input_un.value;</span><br><span class="line"></span><br><span class="line">alert(typ+&quot;,&quot;+un+&quot;,&quot;+val)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>获取样式属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;div1&quot; style=&quot;background: red;width:100px;height: 100px;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">function dobiz()&#123;</span><br><span class="line">//获取样式值（只能获取行内声明的样式，内部样式及外部样式取不到）</span><br><span class="line">var div = document.getElementById(&quot;div1&quot;);</span><br><span class="line">var sty = div.style;</span><br><span class="line">alert(sty.background+&quot;,&quot;+sty.width)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>增加标签的属性（一般对class属性进行增加）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line"></span><br><span class="line">.mystyle&#123;</span><br><span class="line"></span><br><span class="line">background: green;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;div&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;增加class属性&quot; onclick=&quot;dobiz()&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">function dobiz()&#123;</span><br><span class="line"></span><br><span class="line">var div = document.getElementById(&quot;div1&quot;);</span><br><span class="line"></span><br><span class="line">//增加样式属性（一般用于增加外部样式，内部样式，非行内样式）</span><br><span class="line">div.className = &quot;mystyle&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>增加行内样式属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;div&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;增加class属性&quot; onclick=&quot;dobiz()&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">function dobiz()&#123;</span><br><span class="line"></span><br><span class="line">var div = document.getElementById(&quot;div1&quot;);</span><br><span class="line"></span><br><span class="line">//行内样式方式一（推荐）：</span><br><span class="line">//div.style = &quot;background: green;width: 100px;height: 100px;&quot;;</span><br><span class="line"></span><br><span class="line">//行内样式方式二：可以给行内样式单独付值</span><br><span class="line">//可以追加样式</span><br><span class="line">div.style.background=&quot;red&quot;;</span><br><span class="line">div.style.width=&quot;100px&quot;;</span><br><span class="line">div.style.height=&quot;100px&quot;;</span><br><span class="line"></span><br><span class="line">//行内样式方式三：把行内样式看成纯粹的属性setAttribute(参数名，参数值)</span><br><span class="line">//会覆盖原来的样式</span><br><span class="line">//div.setAttribute(&quot;style&quot;,&quot;background: green;width: 100px;height: 100px;&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>改变标签属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;input1&quot; value=&quot;123456&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;button&quot;  value=&quot;改变标签属性&quot; onclick=&quot;dobiz()&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">//利用付值操作达到改变属性的特效</span><br><span class="line">function dobiz()&#123;</span><br><span class="line"></span><br><span class="line">var input1 = document.getElementById(&quot;input1&quot;);</span><br><span class="line"></span><br><span class="line">//input1.type = &quot;password&quot;;</span><br><span class="line"></span><br><span class="line">input1.setAttribute(&quot;type&quot;,&quot;password&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>删除标签属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">.div&#123;</span><br><span class="line">font-size: 30px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;div1&quot; style=&quot;background: red; width:100px;height: 100px;&quot; class=&quot;div&quot;&gt;</span><br><span class="line">div</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;button&quot;  value=&quot;删除样式属性&quot;  onclick=&quot;dobiz()&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function dobiz()&#123;</span><br><span class="line"></span><br><span class="line">var div1 = document.getElementById(&quot;div1&quot;);</span><br><span class="line">//删除样式属性</span><br><span class="line">div1.removeAttribute(&quot;style&quot;);</span><br><span class="line">//删除class属性</span><br><span class="line">div1.removeAttribute(&quot;class&quot;);</span><br><span class="line">//覆盖class属性，达到删除的目的</span><br><span class="line">//div1.setAttribute(&quot;class&quot;,&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>样式操作</p><p>除了上述通过增删改查属性的方式，来达到增删改查样式的目的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//对非IE内核（或IE内核8版本以上）浏览器有效，查以查询非行内样表</span><br><span class="line">window.getcomputeStyle(标签对像)</span><br><span class="line">//对IE内核的浏览器（IE8）有效，可以查询非行内样式表</span><br><span class="line">标签对像.currentStyle</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.mydiv&#123;</span><br><span class="line">height: 100px;</span><br><span class="line">width:100px;</span><br><span class="line">background: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;div1&quot; class=&quot;mydiv&quot;&gt;</span><br><span class="line">div</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;button&quot;  value=&quot;获取非行内样式&quot; onclick=&quot;dobiz()&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">function dobiz()&#123;</span><br><span class="line">var div1 = document.getElementById(&quot;div1&quot;);</span><br><span class="line">//非IE内核浏览器或IE8(不包含8)版本以上浏览器支持，使用引种方式获取非行内样式</span><br><span class="line">//window对像调用该方法</span><br><span class="line">var sty = window.getComputedStyle(div1,null);</span><br><span class="line">alert(sty.background)</span><br><span class="line"></span><br><span class="line">//以下方式很少使用</span><br><span class="line">//var sty = div1.currentStyle</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>二.JS的BOM模型</strong></p><p><strong>1.BOM的概念</strong>(brower object model)</p><p>​    JS把浏览器窗体抽像成对像，该对像就是window</p><p><strong>2.window对像及尺寸</strong></p><p>有三种方法能够确定浏览器窗口的尺寸。</p><p>==对于Internet Explorer、Chrome、Firefox、Opera 以及 Safari(这里面使用window)：==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.innerHeight - 浏览器窗口的内部高度(包括滚动条)</span><br><span class="line">window.innerWidth - 浏览器窗口的内部宽度(包括滚动条)</span><br></pre></td></tr></table></figure><p>对于 Internet Explorer 8、7、6、5：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">document.documentElement.clientHeight</span><br><span class="line">document.documentElement.clientWidth</span><br><span class="line">或者(使用document的body体)</span><br><span class="line">document.body.clientHeight</span><br><span class="line">document.body.clientWidth</span><br></pre></td></tr></table></figure><p>实用的 JavaScript 方案（涵盖所有浏览器，解析浏览器差异性）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var w=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth;</span><br><span class="line">var h=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight;</span><br></pre></td></tr></table></figure><p><strong>3.window对像属性</strong></p><p>​    <strong>screen屏幕属性如下(了解)：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">availWidth 属性：可用宽度，返回访问者屏幕的宽度（以像素计)，减去界面特性，比如窗口任务栏。</span><br><span class="line">availHeight属性：可用高度，返回访问者屏幕的高度（以像素计)，减去界面特性，比如窗口任务栏。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;获取screen尺寸&quot; onclick=&quot;dobiz()&quot; /&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function dobiz()&#123;</span><br><span class="line">var screen_h = window.screen.availHeight;</span><br><span class="line">var screen_w = window.screen.availWidth;</span><br><span class="line">//???</span><br><span class="line">var screen_t = window.screen.availTop;</span><br><span class="line">//???</span><br><span class="line">var screen_l = window.screen.availLeft;</span><br><span class="line"></span><br><span class="line">alert(screen_h+&quot;,&quot;+screen_w+&quot;,&quot;+screen_t+&quot;,&quot;+screen_l);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>​    <strong>navigator属性如下（了解）：</strong></p><p>window.navigator 对象包含有关访问者浏览器的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">appCodeName：浏览器代号</span><br><span class="line">appName:浏览器名称</span><br><span class="line">appVersion:浏览器版本</span><br><span class="line">cookieEnabled:启用Cookies</span><br><span class="line">platform:硬件平台</span><br><span class="line">userAgent:用户代理</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function dobiz()&#123;</span><br><span class="line"></span><br><span class="line">var codeName = window.navigator.appCodeName;</span><br><span class="line">var name = window.navigator.appName;</span><br><span class="line">var version= window.navigator.appVersion;</span><br><span class="line">var cookieEnable = window.navigator.cookieEnabled;</span><br><span class="line">var plat = window.navigator.platform;</span><br><span class="line">var agent = window.navigator.userAgent;</span><br><span class="line"></span><br><span class="line">var str = codeName+&quot;&lt;br&gt;&quot;+name+&quot;&lt;br&gt;&quot;+version+&quot;&lt;br&gt;&quot;+cookieEnable+&quot;&lt;br&gt;&quot;+plat+&quot;&lt;br&gt;&quot;+agent;</span><br><span class="line"></span><br><span class="line">document.getElementById(&quot;div1&quot;).innerHTML = str;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>​    </p><p>​    <strong>document属性如下（重点）：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document是window对像的属性</span><br><span class="line">window.document可以得到document对像，一般window可省略</span><br></pre></td></tr></table></figure><p>​    <strong>location属性如下（重点）：</strong></p><p>​    该对像对应窗口的地址栏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location.hostname 返回 web 主机的域名（一般是IP）</span><br><span class="line">location.port 返回 web 主机的端口 （80 或 443）</span><br><span class="line">location.host 返回web主机的IP和port</span><br><span class="line">location.pathname 返回当前页面的路径和文件名</span><br><span class="line">location.protocol 返回所使用的 web 协议（http:// 或 https://）</span><br><span class="line">location.href跳转到相应的url（重点）</span><br></pre></td></tr></table></figure><p>​    <strong>history属性如下（重点）：</strong></p><p>该对像对应窗口的历史栏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">history.go(1);前进</span><br><span class="line">history.go(-1);后退</span><br><span class="line">history.forward();前时</span><br><span class="line">history.back();后退</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=&quot;bom_back.html&quot;&gt;点击我&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;doforward();&quot;&gt;下一页&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function doforward()&#123;</span><br><span class="line">history.go(1);//进入下一页</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;doback();&quot;&gt;上一页&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">function doback()&#123;</span><br><span class="line"></span><br><span class="line">history.go(-1);//返回上一页</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>4.window对像方法</strong></p><p><strong>计时器函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">window.setInterval(&quot;做的事情即函数&quot;，&quot;毫秒数&quot;);//每隔多长时间，重复执行该函数</span><br><span class="line">window.setTimeout(&quot;做的事情即函数&quot;，&quot;毫秒数&quot;);//经过多长时间后，去执行函数</span><br><span class="line">window.clearInterval(&quot;定时器对像&quot;)；</span><br><span class="line">window.clearTimeout(&quot;定时器对像&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1 id=&quot;h1&quot;&gt;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;5秒后开始计时&quot; onclick=&quot;dobiz()&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;停止计时&quot; onclick=&quot;dobiz4()&quot;&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">//文档加载完毕以后，隔5秒，去执行一次函数</span><br><span class="line">function dobiz()&#123;</span><br><span class="line">window.setTimeout(&quot;dobiz2()&quot;,5000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//重复执行，每隔1秒</span><br><span class="line">var myInterval;</span><br><span class="line">function dobiz2()&#123;</span><br><span class="line"></span><br><span class="line">myInterval = window.setInterval(&quot;dobiz3()&quot;,1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function dobiz3()&#123;</span><br><span class="line">document.getElementById(&quot;h1&quot;).innerHTML = new Date();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//清空计时器</span><br><span class="line">function dobiz4()&#123;</span><br><span class="line"></span><br><span class="line">window.clearInterval(myInterval)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>三.JS的cookie操作</strong></p><p>1.Cookie概念：</p><p>​    Cookie 是一些数据, 存储于你电脑上的文本文件中。当 web 服务器向浏览器发送 web 页面时，在连接关闭后，服务端不会记录用户的信息。 </p><p>==Cookie是一对键值对，通常由浏览器访问服务器，服务器会把Cookie写入到本地客户端浏览器==</p><p>Cookie 的作用就是用于解决 “如何记录客户端的用户信息”:</p><ul><li>当用户访问 web 页面时，他的名字可以记录在 cookie 中。</li><li>在用户下一次访问该页面时，可以在 cookie 中读取用户访问记录。</li></ul><p>Cookie 以名/值对形式存储，如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">username=John Doe</span><br><span class="line"></span><br><span class="line">//后台java可使用setCookie()方法</span><br><span class="line">//前端请使用window.navigator.cookie = &quot;key=value&quot;方式来把cookie写入本地浏览器</span><br><span class="line">//前端请使用window.navigator.cookie 方式来把本地浏览器cookie读出</span><br></pre></td></tr></table></figure><p>当浏览器从服务器上请求 web 页面时， 属于该页面的 cookie 会被添加到该请求中。服务端通过这种方式来获取用户的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 id=&quot;h1&quot;&gt;&lt;/h1&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;写入cookie&quot; onclick=&quot;doWriter()&quot;&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;读取cookie&quot; onclick=&quot;doRead()&quot;&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">//写入cookie</span><br><span class="line">function doWriter()&#123;</span><br><span class="line">window.document.cookie=&quot;password=jack&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function doRead()&#123;</span><br><span class="line">var mess = window.document.cookie;</span><br><span class="line"></span><br><span class="line">//cookie读取应该使用遍历读取</span><br><span class="line">//document.getElementById(&quot;h1&quot;).innerHTML = mess;</span><br><span class="line"></span><br><span class="line">var cookies = mess.split(&quot;;&quot;);</span><br><span class="line">var cook1 = cookies[0];</span><br><span class="line">var username = cook1.split(&quot;=&quot;)[1];</span><br><span class="line"></span><br><span class="line">document.getElementById(&quot;h1&quot;).innerHTML=username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//课后自己遍历cookie</span><br></pre></td></tr></table></figure><p><strong>四.课堂练习</strong></p><p>幻灯片制作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onload=&quot;doStart()&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;img/1.jpg&quot; width=&quot;150px&quot; height=&quot;200px&quot; id=&quot;img&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;button&quot;  value=&quot;change&quot; onclick=&quot;doChange()&quot; /&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">//1.图片静态加载到页面上</span><br><span class="line">//2.动态改变src中的值即可</span><br><span class="line">function doStart()&#123;</span><br><span class="line">window.setInterval(&quot;doChange()&quot;,1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var i=1;</span><br><span class="line">function doChange()&#123;</span><br><span class="line"></span><br><span class="line">var img = document.getElementById(&quot;img&quot;);</span><br><span class="line">img.src=&quot;img/&quot;+i+&quot;.jpg&quot;;</span><br><span class="line">i++;</span><br><span class="line">if(i==6)&#123;</span><br><span class="line">i=1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>五.作业</strong></p><p>​    跑马灯</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;javaScript前端脚本技术二&quot;&gt;&lt;a href=&quot;#javaScript前端脚本技术二&quot; class=&quot;headerlink&quot; title=&quot;javaScript前端脚本技术二&quot;&gt;&lt;/a&gt;javaScript前端脚本技术二&lt;/h1&gt;&lt;p&gt;一.&lt;strong&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
    <id>http://kongxianghe.top/2018/10/23/mysql数据库基础/</id>
    <published>2018-10-23T14:06:03.486Z</published>
    <updated>2018-07-09T06:15:57.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql数据库基础"><a href="#mysql数据库基础" class="headerlink" title="mysql数据库基础"></a>mysql数据库基础</h1><p><strong>今日内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">1.数据库简介</span><br><span class="line">2.数据库的安装</span><br><span class="line">3.数据库登录</span><br><span class="line">4.Sqlyog的安装</span><br><span class="line">5.Sql语言简介</span><br><span class="line">6.Sql语言之DDL</span><br><span class="line">  创建数据库</span><br><span class="line">  查询所有数据库</span><br><span class="line">  切换数据库</span><br><span class="line">  查询已创建数据库语法信息</span><br><span class="line">  修改已创建数据库字符集</span><br><span class="line">  删除数据库</span><br><span class="line">  mysql常用数据类型</span><br><span class="line">  mysql常用数据约束 </span><br><span class="line">  创建表语法</span><br><span class="line">  查询数据库中表</span><br><span class="line">  查询表结构语法</span><br><span class="line">  重命名表名语法(rename...to)</span><br><span class="line">  修改表结构语法(alter...add|modify|drop)</span><br><span class="line">  删除表语法</span><br><span class="line">7.sql语言之DML</span><br><span class="line">  DML之insert语句</span><br><span class="line">  DML之update语句</span><br><span class="line">  DML之delete语句</span><br><span class="line">  课堂练习</span><br><span class="line">8.sql语言之DQL语句</span><br><span class="line">  DQL查询语句基本语法结构</span><br><span class="line">  简单查询</span><br><span class="line">  条件查询</span><br><span class="line">  模糊查询</span><br><span class="line">  去重复查询</span><br><span class="line">  添加别名查询</span><br><span class="line">  排序查询</span><br><span class="line">  聚合函数</span><br><span class="line">  分组查询</span><br><span class="line">  having子句</span><br><span class="line">  分页查询</span><br><span class="line">9.作业</span><br></pre></td></tr></table></figure><p><strong>一.    数据库简介</strong></p><ol><li><p>数据库概念：</p><pre><code>数据库（DataBase）：简称DB,指长期保存在计算机的存储设备上，按照一定规则组织起来，可以被各种用户或应用共享的数据集合。其本质就是数据的仓库。</code></pre></li><li><p>数据库管理系统概念（软件）:</p><pre><code>数据库管理系统（DataBase Management System）：简称DBMS,指一种操作和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问数据库中的数据。</code></pre></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据库软件应该为数据库管理系统，数据库是通过数据库管理系统创建和操作的。</span><br><span class="line">数据库：存储、维护和管理数据的集合。</span><br></pre></td></tr></table></figure><ol start="3"><li><p>常见数据库管理系统</p><ul><li>Oracle：Oracle数据库被认为是业界目前比较成功的关系型数据库管理系统。Oracle数据库可以运行在UNIX、Windows等主流操作系统平台，完全支持所有的工业标准，并获得最高级别的ISO标准安全性认证（大中型企业）。</li></ul><ul><li>MySQL：MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle旗下产品。MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件(中小型企业)。</li><li>DB2：DB2是IBM公司的产品，DB2数据库系统采用多进程多线索体系结构，其功能足以满足大中公司的需要，并可灵活地服务于中小型电子商务解决方案。</li><li>Microsoft SQL Server：SQL Server 是Microsoft 公司推出的关系型数据库管理系统。具有使用方便可伸缩性好与相关软件集成程度高等优点。</li></ul></li></ol><p><strong>二.数据库的安装</strong></p><p>步骤如下：</p><p>1.最好以管理员模式打开mysql软件，界面如下：</p><p>同意协议，点击next进入下一页</p><p><img src="D:\JAVAEE教案\JAVAEE笔记\第5天 mysql数据库基础应用\笔记\1.PNG" alt="1.png"></p><p>2.选择Server only进行安装，点击下一步，界面如下:</p><p><img src="D:\JAVAEE教案\JAVAEE笔记\第5天 mysql数据库基础应用\笔记\2.PNG" alt="2.png"></p><p>3.点击execute执行安装，等待安装，安装成功后点击下一步。</p><p><img src="D:\JAVAEE教案\JAVAEE笔记\第5天 mysql数据库基础应用\笔记\3.PNG" alt="3.png"></p><p>4.进入数据库参数配置页面，点击next，进入页面如下：</p><p>选择config type:development machine进行安装即可</p><p><img src="D:\JAVAEE教案\JAVAEE笔记\第5天 mysql数据库基础应用\笔记\4.PNG" alt="4.png"></p><p>5.请设置root用户的密码，密码不能小于4位，数字或字符都可以</p><p><img src="D:\JAVAEE教案\JAVAEE笔记\第5天 mysql数据库基础应用\笔记\5.PNG" alt="5.png"></p><p>6.注册windows系统服务,然后点击下一步</p><p><img src="D:\JAVAEE教案\JAVAEE笔记\第5天 mysql数据库基础应用\笔记\6.PNG" alt="6.png"></p><p>7.执行execute，让之前的配置config生效,点击下一步，即可安装成功</p><p><img src="D:\JAVAEE教案\JAVAEE笔记\第5天 mysql数据库基础应用\笔记\7.PNG" alt="7.png"></p><p><strong>三.数据库登录</strong></p><p>进行登录，测试数据库是否安装成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">控制台：mysql -h 服务器所在机器IP -u root -p回车</span><br><span class="line">提示请输入密码：*****回车，即可登录成功</span><br><span class="line">如：登录本机</span><br><span class="line">mysql -h localhost -u root -p回车</span><br></pre></td></tr></table></figure><p>控制台的打开方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在默认的路径C:\Program Files\MySQL\MySQL Server 5.6\bin，按注shift键+鼠标右键</span><br></pre></td></tr></table></figure><p><strong>四.Sqlyog的安装</strong>（客户端）</p><p>略：</p><p><strong>五.Sql语言简介</strong></p><p>概念：结构化查询语言（structure query language）</p><p>作用：和数据库进行交流的语言</p><p>==DDL：数据库对像定义语言（database definition language）,创建和改变数据库对像，数据库，表，索引，视图等。==</p><p>==DML:数据库数据操作语言（database manufactural language）,对存放在表中的用户数据进行增删改操作。==</p><p>==DQL:数据库数据查询语言（database query language），对存放在表中的用户数据时行查询的操作（重中之重）。==</p><p>DCL:数据库对像控制语言（database control language）,对数据库对像进行控制语言，如权限。</p><p><strong>六.Sql语言之DDL</strong></p><ol><li><p>创建数据库</p><p>用root用户登录数据后，可以创建自己的据库，如数据库名叫JAVAEE。</p><p>语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;sql</span><br><span class="line">create database 数据库名</span><br><span class="line">如：</span><br><span class="line">create database javaee;</span><br><span class="line">创建数据库同时设置编码集utf8</span><br><span class="line">create database javaee character set uft8;</span><br></pre></td></tr></table></figure></li><li><p>查询所有数据库</p><p>查看数据库语法：使用root用户登录数据库后，默认进行的mysql数据库。</p><p>查看 数据库软件中所有的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;sql</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure><p>mysql安装后有几个默认的数据库:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">information_schema</span><br><span class="line">mysql</span><br><span class="line">performance_schema</span><br><span class="line">test</span><br></pre></td></tr></table></figure></li><li><p>切换数据库</p><p>使用use关键字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;使用mysql据库</span><br><span class="line">use javaee;使用javaee数据库</span><br></pre></td></tr></table></figure></li><li><p>退出数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit;</span><br></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database 数据库名</span><br></pre></td></tr></table></figure></li><li><p>查询已创建数据库语法信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create database 数据库名;</span><br></pre></td></tr></table></figure></li><li><p>修改已创建数据库字符集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter database 数据库名 character set 字符编码集</span><br><span class="line">如，设置为gbk</span><br><span class="line">alter database javaee character set gbk;</span><br></pre></td></tr></table></figure></li><li><p>mysql常用数据类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">boolean布尔值</span><br><span class="line">int（整形长度） 整形</span><br><span class="line">bigint 大整形</span><br><span class="line">binary|bit字节类型  </span><br><span class="line">float 单精度浮点型</span><br><span class="line">double（数值总位数，必须出现的小数位数） 双精度浮点型</span><br><span class="line">char 固定字符串，长度固定的字符使用该类型，身份证18位</span><br><span class="line">varchar 可变长度字符串，长度不固定的字符请使用该类型</span><br><span class="line">date 日期类型，只能表示年月日</span><br><span class="line">time 时间类型，只能表示时分秒</span><br><span class="line">datetime 日期时间类型，表示yyyy-MM-dd hh:mm:ss</span><br><span class="line">timestap:日期时间戳，数据库自动生成时间戳</span><br><span class="line">decimal（数值总位数，必须出现的小数位数）:数值类型的统一类型，即可表示整数，也可表示小数</span><br></pre></td></tr></table></figure></li><li><p>mysql常用数据约束 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">主键约束 primary key,表中列值唯一且非空约束，其本质是索引，可以加快速度</span><br><span class="line">唯一性约束 unique,表中列值唯一，可以出现null</span><br><span class="line">非空约束：not null,表中列值不能为null</span><br><span class="line">默认值约束：default,如default &apos;张三&apos;，默认值为张三</span><br><span class="line">外键约束： foreign key,多张表之间的关联关系</span><br></pre></td></tr></table></figure></li><li><p>创建表语法</p><p>表的作用：就是表格，用来存放数据。表格的行（一条记录），表的列（字段名，或列名）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法结构：</span><br><span class="line">create table 表名（</span><br><span class="line">列名 类型 约束类型 comment注释，</span><br><span class="line">列名 类型 约束类型 comment注释</span><br><span class="line">...</span><br><span class="line">）;</span><br><span class="line">注意：最后一条声明没有逗号</span><br></pre></td></tr></table></figure><p>如：创建用户表User（注意：表名不要使用mysql的关键字，一般定义表名以XXX_XXX）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE USER (</span><br><span class="line">id  INT(8) PRIMARY KEY COMMENT &apos;ID值&apos;,</span><br><span class="line">username VARCHAR(50) NOT NULL UNIQUE COMMENT&apos;用户名&apos;,</span><br><span class="line">PASSWORD VARCHAR(20) NOT NULL COMMENT&apos;密码&apos;,</span><br><span class="line">birthday DATETIME COMMENT&apos;生日&apos;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>查询数据库中表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES;</span><br></pre></td></tr></table></figure></li><li><p>查询表结构语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DESC 表名；</span><br><span class="line">如：</span><br><span class="line">desc user;</span><br></pre></td></tr></table></figure></li><li><p>重命名表名语法(rename…to)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rename table 原表名 to 新表名</span><br><span class="line">如：</span><br><span class="line">rename table user to users;</span><br></pre></td></tr></table></figure></li><li><p>修改表结构语法(alter…change|add|modify|drop)</p><p>alter….change用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改表结构：如修改字段名，字段类型[约束]</span><br><span class="line">ALTER TABLE USER CHANGE 旧列名 新列名 VARCHAR(30) NOT NULL UNIQUE;</span><br><span class="line">如：ALTER TABLE USER  CHANGE NAME usename VARCHAR(30) NOT NULL UNIQUE;</span><br></pre></td></tr></table></figure><p>alter….add用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">增加表结构：如增加字段，字段类型，约束</span><br><span class="line">alter table 表名 add 名称[约束]</span><br><span class="line">如：ALTER TABLE USER ADD sex INT(1) COMMENT &apos;性别&apos;;</span><br></pre></td></tr></table></figure><p>alter….modify用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改表中的字段类型，长度，约束等</span><br><span class="line">alter table 表名 modify 修改成的约束</span><br><span class="line">如：ALTER TABLE employee MODIFY password varchar(30);</span><br></pre></td></tr></table></figure><p>alter…drop</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">删除表结构：如删除字段</span><br><span class="line">alter table 表名 drop column 名称</span><br><span class="line">如：alter table user drop column sex;</span><br></pre></td></tr></table></figure></li><li><p>删除表结构语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">drop table 表名</span><br><span class="line">如删除user表</span><br><span class="line">drop table user;</span><br></pre></td></tr></table></figure><p>删除表结构同时，又创建一张相同的一张新表。达到效果是清空表中数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE TABLE USER;</span><br></pre></td></tr></table></figure><p>​</p></li></ol><p><strong>七.Sql语言之DML</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">create table worker(</span><br><span class="line">id int primary key,</span><br><span class="line">name varchar(100) not null,</span><br><span class="line">gender varchar(10) not null,</span><br><span class="line">birthday date,</span><br><span class="line">salary float(10,2),</span><br><span class="line">entry_date date,</span><br><span class="line">resume text</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#需求</span><br><span class="line">1.插入三条语句</span><br><span class="line">2.将所有员工薪水修改为5000元。</span><br><span class="line">3.将姓名为’zs’的员工薪水修改为3000元。</span><br><span class="line">4.将姓名为’james’的员工薪水修改为4000元,性别改为男。</span><br><span class="line">5.将&apos;hellen&apos;的薪水在原有基础上增加1000元。</span><br><span class="line">6.删除表中名称为’zs’的记录。</span><br><span class="line">7.删除表中所有记录。</span><br></pre></td></tr></table></figure><p>1.insert语句（增加）</p><p>语法结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名 (列名1，列名2，列名3....) values(值1，值2，值3...);</span><br><span class="line">如：</span><br><span class="line">insert into worker(id,name,gender,birthday,salary,entry_date,resume)</span><br><span class="line">values(2,&apos;jack&apos;,&apos;男&apos;，&apos;1993-06-06&apos;,5000.8,&apos;2013-07-07&apos;,&apos;我是XXX&apos;);</span><br></pre></td></tr></table></figure><p>注意：SQL语句中字符类型及日期类型都要使用单引号引起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果是全字段插值，列表可以省略</span><br><span class="line">insert into 表名 values(值1，值2，值3...);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果非全字段插值，列表一定要指定，且要和值一一对应</span><br><span class="line">INSERT INTO worker (id,NAME,gender) VALUES(5,&apos;james&apos;,&apos;男&apos;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行一条插入语句，同时插入多条值</span><br><span class="line">INSERT INTO worker (id,NAME,gender) VALUES(6,&apos;kevin&apos;,&apos;男&apos;),(7,&apos;mac&apos;,&apos;男&apos;);</span><br></pre></td></tr></table></figure><p>2.update语句（改）</p><p>语法结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">update 表名 set 列名1 = 值1，列名2=值2，.... where 条件限定 </span><br><span class="line"></span><br><span class="line">更新表中的全部数据</span><br><span class="line">#姓别全改成女</span><br><span class="line">update worker set gender = &apos;女&apos;;</span><br><span class="line"></span><br><span class="line">#把id=1的该条记录gender改为男</span><br><span class="line">UPDATE worker SET gender =&apos;男&apos; WHERE id = 1;</span><br><span class="line"></span><br><span class="line">#将姓名为’james’的员工薪水修改为4000元,性别改为男。</span><br><span class="line">update worker set salary =4000.0,gender=&apos;男&apos; where name = &apos;james&apos;</span><br><span class="line"></span><br><span class="line">#将&apos;hellen&apos;的薪水在原有基础上增加1000元。</span><br><span class="line">update worker set salary=salary+1000 where name=&apos;hellen&apos;;</span><br></pre></td></tr></table></figure><p>3.delete语句（删）</p><p>语法结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">delete from 表名 where 条件</span><br><span class="line"></span><br><span class="line">#删除ID为7的员工</span><br><span class="line">delete from worker where id = 7;</span><br><span class="line"></span><br><span class="line">#删除表中所有记录。</span><br><span class="line">delete from worker;</span><br></pre></td></tr></table></figure><p><strong>八.Sql语言之DQL</strong></p><p><strong>学生表STU</strong>（用于DQL查询）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE stu (</span><br><span class="line">sidCHAR(6),</span><br><span class="line">snameVARCHAR(50),</span><br><span class="line">ageINT,</span><br><span class="line">genderVARCHAR(50)</span><br><span class="line">);</span><br><span class="line">#添加数据</span><br><span class="line">INSERT INTO stu VALUES(&apos;S_1001&apos;, &apos;liuYi&apos;, 35, &apos;male&apos;);</span><br><span class="line">INSERT INTO stu VALUES(&apos;S_1002&apos;, &apos;chenEr&apos;, 15, &apos;female&apos;);</span><br><span class="line">INSERT INTO stu VALUES(&apos;S_1003&apos;, &apos;zhangSan&apos;, 95, &apos;male&apos;);</span><br><span class="line">INSERT INTO stu VALUES(&apos;S_1004&apos;, &apos;liSi&apos;, 65, &apos;female&apos;);</span><br><span class="line">INSERT INTO stu VALUES(&apos;S_1005&apos;, &apos;wangWu&apos;, 55, &apos;male&apos;);</span><br><span class="line">INSERT INTO stu VALUES(&apos;S_1006&apos;, &apos;zhaoLiu&apos;, 75, &apos;female&apos;);</span><br><span class="line">INSERT INTO stu VALUES(&apos;S_1007&apos;, &apos;sunQi&apos;, 25, &apos;male&apos;);</span><br><span class="line">INSERT INTO stu VALUES(&apos;S_1008&apos;, &apos;zhouBa&apos;, 45, &apos;female&apos;);</span><br><span class="line">INSERT INTO stu VALUES(&apos;S_1009&apos;, &apos;wuJiu&apos;, 85, &apos;male&apos;);</span><br><span class="line">INSERT INTO stu VALUES(&apos;S_1010&apos;, &apos;zhengShi&apos;, 5, &apos;female&apos;);</span><br><span class="line">INSERT INTO stu VALUES(&apos;S_1011&apos;, &apos;xxx&apos;, NULL, NULL);</span><br><span class="line"></span><br><span class="line">#需求</span><br><span class="line"></span><br><span class="line">#条件查询</span><br><span class="line">1.查询性别为女，并且年龄50的记录</span><br><span class="line">2.查询学号为S_1001，或者姓名为liSi的记录</span><br><span class="line">3.查询学号为S_1001，S_1002，S_1003的记录</span><br><span class="line">4.查询学号不是S_1001，S_1002，S_1003的记录</span><br><span class="line">5.查询年龄为null的记录</span><br><span class="line">6.查询年龄在20到40之间的学生记录</span><br><span class="line">7.查询性别非男的学生记录</span><br><span class="line">8.查询姓名不为null的学生记录</span><br><span class="line">#模糊查询</span><br><span class="line">9.查询姓名由5个字母构成的学生记录</span><br><span class="line">10.查询姓名由5个字母构成，并且第5个字母为“i”的学生记录</span><br><span class="line">11.查询姓名以“z”开头的学生记录</span><br><span class="line">12.查询姓名中第2个字母为“i”的学生记录</span><br><span class="line">13.查询姓名中包含“a”字母的学生记录</span><br><span class="line">#排序</span><br><span class="line">14.查询所有学生记录，按年龄升序排序</span><br><span class="line">15.查询所有学生记录，按年龄降序排序</span><br></pre></td></tr></table></figure><p><strong>EMP员工表和DEPT部门表</strong>(用作DQL查询)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.语法结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select [distinct]字段1，字段2....from 表名</span><br><span class="line">[where 条件]</span><br><span class="line">[group by 分组条件]</span><br><span class="line">[having 子句]</span><br><span class="line">[order by 排序条件]</span><br><span class="line">[limit 分页条件]</span><br></pre></td></tr></table></figure><p>2.where条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">and </span><br><span class="line">or </span><br><span class="line">between...and </span><br><span class="line">in</span><br><span class="line">not in</span><br><span class="line">IS NOT NULL</span><br><span class="line">is null</span><br><span class="line">like</span><br><span class="line"></span><br><span class="line">&gt;=</span><br><span class="line">&lt;=</span><br><span class="line">=</span><br><span class="line">!=或&lt;&gt;</span><br></pre></td></tr></table></figure><p>如下查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#条件查询</span><br><span class="line">1.查所学生记录</span><br><span class="line">select sid,sname,age,gender from stu;</span><br><span class="line">#查询需求的字段</span><br><span class="line">SELECT sid,sname FROM stu;</span><br><span class="line">#查寻时不要使用*</span><br><span class="line">SELECT * FROM stu;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2.查询性别为女，并且年龄65的记录</span><br><span class="line">SELECT * FROM stu WHERE gender =&apos;female&apos; AND age=65;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#3.查询学号为S_1001，或者姓名为liSi的记录</span><br><span class="line">SELECT * FROM stu WHERE sid=&apos;S_1001&apos; OR sname=&apos;liSi&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#4.查询学号为S_1001，S_1002，S_1003的记录</span><br><span class="line">SELECT * FROM stu WHERE sid = &apos;S_1001&apos; OR sid=&apos;S_1002&apos; OR sid = &apos;S_1003&apos;;</span><br><span class="line">SELECT * FROM stu WHERE sid IN (&apos;S_1001&apos;,&apos;S_1002&apos;,&apos;S_1003&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#5.查询学号不是S_1001，S_1002，S_1003的记录</span><br><span class="line">SELECT * FROM stu WHERE sid NOT IN (&apos;S_1001&apos;,&apos;S_1002&apos;,&apos;S_1003&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#6.查询年龄为null的记录</span><br><span class="line">SELECT * FROM stu WHERE age IS NULL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#7.查询年龄在20到40之间的学生记录</span><br><span class="line">SELECT * FROM stu WHERE age BETWEEN 20 AND 40;</span><br><span class="line">SELECT * FROM stu WHERE age&gt;=20 AND age&lt;=40;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#8.查询性别非男的学生记录</span><br><span class="line">SELECT * FROM stu WHERE gender !=&apos;male&apos;;</span><br><span class="line">SELECT * FROM stu WHERE gender &lt;&gt;&apos;male&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#9.查询姓名不为null的学生记录</span><br><span class="line">SELECT * FROM stu WHERE sname IS NOT NULL;</span><br></pre></td></tr></table></figure><p>3.like模糊查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下划线_:表示精确匹配一位</span><br><span class="line">百分号%：表示匹配所有位</span><br></pre></td></tr></table></figure><p>如下查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#模糊查询</span><br><span class="line">#10.查询姓名由5个字母构成的学生记录</span><br><span class="line">SELECT * FROM stu WHERE sname LIKE &apos;_____&apos;;</span><br><span class="line"></span><br><span class="line">#11.查询姓名由5个字母构成，并且第5个字母为“i”的学生记录</span><br><span class="line">SELECT * FROM stu WHERE sname LIKE &apos;____i&apos;;</span><br><span class="line"></span><br><span class="line">#12.查询姓名以“z”开头的学生记录</span><br><span class="line">select * from stu where sname like &apos;z%&apos;</span><br><span class="line"></span><br><span class="line">#13.查询姓名中第2个字母为“i”的学生记录</span><br><span class="line">select * from stu where sname like &apos;_i%&apos;</span><br><span class="line"></span><br><span class="line">#14.查询姓名中包含“a”字母的学生记录</span><br><span class="line">select * from stu where sname like &apos;%a%&apos;</span><br></pre></td></tr></table></figure><p>4.order 排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">order by 字段 ASC|DESC</span><br><span class="line">ASC:升序排序</span><br><span class="line">DESC:降序排序</span><br></pre></td></tr></table></figure><p>如下查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#排序</span><br><span class="line">15.查询所有学生记录，按年龄升序排序</span><br><span class="line">select * from stu order by age asc;</span><br><span class="line"></span><br><span class="line">#16.查询所有学生记录，按年龄降序排序</span><br><span class="line">select * from stu order by age desc;</span><br><span class="line"></span><br><span class="line">#17.查询性别为felmale，对结果进行降序排序</span><br><span class="line">SELECT * FROM stu WHERE gender =&apos;female&apos; ORDER BY age DESC;</span><br><span class="line"></span><br><span class="line">#18.先按学生年纪升序排序，再按姓名降序排序</span><br><span class="line">SELECT * FROM stu ORDER BY age ASC , sname DESC;</span><br></pre></td></tr></table></figure><p>5.distinct 去重复查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select distinct 字段... from 表 [where 条件]</span><br><span class="line">什么是重复的记录？？</span><br><span class="line">查询出的多条记录，他们列值都相同，称为重复性记录</span><br><span class="line"></span><br><span class="line">#19.对学生性别进行去重复查询</span><br><span class="line">SELECT DISTINCT gender FROM stu;</span><br></pre></td></tr></table></figure><p>6.添加别名查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">给字段超别名，以达到区分字段的作用</span><br><span class="line">#20.给学生表四个字段起别名</span><br><span class="line">select sid 学号，sname 姓名，gender 性别，age 年龄 from stu;</span><br><span class="line">单引号引起别名也可以</span><br><span class="line">SELECT sid &apos;学号&apos;,sname &apos;姓名&apos;,gender &apos;性别&apos;,age &apos;年龄&apos; FROM stu;</span><br><span class="line"></span><br><span class="line">给表起别名，以达到区分表名的作用</span><br><span class="line">#21给stu表别名为s</span><br><span class="line">SELECT * FROM stu AS s;</span><br><span class="line">SELECT sid,sname FROM stu AS s;</span><br><span class="line">SELECT s.sid,s.sname FROM stu AS s;</span><br><span class="line">#as还可以省略不写</span><br><span class="line">SELECT s.sid,s.sname FROM stu s;</span><br></pre></td></tr></table></figure><p>7.聚合函数</p><p>作用：对各字段进行统计，一般和分组条件一起使用，where条件中不能出现聚合函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">max()</span><br><span class="line">min()</span><br><span class="line">sum()</span><br><span class="line">avg()</span><br><span class="line">count()</span><br></pre></td></tr></table></figure><p>如下查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#22.查询最大年龄和最小年龄</span><br><span class="line"></span><br><span class="line">select max(age),min(age) from stu;</span><br><span class="line"></span><br><span class="line">#23 查询学生的总人数</span><br><span class="line">select count(*) from stu;</span><br><span class="line"></span><br><span class="line">#24.查询年龄的平均值,年龄的和</span><br><span class="line">SELECT AVG(age)，sum(age) FROM stu;</span><br></pre></td></tr></table></figure><p>8.group by分组查询</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group by 字段名</span><br></pre></td></tr></table></figure><p>如下查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">25.统计男生和女生各多少人？</span><br><span class="line">select gender,count(*) from stu group by gender; </span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">select后面字段，一定是聚合函数和分组字段，其他字段无意义</span><br></pre></td></tr></table></figure><p>9.having 子句</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">having 过滤条件</span><br></pre></td></tr></table></figure><p>如下查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">26.按性别进行分组，然后对性别为空的组进行过滤</span><br><span class="line">SELECT gender,COUNT(*) FROM stu GROUP BY gender HAVING gender IS NOT NULL;</span><br><span class="line">注意：</span><br><span class="line">having子句中的条件一定是聚合函数或分组条件</span><br><span class="line"></span><br><span class="line">27.先按性别进行分组，统计各性别人数&gt;5人的性别</span><br><span class="line">SELECT gender,COUNT(*) FROM stu GROUP  BY gender HAVING COUNT(*)&gt;=5;</span><br></pre></td></tr></table></figure><p>10.limit分页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">limit 开始下标，最大记录数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#分页limit查询</span><br><span class="line">#28.如：从第二条记录开始查询出5条记录</span><br><span class="line">select * from stu limit 1,5;</span><br><span class="line"></span><br><span class="line">#29.查询前5条记录</span><br><span class="line">SELECT * FROM stu  ORDER BY sid ASC LIMIT 0,5;</span><br><span class="line">SELECT * FROM stu ORDER BY sid ASC LIMIT 5;</span><br></pre></td></tr></table></figure><p><strong>九.作业</strong></p><ol><li><p>请创建成绩表并添加测试数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">NO   NAME  SUBJECT SCORE</span><br><span class="line">编号姓名科目分数</span><br><span class="line">1张三数学90</span><br><span class="line">2张三语文50</span><br><span class="line">3张三地理40</span><br><span class="line">4李四语文55</span><br><span class="line">5李四政治45</span><br><span class="line">6王五政治30</span><br><span class="line">7李四数学80</span><br><span class="line">8王五语文70</span><br><span class="line"></span><br><span class="line">#查询需求如下：</span><br><span class="line">1.查询两门及两门以上不及格的学生姓名</span><br><span class="line">2.查询学生平均分</span><br><span class="line">3.查询姓名是张三的学生成绩和</span><br><span class="line">4.将学生信息按照 分数倒序</span><br><span class="line">5.获取学生信息中 分数最低的学生姓名和分数最高的学生姓名</span><br><span class="line">6.查询两门及两门以上不及格同学的平均分。</span><br></pre></td></tr></table></figure></li><li><p>对EMP表进行查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">#创建雇员表</span><br><span class="line">CREATE TABLE emp(</span><br><span class="line">empnoINT,</span><br><span class="line">enameVARCHAR(50),</span><br><span class="line">jobVARCHAR(50),</span><br><span class="line">mgrINT,</span><br><span class="line">hiredateDATE,</span><br><span class="line">salDECIMAL(7,2),</span><br><span class="line">commdecimal(7,2),</span><br><span class="line">deptnoINT</span><br><span class="line">) ;</span><br><span class="line">#添加数据</span><br><span class="line">INSERT INTO emp values(7369,&apos;SMITH&apos;,&apos;CLERK&apos;,7902,&apos;1980-12-17&apos;,800,NULL,20);</span><br><span class="line">INSERT INTO emp values(7499,&apos;ALLEN&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-02-20&apos;,1600,300,30);</span><br><span class="line">INSERT INTO emp values(7521,&apos;WARD&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-02-22&apos;,1250,500,30);</span><br><span class="line">INSERT INTO emp values(7566,&apos;JONES&apos;,&apos;MANAGER&apos;,7839,&apos;1981-04-02&apos;,2975,NULL,20);</span><br><span class="line">INSERT INTO emp values(7654,&apos;MARTIN&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-09-28&apos;,1250,1400,30);</span><br><span class="line">INSERT INTO emp values(7698,&apos;BLAKE&apos;,&apos;MANAGER&apos;,7839,&apos;1981-05-01&apos;,2850,NULL,30);</span><br><span class="line">INSERT INTO emp values(7782,&apos;CLARK&apos;,&apos;MANAGER&apos;,7839,&apos;1981-06-09&apos;,2450,NULL,10);</span><br><span class="line">INSERT INTO emp values(7788,&apos;SCOTT&apos;,&apos;ANALYST&apos;,7566,&apos;1987-04-19&apos;,3000,NULL,20);</span><br><span class="line">INSERT INTO emp values(7839,&apos;KING&apos;,&apos;PRESIDENT&apos;,NULL,&apos;1981-11-17&apos;,5000,NULL,10);</span><br><span class="line">INSERT INTO emp values(7844,&apos;TURNER&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-09-08&apos;,1500,0,30);</span><br><span class="line">INSERT INTO emp values(7876,&apos;ADAMS&apos;,&apos;CLERK&apos;,7788,&apos;1987-05-23&apos;,1100,NULL,20);</span><br><span class="line">INSERT INTO emp values(7900,&apos;JAMES&apos;,&apos;CLERK&apos;,7698,&apos;1981-12-03&apos;,950,NULL,30);</span><br><span class="line">INSERT INTO emp values(7902,&apos;FORD&apos;,&apos;ANALYST&apos;,7566,&apos;1981-12-03&apos;,3000,NULL,20);</span><br><span class="line">INSERT INTO emp values(7934,&apos;MILLER&apos;,&apos;CLERK&apos;,7782,&apos;1982-01-23&apos;,1300,NULL,10);</span><br><span class="line"></span><br><span class="line"># 创建部门表</span><br><span class="line"></span><br><span class="line">   CREATE TABLE dept(</span><br><span class="line">   deptnoINT,</span><br><span class="line">   dnamevarchar(14),</span><br><span class="line">   locvarchar(13)</span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line"># 添加数据</span><br><span class="line"></span><br><span class="line">   INSERT INTO dept values(10, &apos;ACCOUNTING&apos;, &apos;NEW YORK&apos;);</span><br><span class="line">   INSERT INTO dept values(20, &apos;RESEARCH&apos;, &apos;DALLAS&apos;);</span><br><span class="line">   INSERT INTO dept values(30, &apos;SALES&apos;, &apos;CHICAGO&apos;);</span><br><span class="line">   INSERT INTO dept values(40, &apos;OPERATIONS&apos;, &apos;BOSTON&apos;);</span><br><span class="line"></span><br><span class="line">## 需求：</span><br><span class="line"></span><br><span class="line"># 计算</span><br><span class="line"></span><br><span class="line">   1.查看雇员的月薪与佣金之和</span><br><span class="line"># 排序</span><br><span class="line">   2.查询所有雇员，按月薪降序排序，如果月薪相同时，按编号升序排序</span><br><span class="line"># 统计查询</span><br><span class="line">   3.查询emp表中记录数</span><br><span class="line">   4.查询emp表中有佣金的人数</span><br><span class="line">   5.查询emp表中月薪大于2500的人数</span><br><span class="line">   6.统计月薪与佣金之和大于2500元的人数</span><br><span class="line">   7. 查询有佣金的人数，以及有领导的人数</span><br><span class="line">   8.查询所有雇员月薪和</span><br><span class="line">   9.查询所有雇员月薪和，以及所有雇员佣金和</span><br><span class="line">   10.查询所有雇员月薪+佣金和（ifNUll(null,0)）</span><br><span class="line">   11.统计所有员工平均工资</span><br><span class="line">   12.查询最高工资和最低工资</span><br><span class="line"></span><br><span class="line"># 分组查询</span><br><span class="line">   13.查询每个部门的部门编号和每个部门的工资和</span><br><span class="line">   14.查询每个部门的部门编号以及每个部门的人数</span><br><span class="line">   15.查询每个部门的部门编号以及每个部门工资大于1500的人数</span><br><span class="line"></span><br><span class="line"># having子句</span><br><span class="line">   16.查询工资总和大于9000的部门编号以及工资和</span><br><span class="line"># limit分页</span><br><span class="line">   17.查询5行记录，起始行从0开始</span><br><span class="line">   18.查询10行记录，起始行从3开始</span><br><span class="line">   19.找出奖金高于工资的雇员 </span><br><span class="line">   20.找出奖金高于工资60%的雇员</span><br><span class="line">   21.找出部门10中所有经理和部门20中所有店员的信息</span><br><span class="line">   22.找出部门10中所有经理(MANAGER)，部门20中所有店员，既不是经理又不是店员但其5.薪资大于或等于2000的所有员工的信息。</span><br><span class="line">   23.查询没有奖金或者奖金低于100的员工信息</span><br><span class="line">   24.查询姓名不带”R”的员工姓名</span><br><span class="line">   25.显示员工的姓名和入职时间，根据入职时间，将最老的员工排放在最前面。</span><br><span class="line">   26.显示所有员工的姓名、工作和工资，按照工作的降序排序，若工作相同则按工资升序排序。</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mysql数据库基础&quot;&gt;&lt;a href=&quot;#mysql数据库基础&quot; class=&quot;headerlink&quot; title=&quot;mysql数据库基础&quot;&gt;&lt;/a&gt;mysql数据库基础&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;今日内容&lt;/strong&gt;&lt;/p&gt;
&lt;figure clas
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%AB%98%E7%BA%A7/"/>
    <id>http://kongxianghe.top/2018/10/23/mysql数据库高级/</id>
    <published>2018-10-23T14:06:03.482Z</published>
    <updated>2018-07-09T06:15:55.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql数据库高查询"><a href="#Mysql数据库高查询" class="headerlink" title="Mysql数据库高查询"></a>Mysql数据库高查询</h1><p><strong>今日内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1、SQL语言数据的完整性</span><br><span class="line">实体完整性</span><br><span class="line">域完整性</span><br><span class="line">引用完整性</span><br><span class="line">2、多表关联查询</span><br><span class="line">概念</span><br><span class="line">表关系分类</span><br><span class="line">联合查询</span><br><span class="line">隐式内连接查询</span><br><span class="line">显示内连接查询</span><br><span class="line">外连接查询</span><br><span class="line">自连接查询</span><br><span class="line">三表以上关联查询</span><br><span class="line">3、子查询</span><br><span class="line">概念</span><br><span class="line">用法</span><br><span class="line">4、视图</span><br><span class="line">概念</span><br><span class="line">用法</span><br><span class="line">5、了解SQL优化</span><br><span class="line">6、作业</span><br></pre></td></tr></table></figure><p><strong>一.SQL语言数据的完整性</strong></p><p>作用：保证用户输入的数据保存到数据库中是正确的。</p><p>注意：确保数据的完整性 最好在创建表时或表中无数据时给表中添加约束</p><p>数据完整性分类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 实体完整性</span><br><span class="line">- 域完整性</span><br><span class="line">- 引用完整性</span><br></pre></td></tr></table></figure><ol><li><p>实体完整性</p><p>实体：即表中的一行(一条记录)代表一个实体（entity）</p><p>作用：标识每一行数据不重复。</p><p>约束类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主键约束（primary key） </span><br><span class="line">唯一约束(unique)  </span><br><span class="line">自动增长列(auto_increment)</span><br></pre></td></tr></table></figure><p><strong>主键约束</strong>：每个表中要有一个主键（数据唯一，且不能为null）。</p><p>方式一：创建表时添加约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int(5) primary key,</span><br><span class="line">name varchar(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table user(</span><br><span class="line">id int(5),</span><br><span class="line">name varchar(20),</span><br><span class="line">primary key(id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>方式二：创建表时添加联合主键约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int(5),</span><br><span class="line">name varchar(20),</span><br><span class="line">primary key(id,name)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>方式三：创建表后，添加约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">createa table user(</span><br><span class="line">id int(5),</span><br><span class="line">name varchar(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">alter table user add constraint 别名 primary key (id)</span><br><span class="line"></span><br><span class="line">alter table user add  primary key (id)</span><br></pre></td></tr></table></figure><p>删除主键约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop primary key</span><br></pre></td></tr></table></figure><p>​</p><p><strong>唯一性约束：</strong>数据不能重复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int(5) primary key,</span><br><span class="line">name varchar(20) unique//唯一性约束</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>主键自增(auto_increment)：</strong>给主键添加自动增长的数值，列只能是整数类型 </p><p>oracle 不支持主键自增，代替使用序列sequence</p><p>sqlserver 支持主键自增，关键字identity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int(5) primary key auto_increment,//表示主键自增，该键数据库底层给于维护</span><br><span class="line">name varchar(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">//insert时，id值不需要给值</span><br><span class="line">insert into user (name) values(&apos;张三&apos;);</span><br></pre></td></tr></table></figure></li><li><p>域完整性</p><p>作用：限制此单元格的数据正确，不对照此列的其它单元格比较</p><p>约束类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据类型 </span><br><span class="line">非空约束（not null） </span><br><span class="line">默认值约束(default)</span><br></pre></td></tr></table></figure><p><strong>数据类型</strong>：略</p><p><strong>非空约束：</strong>not null字段不能为空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int(5) primary key auto_increment,</span><br><span class="line">name varchar(20) not null//非空约束</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>默认值约束：</strong>    default给字段设置默认值，有值时不使用默认值，无值时使用默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int(5) primary key auto_increment,</span><br><span class="line">name varchar(20) not null default &apos;admin&apos;,</span><br><span class="line">age int(3)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO user7 (age) VALUES (20);</span><br><span class="line">INSERT INTO user7 (NAME,age) VALUES (&apos;张三&apos;,20);</span><br></pre></td></tr></table></figure></li><li><p>引用完整性</p><p>作用：多张表关联时，一般使用外键约束，FOREIGN KEY </p><p>约束类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外键约束</span><br></pre></td></tr></table></figure><p><strong>外键约束：</strong></p><p>方式一：创建表时添加外键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#先创建班级表class</span><br><span class="line">create table class(</span><br><span class="line">id int(5) primary key,</span><br><span class="line">cname varchar(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#创建学生表stu,stu依赖于class的存在</span><br><span class="line">create table stu(</span><br><span class="line">id int(5) primary key,</span><br><span class="line">sname varchar(20),</span><br><span class="line">cid int(5),</span><br><span class="line">foreign key (cid) references class (id) //外键声明</span><br><span class="line">);</span><br><span class="line">注意：一般从表外键依赖主表的主键</span><br></pre></td></tr></table></figure><p>方式二：创建关联表后添加外键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#因为外键声明是在创建表之后，所以表的创建可以没有次序</span><br><span class="line"></span><br><span class="line">create table stu(</span><br><span class="line">id int(5) primary key,</span><br><span class="line">sname varchar(20),</span><br><span class="line">cid int(5)</span><br><span class="line">）;</span><br><span class="line"></span><br><span class="line">create table class(</span><br><span class="line">id int(5) primary key,</span><br><span class="line">cname varchar(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">//外键声明</span><br><span class="line"></span><br><span class="line">alter table 表名 add constraint 别名 foreign key(外键) references 主表（主键）</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">alter table stu add constraint fk_cid foreign key (cid) references class(id);</span><br></pre></td></tr></table></figure><p><strong>删除外键关系</strong>(通过别名删除)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop  foreign key 别名</span><br><span class="line">如：</span><br><span class="line">ALTER TABLE stu DROP FOREIGN KEY fk_cid;</span><br></pre></td></tr></table></figure></li></ol><p><strong>二.多表关联查询</strong>（重点）</p><ol><li><p>概念 </p><p>大部分的表和表之间总存在着外键关联关系，当查询一张表记录时，关联查询另一张表中的数据信息，称为表与表之间的关联查询。</p><ol start="2"><li>表关系分类</li></ol><p><strong>一对一</strong>：表与表之的记录是一一对应的关系，比如学生和学生证关系属于一对一关系，公民信息表与身份证信息表也是一对一关系。</p><p><strong>一对多</strong>：表中一条记录对应另一张表的中多条记录。如班级和学生的关系就是一对多关系，即一个班级对应多条学生记录。</p><p><strong>多对多</strong>：表中多条记录对应着另一张表中的多条记录。如老师和学生，或学生和学科关系都属性多对多关系。</p><ol start="3"><li>联合查询</li></ol><p>多张表之间的相同类型属性显示成一个结果集。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">union 联合</span><br><span class="line">union all 联合所有</span><br></pre></td></tr></table></figure><p>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#union 把两相同类型数据显示成一列，注意：重复性记录只记录一条</span><br><span class="line">SELECT sal FROM emp </span><br><span class="line">UNION</span><br><span class="line">SELECT comm FROM emp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#union all 把两相同类型数据显示成一列，注意：重复性记录都会显示</span><br><span class="line">SELECT sal FROM emp </span><br><span class="line">UNION ALL</span><br><span class="line">SELECT comm FROM emp;</span><br><span class="line"></span><br><span class="line">#不同表相的联合查询</span><br><span class="line">SELECT deptno FROM emp</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT deptno FROM dept;</span><br><span class="line"></span><br><span class="line">#不同类型的列，不要联合查询</span><br></pre></td></tr></table></figure><p>4.隐式内连接查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#笛卡尔积</span><br><span class="line">该查询结果没有现实意义，以后多表查询不要出现笛卡尔积</span><br><span class="line">该查询的原理：一张表的一条记录乘以另一张表的记录，所得到机械的结果集</span><br></pre></td></tr></table></figure><p>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#去除笛卡尔积中重复的部份，取等值部份（主键和外键相等的部份）</span><br><span class="line">SELECT * FROM emp,dept WHERE emp.`deptno` = dept.`deptno`;</span><br></pre></td></tr></table></figure></li><li><p>显示内连接查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[inner] join 显示内连接</span><br></pre></td></tr></table></figure><p>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">select * from 表1 inner join 表2 on 连接条件</span><br><span class="line">select * from emp [inner] join dept on emp.deptno = dept.deptno;</span><br><span class="line"></span><br><span class="line">#查询7369号员工的姓名，薪水及所在的部门名称</span><br><span class="line"></span><br><span class="line">select ename,sal,dname from emp </span><br><span class="line">inner join dept </span><br><span class="line">on emp.deptno = dept.deptno </span><br><span class="line">where empno=7369;</span><br><span class="line"></span><br><span class="line">#也可以起别名</span><br><span class="line">SELECT e.ename,e.sal,d.dname FROM emp e</span><br><span class="line">INNER JOIN dept d</span><br><span class="line">ON e.deptno = d.deptno </span><br><span class="line">WHERE e.empno=7369;</span><br></pre></td></tr></table></figure><ol start="6"><li>外连接查询</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">left [outer] join 左外连接</span><br><span class="line">right [outer] join 右外连接</span><br></pre></td></tr></table></figure><p>如下查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查询所有部门名称及该部门下员工的姓名</span><br><span class="line">select dname,ename from dept left join emp on dept.deptno = emp.deptno;</span><br><span class="line"></span><br><span class="line">#查询公司的员工姓名，及所在的部门名称</span><br><span class="line">SELECT ename,dname FROM emp LEFT JOIN dept ON dept.deptno = emp.deptno;</span><br><span class="line">SELECT ename,dname FROM dept RIGHT JOIN emp ON dept.deptno = emp.deptno;</span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>自连接查询</p><p>​    概念：表示表自己和自己连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查询7369号员工的姓名，以及其上司的姓名</span><br><span class="line">select e1.ename 员工姓名,e2.ename 上司姓名 from emp e1 join emp e2 on e1.mgr = e2.empno;</span><br><span class="line"></span><br><span class="line">#注意起别名</span><br></pre></td></tr></table></figure></li><li><p>三表以上关联查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#查询7369号员工的姓名，身份证名称，部门名称</span><br><span class="line">SELECT ename,cardname,dname FROM emp </span><br><span class="line">LEFT JOIN empcard ON emp.`empno` = empcard.`empno`</span><br><span class="line">LEFT JOIN dept ON emp.`deptno` = dept.`deptno`</span><br><span class="line">WHERE emp.empno = 7369;</span><br></pre></td></tr></table></figure></li></ol><p><strong>三.子查询</strong></p><ol><li><p>概念：</p><p>一条完整的select语句之中包含其他select语句，这种查询方式称之为子查询</p><p>其中sub select语句可以出现的位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.查询字段中出现</span><br><span class="line">2.where条件中</span><br><span class="line">3.having子句中</span><br></pre></td></tr></table></figure></li><li><p>用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#查询工资大于JONES工资所有员工信息，其中JONES工资需要一条子查询</span><br><span class="line">步骤1: select * from emp where sal&gt;2975</span><br><span class="line">步骤2: select sal from emp where ename=&apos;JONES&apos;</span><br><span class="line">步骤3: select * from emp where sal&gt;(select sal from emp where ename=&apos;JONES&apos;);</span><br><span class="line"></span><br><span class="line">#查询与SCOTT同一个部门的员工</span><br><span class="line">步骤1：select * from emp where deptno = 20;</span><br><span class="line">步骤2: select deptno from emp where ename = &apos;SCOTT&apos;;</span><br><span class="line">步骤3: select * from emp where deptno = (select deptno from emp where ename = &apos;SCOTT&apos;);</span><br><span class="line">注意：子查询返回的结果集是一条，可以使用=，否则请使用in</span><br><span class="line"></span><br><span class="line">#工资高于30号部门所有人的员工信息</span><br><span class="line">SELECT * FROM emp WHERE sal&gt;(SELECT MAX(sal) FROM emp WHERE deptno = 30)</span><br><span class="line">SELECT * FROM emp WHERE sal &gt; ALL (SELECT sal FROM emp WHERE deptno=30)</span><br><span class="line"></span><br><span class="line">#工资高于30号部门任意一个人的员工信息（大于最小值）</span><br><span class="line">SELECT * FROM emp WHERE sal &gt; any (SELECT sal FROM emp WHERE deptno=30)</span><br></pre></td></tr></table></figure></li></ol><p><strong>四.视图View</strong></p><p>​     作用：对于复杂查询，把结果集固定下来，以便下一次使用。</p><p>​     语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create or replace view 视图名 as (复杂查询)</span><br></pre></td></tr></table></figure><p>​    代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#从视图中查询所有部门名称及该部门下员工的姓名</span><br><span class="line">create or replace view myview as (</span><br><span class="line">select dname,ename from dept left join emp on dept.deptno = emp.deptno</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">#再次查询，从视图中查询</span><br><span class="line">SELECT * FROM myview;</span><br></pre></td></tr></table></figure><p><strong>五.了解SQL优化(尽量使用索引列为查询条件)</strong></p><p>1.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描。</p><p>2.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。 </p><p>3.应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。 </p><p>4.应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描</p><p>5.in 和 not in 也要慎用，否则会导致全表扫描    </p><p>6.应尽量避免在 where 子句中对字段进行表达式操作</p><p>7.应尽量避免在where子句中对字段进行函数操作</p><p>8.很多时候用 exists 代替 in 是一个好的选择</p><p>9.尽量使用数字型字段</p><p>10.尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些</p><p>11.任何地方都不要使用 select <em> from t ，用具体的字段列表代替“</em>”，不要返回用不到的任何字段。 </p><p>12.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。 </p><p>13.避免频繁创建和删除临时表，以减少系统表资源的消耗。 </p><p>14.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Select * Into new_table_name from old_table_name</span><br><span class="line">MySQL不支持Select Into语句直接备份表结构和数据</span><br><span class="line">替代做法：</span><br><span class="line">Create table new_table_name (Select * from old_table_name)</span><br><span class="line">copy表结构及数据</span><br></pre></td></tr></table></figure><p><strong>六.作业</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">数据库结构</span><br><span class="line">创建四张表 分别存储 学生信息 课程信息 分数 讲师信息表 存储相应数据</span><br><span class="line">学生信息表 Student</span><br><span class="line">字段名字段类型字段约束 / 含义</span><br><span class="line">SnoVarchar(3)Not null  / 学员编号</span><br><span class="line">SnameVarchar(4)Not null  / 学员姓名 </span><br><span class="line">SsexVarchar(2)Not null  / 性别</span><br><span class="line">SbirthdayDatetime生日</span><br><span class="line">ClassnumVarchar(5)班级号</span><br><span class="line"></span><br><span class="line">CREATE TABLE STUDENT</span><br><span class="line">(</span><br><span class="line">SNO VARCHAR(3) NOT NULL,</span><br><span class="line">SNAME VARCHAR(4) NOT NULL,</span><br><span class="line">SSEX VARCHAR(2) NOT NULL,</span><br><span class="line">SBIRTHDAY DATETIME,</span><br><span class="line">CLASS VARCHAR(5)</span><br><span class="line">)</span><br><span class="line">课程信息表 course</span><br><span class="line">字段名字段类型字段约束 / 含义</span><br><span class="line">CnoVarchar(5)Not null / 课程编号</span><br><span class="line">CnameVarchar(10)Not null / 课程名称</span><br><span class="line">TnoVarchar(10)Not null / 授课老师编号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE COURSE</span><br><span class="line">(CNO VARCHAR(5) NOT NULL,</span><br><span class="line">CNAME VARCHAR(10) NOT NULL,</span><br><span class="line">TNO VARCHAR(10) NOT NULL)</span><br><span class="line">成绩表score</span><br><span class="line">字段名字段类型字段约束 / 含义</span><br><span class="line">SnoVarchar(3)Not null  / 学员编号</span><br><span class="line">CnoVarchar(5)Not null  / 课程编号</span><br><span class="line">DegreeDouble(3,1)Not null  / 分数</span><br><span class="line"></span><br><span class="line">CREATE TABLE SCORE</span><br><span class="line">(SNO VARCHAR(3) NOT NULL,</span><br><span class="line">CNO VARCHAR(5) NOT NULL,</span><br><span class="line">DEGREE NUMERIC(10, 1) NOT NULL)</span><br><span class="line">讲师表teacher</span><br><span class="line">字段名字段类型字段约束 / 含义</span><br><span class="line">TnoVarchar(3)Not null  / 讲师编号</span><br><span class="line">TnameVarchar(4)Not null  / 讲师姓名</span><br><span class="line">TsexVarchar(2)Not null  / 讲师性别</span><br><span class="line">TbirthdayDatetimeNot null  / 出生日期</span><br><span class="line">ProfVarchar(6)等级</span><br><span class="line">DepartVarchar(10)所属院系</span><br><span class="line"></span><br><span class="line">CREATE TABLE TEACHER</span><br><span class="line">(TNO VARCHAR(3) NOT NULL,</span><br><span class="line">TNAME VARCHAR(4) NOT NULL, TSEX VARCHAR(2) NOT NULL,</span><br><span class="line">TBIRTHDAY DATETIME NOT NULL, PROF VARCHAR(6),</span><br><span class="line">DEPART VARCHAR(10) NOT NULL)</span><br><span class="line"></span><br><span class="line">向表中存储数据</span><br><span class="line">INSERT INTO STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,CLASS) VALUES (108 ,&apos;曾华&apos; ,&apos;男&apos; ,1977-09-01,95033);</span><br><span class="line">INSERT INTO STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,CLASS) VALUES (105 ,&apos;匡明&apos; ,&apos;男&apos; ,1975-10-02,95031);</span><br><span class="line">INSERT INTO STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,CLASS) VALUES (107 ,&apos;王丽&apos; ,&apos;女&apos; ,1976-01-23,95033);</span><br><span class="line">INSERT INTO STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,CLASS) VALUES (101 ,&apos;李军&apos; ,&apos;男&apos; ,1976-02-20,95033);</span><br><span class="line">INSERT INTO STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,CLASS) VALUES (109 ,&apos;王芳&apos; ,&apos;女&apos; ,1975-02-10,95031);</span><br><span class="line">INSERT INTO STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,CLASS) VALUES (103 ,&apos;陆君&apos; ,&apos;男&apos; ,1974-06-03,95031);</span><br><span class="line">GO</span><br><span class="line">INSERT INTO COURSE(CNO,CNAME,TNO)VALUES (&apos;3-105&apos; ,&apos;计算机导论&apos;,825);</span><br><span class="line">INSERT INTO COURSE(CNO,CNAME,TNO)VALUES (&apos;3-245&apos; ,&apos;操作系统&apos; ,804);</span><br><span class="line">INSERT INTO COURSE(CNO,CNAME,TNO)VALUES (&apos;6-166&apos; ,&apos;数据电路&apos; ,856);</span><br><span class="line">INSERT INTO COURSE(CNO,CNAME,TNO)VALUES (&apos;9-888&apos; ,&apos;高等数学&apos; ,100);</span><br><span class="line">GO</span><br><span class="line">INSERT INTO SCORE(SNO,CNO,DEGREE)VALUES (103,&apos;3-245&apos;,86);</span><br><span class="line">INSERT INTO SCORE(SNO,CNO,DEGREE)VALUES (105,&apos;3-245&apos;,75);</span><br><span class="line">INSERT INTO SCORE(SNO,CNO,DEGREE)VALUES (109,&apos;3-245&apos;,68);</span><br><span class="line">INSERT INTO SCORE(SNO,CNO,DEGREE)VALUES (103,&apos;3-105&apos;,92);</span><br><span class="line">INSERT INTO SCORE(SNO,CNO,DEGREE)VALUES (105,&apos;3-105&apos;,88);</span><br><span class="line">INSERT INTO SCORE(SNO,CNO,DEGREE)VALUES (109,&apos;3-105&apos;,76);</span><br><span class="line">INSERT INTO SCORE(SNO,CNO,DEGREE)VALUES (101,&apos;3-105&apos;,64);</span><br><span class="line">INSERT INTO SCORE(SNO,CNO,DEGREE)VALUES (107,&apos;3-105&apos;,91);</span><br><span class="line">INSERT INTO SCORE(SNO,CNO,DEGREE)VALUES (108,&apos;3-105&apos;,78);</span><br><span class="line">INSERT INTO SCORE(SNO,CNO,DEGREE)VALUES (101,&apos;6-166&apos;,85);</span><br><span class="line">INSERT INTO SCORE(SNO,CNO,DEGREE)VALUES (107,&apos;6-106&apos;,79);</span><br><span class="line">INSERT INTO SCORE(SNO,CNO,DEGREE)VALUES (108,&apos;6-166&apos;,81);</span><br><span class="line">GO</span><br><span class="line">INSERT INTO TEACHER(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART) </span><br><span class="line">VALUES (804,&apos;李诚&apos;,&apos;男&apos;,&apos;1958-12-02&apos;,&apos;副教授&apos;,&apos;计算机系&apos;);</span><br><span class="line">INSERT INTO TEACHER(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART) </span><br><span class="line">VALUES (856,&apos;张旭&apos;,&apos;男&apos;,&apos;1969-03-12&apos;,&apos;讲师&apos;,&apos;电子工程系&apos;);</span><br><span class="line">INSERT INTO TEACHER(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART)</span><br><span class="line">VALUES (825,&apos;王萍&apos;,&apos;女&apos;,&apos;1972-05-05&apos;,&apos;助教&apos;,&apos;计算机系&apos;);</span><br><span class="line">INSERT INTO TEACHER(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART) </span><br><span class="line">VALUES (831,&apos;刘冰&apos;,&apos;女&apos;,&apos;1977-08-14&apos;,&apos;助教&apos;,&apos;电子工程系&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、 查询Student表中的所有记录的Sname、Ssex和Class列。</span><br><span class="line">2、 查询教师所有的单位即不重复的Depart列。</span><br><span class="line">3、 查询Student表的所有记录。</span><br><span class="line">4、 查询Score表中成绩在60到80之间的所有记录。</span><br><span class="line">5、 查询Score表中成绩为85，86或88的记录。</span><br><span class="line">6、 查询Student表中“95031”班或性别为“女”的同学记录。</span><br><span class="line">7、 以Class降序查询Student表的所有记录。</span><br><span class="line">8、 以Cno升序、Degree降序查询Score表的所有记录。</span><br><span class="line">9、 查询“95031”班的学生人数。</span><br><span class="line">10、查询Score表中的最高分的学生学号和课程号。</span><br><span class="line">11、查询‘3-105’号课程的平均分。</span><br><span class="line">12、查询Score表中至少有5名学生选修的并以3开头的课程的平均分数。</span><br><span class="line">13、查询最低分大于70，最高分小于90的Sno列。</span><br><span class="line">14、查询所有学生的Sname、Cno和Degree列。</span><br><span class="line">15、查询所有学生的Sno、Cname和Degree列。</span><br><span class="line">16、查询所有学生的Sname、Cname和Degree列。</span><br><span class="line">17、查询“95033”班所选课程的平均分。</span><br><span class="line">18、假设使用如下命令建立了一个grade表：</span><br><span class="line">create table grade(low number(3,0),upp number(3),rank char(1));</span><br><span class="line">insert into grade values(90,100,’A’);</span><br><span class="line">insert into grade values(80,89,’B’);</span><br><span class="line">insert into grade values(70,79,’C’);</span><br><span class="line">insert into grade values(60,69,’D’);</span><br><span class="line">insert into grade values(0,59,’E’);</span><br><span class="line">commit;</span><br><span class="line">现查询所有同学的Sno、Cno和rank列。</span><br><span class="line">19、查询选修“3-105”课程的成绩高于“109”号同学成绩的所有同学的记录。</span><br><span class="line">20、查询score中选学一门以上课程的同学中分数为非最高分成绩的记录。</span><br><span class="line">21、查询成绩高于学号为“109”、课程号为“3-105”的成绩的所有记录。</span><br><span class="line">22、查询和学号为108的同学同年出生的所有学生的Sno、Sname和Sbirthday列。</span><br><span class="line">23、查询“张旭“教师任课的学生成绩。</span><br><span class="line">24、查询选修某课程的同学人数多于5人的教师姓名。</span><br><span class="line">25、查询95033班和95031班全体学生的记录。</span><br><span class="line">26、查询存在有85分以上成绩的课程Cno.</span><br><span class="line">27、查询出“计算机系“教师所教课程的成绩表。</span><br><span class="line">28、查询“计算机系”与“电子工程系“不同职称的教师的Tname和Prof。</span><br><span class="line">29、查询选修编号为“3-105“课程且成绩至少高于选修编号为“3-245”的同学的Cno、Sno和Degree,并按Degree从高到低次序排序。</span><br><span class="line">30、查询选修编号为“3-105”且成绩高于选修编号为“3-245”课程的同学的Cno、Sno和Degree.</span><br><span class="line">31、查询所有教师和同学的name、sex和birthday.</span><br><span class="line">32、查询所有“女”教师和“女”同学的name、sex和birthday.</span><br><span class="line">33、查询成绩比该课程平均成绩低的同学的成绩表。</span><br><span class="line">34、查询所有任课教师的Tname和Depart.</span><br><span class="line">35 查询所有未讲课的教师的Tname和Depart. </span><br><span class="line">36、查询至少有2名男生的班号。</span><br><span class="line">37、查询Student表中不姓“王”的同学记录。</span><br><span class="line">38、查询Student表中每个学生的姓名和年龄。</span><br><span class="line">39、查询Student表中最大和最小的Sbirthday日期值。</span><br><span class="line">40、以班号和年龄从大到小的顺序查询Student表中的全部记录。</span><br><span class="line">41、查询“男”教师及其所上的课程。</span><br><span class="line">42、查询最高分同学的Sno、Cno和Degree列。</span><br><span class="line">43、查询和“李军”同性别的所有同学的Sname.</span><br><span class="line">44、查询和“李军”同性别并同班的同学Sname.</span><br><span class="line">45、查询所有选修“计算机导论”课程的“男”同学的成绩表</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mysql数据库高查询&quot;&gt;&lt;a href=&quot;#Mysql数据库高查询&quot; class=&quot;headerlink&quot; title=&quot;Mysql数据库高查询&quot;&gt;&lt;/a&gt;Mysql数据库高查询&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;今日内容&lt;/strong&gt;&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/JDBC%E5%AE%9E%E7%8E%B0CRUD/"/>
    <id>http://kongxianghe.top/2018/10/23/JDBC实现CRUD/</id>
    <published>2018-10-23T14:06:03.478Z</published>
    <updated>2018-07-09T06:15:56.175Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JDBC实现CRUD"><a href="#JDBC实现CRUD" class="headerlink" title="JDBC实现CRUD"></a>JDBC实现CRUD</h3><h4 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、JDBC简介</span><br><span class="line">2、JDBC执行DML语句</span><br><span class="line">3、JDBC执行DQL语句</span><br><span class="line">4、JDBC的ResultSet</span><br><span class="line">5、作业</span><br></pre></td></tr></table></figure><h4 id="一-关于JDBC的简介"><a href="#一-关于JDBC的简介" class="headerlink" title="一.关于JDBC的简介"></a>一.关于JDBC的简介</h4><h5 id="1-概念"><a href="#1-概念" class="headerlink" title="1 . 概念"></a>1 . 概念</h5><p>JDBC（Java DataBase Connectivity,java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。JDBC提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。<br>Java 具有坚固、安全、易于使用、易于理解和可从网络上自动下载等特性，是编写数据库应用程序的杰出语言。所需要的只是 Java应用程序与各种不同数据库之间进行对话的方法。<br>JDBC可以在各种平台上使用Java，如Windows，Mac OS和各种版本的UNIX。<br>JDBC库包括通常与数据库使用相关的下面提到的每个任务的API。</p><ul><li>连接数据库。</li><li>创建SQL或MySQL语句。</li><li>在数据库中执行SQL或MySQL查询。</li><li>查看和修改生成的记录。</li></ul><h5 id="2-JDBC体系结构"><a href="#2-JDBC体系结构" class="headerlink" title="2. JDBC体系结构"></a>2. JDBC体系结构</h5><p>JDBC API支持用于数据库访问的两层和三层处理模型，但通常，JDBC体系结构由两层组成：</p><ul><li><strong>JDBC API：</strong>这提供了应用程序到JDBC管理器连接。</li><li><strong>JDBC驱动程序API：</strong>这支持JDBC管理器到驱动程序连接。</li></ul><p>JDBC API使用驱动程序管理器和特定于数据库的驱动程序来提供与异构数据库的透明连接。</p><p><img src="pic/1.png" alt="1.png"></p><h5 id="3-通用JDBC-组件-重点"><a href="#3-通用JDBC-组件-重点" class="headerlink" title="3 .通用JDBC 组件(重点)"></a>3 .通用JDBC 组件(重点)</h5><p><strong>DriverManager：</strong> 此类管理数据库驱动程序列表。使用通信子协议将来自java应用程序的连接请求与适当的数据库驱动程序匹配（重点）。</p><p>​ <strong>Driver</strong>:此接口处理与数据库服务器的通信，我们很少会直接与Driver对象进行交互。而是使用DriverManager对象来管理这种类型的对象。</p><p><strong>Connection：</strong>该界面具有用于联系数据库的所有方法。连接对象表示通信上下文，即，与数据库的所有通信仅通过连接对象（重点）。</p><p><strong>Statement</strong>：使用从此接口创建的对象将SQL语句提交到数据库。除了执行存储过程之外，一些派生接口还接受参数（重点）。</p><p><strong>ResultSet：</strong>在使用Statement对象执行SQL查询后，这些对象保存从数据库检索的数据。它作为一个迭代器，允许我们移动其数据（重点）。</p><p>​ <strong>SQLException：</strong>此类处理数据库应用程序中发生的任何错误</p><h4 id="二-JDBC-相关的SQL语法"><a href="#二-JDBC-相关的SQL语法" class="headerlink" title="二. JDBC 相关的SQL语法"></a>二. JDBC 相关的SQL语法</h4><h5 id="1-CRUD语法介绍"><a href="#1-CRUD语法介绍" class="headerlink" title="1.CRUD语法介绍"></a>1.CRUD语法介绍</h5><p>SQL 是一种标准化的语言，它允许你在数据库上执行操作，如创建项目，查询内容，更新内容，并删除条目等操作。</p><p>Create, Read, Update, and Delete 通常称为CRUD操作。</p><p>CREATE DATABASE语句用于创建新的数据库：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; CREATE DATABASE DATABASE_NAME;</span><br></pre></td></tr></table></figure><p>DROP DATABASE语句用于删除现有数据库：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; DROP DATABASE DATABASE_NAME;</span><br></pre></td></tr></table></figure><p>CREATE TABLE语句用于创建新表。语法是 -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; CREATE TABLE Employees</span><br><span class="line">(</span><br><span class="line">   id INT NOT NULL,</span><br><span class="line">   age INT NOT NULL,</span><br><span class="line">   first VARCHAR(255),</span><br><span class="line">   last VARCHAR(255),</span><br><span class="line">   PRIMARY KEY ( id )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>DROP TABLE语句用于删除现有表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; DROP TABLE table_name;</span><br></pre></td></tr></table></figure><p>INSERT的语法类似于以下内容，其中column1，column2等表示要显示在相应列中的新数据 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; INSERT INTO table_name VALUES (column1, column2, ...);</span><br></pre></td></tr></table></figure><p>SELECT语句用于从数据库中检索数据。SELECT的语法是 -</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; SELECT column_name, column_name, ...</span><br><span class="line">     FROM table_name</span><br><span class="line">     WHERE conditions;</span><br></pre></td></tr></table></figure><p>WHERE子句可以使用比较运算符，例如=，！=，&lt;，&gt;，&lt;=和&gt; =，以及BETWEEN和LIKE运算符。</p><p>UPDATE语句用于更新数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; UPDATE table_name</span><br><span class="line">     SET column_name = value, column_name = value, ...</span><br><span class="line">     WHERE conditions;</span><br></pre></td></tr></table></figure><p>WHERE子句可以使用比较运算符，例如=，！=，&lt;，&gt;，&lt;=和&gt; =，以及BETWEEN和LIKE运算符。</p><p>DELETE语句用于从表中删除数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; DELETE FROM table_name WHERE conditions;</span><br></pre></td></tr></table></figure><p>WHERE子句可以使用比较运算符，例如=，！=，&lt;，&gt;，&lt;=和&gt; =，以及BETWEEN和LIKE运算符。</p><h4 id="三-JDBC简单示例"><a href="#三-JDBC简单示例" class="headerlink" title="三. JDBC简单示例"></a>三. JDBC简单示例</h4><h5 id="1-使用步骤"><a href="#1-使用步骤" class="headerlink" title="1.使用步骤"></a>1.使用步骤</h5><p>构建JDBC应用程序涉及以下六个步骤：</p><ul><li><p><strong>导入包：</strong>需要包含包含数据库编程所需的JDBC类的包。大多数情况下，使用*import java.sql。**就足够了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.Statement;</span><br></pre></td></tr></table></figure></li><li><p><strong>注册JDBC驱动程序：</strong>要求您初始化驱动程序，以便您可以打开与数据库的通信通道。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);//mysql驱动名固定不变</span><br></pre></td></tr></table></figure></li><li><p><strong>打开连接：</strong>需要使用<em>DriverManager.getConnection（）</em>方法创建一个Connection对象，该对象表示与数据库的物理连接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String url = &quot;jdbc:mysql://主机IP:3306/数据库名&quot;;</span><br><span class="line">Connection conn = DriverManager.getConnection(url, user, password);</span><br></pre></td></tr></table></figure></li><li><p><strong>执行查询：</strong>需要使用类型为Statement的对象来构建和提交SQL语句到数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Statement statement = conn.createStatement();</span><br><span class="line">String sql = &quot;select * from emp where empno&quot;;</span><br><span class="line">ResultSet rs = statement.executeQuery(sql);</span><br></pre></td></tr></table></figure></li><li><p><strong>从结果集中提取数据：</strong>需要使用相应的<em>ResultSet.getXXX（）</em>方法从结果集中检索数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while (rs.next()) &#123;</span><br><span class="line">int empno = rs.getInt(&quot;empno&quot;);</span><br><span class="line">String ename = rs.getString(&quot;ename&quot;);</span><br><span class="line">String job = rs.getString(&quot;job&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(empno + &quot;,&quot; + ename + &quot;,&quot; + job);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>释放资源：</strong>需要明确地关闭所有数据库资源，而不依赖于JVM的垃圾收集。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resultset.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h5 id="2-JDBC连接步骤"><a href="#2-JDBC连接步骤" class="headerlink" title="2. JDBC连接步骤"></a>2. JDBC连接步骤</h5><p>建立JDBC连接所涉及的编程相当简单。这是简单的四个步骤</p><ul><li><strong>导入JDBC包：</strong>将Java语言的<strong>import</strong>语句添加到Java代码中导入所需的类。</li><li><strong>注册JDBC驱动程序：</strong>此步骤将使JVM将所需的驱动程序实现加载到内存中，以便它可以满足您的JDBC请求。</li><li><strong>数据库URL配置：</strong>这是为了创建一个格式正确的地址，指向要连接到的数据库。</li><li><strong>创建连接对象：</strong>最后，调用<em>DriverManager</em>对象的<em>getConnection（）</em>方法来建立实际的数据库连接。</li></ul><p>其中注册驱动的方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.Class.forName();</span><br><span class="line">2.DriverManager.registerDriver()(了解)</span><br></pre></td></tr></table></figure><p><strong>Class.forName();</strong></p><p>注册驱动程序最常见的方法是使用Java的<strong>Class.forName（）</strong>方法，将驱动程序的类文件动态加载到内存中，并将其自动注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(ClassNotFoundException ex) &#123;</span><br><span class="line">   System.out.println(<span class="string">"Error: unable to load driver class!"</span>);</span><br><span class="line">   System.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DriverManager.registerDriver()</strong>(了解)</p><p>可以用来注册驱动程序的第二种方法是使用静态<strong>DriverManager.registerDriver（）</strong>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   Driver myDriver = <span class="keyword">new</span> com.mysql.jdbc.Driver();</span><br><span class="line">   DriverManager.registerDriver( myDriver );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(ClassNotFoundException ex) &#123;</span><br><span class="line">   System.out.println(<span class="string">"Error: unable to load driver class!"</span>);</span><br><span class="line">   System.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数据库URL配置</strong></p><p>加载驱动程序后，可以使用<strong>DriverManager.getConnection（）</strong>方法建立连接。为了方便参考，让我列出三个重载的DriverManager.getConnection()方法 -</p><ul><li>getConnection（String url）</li><li>getConnection（String url，Properties prop）</li><li>getConnection（String url，String user，String password）</li></ul><table><thead><tr><th>RDBMS</th><th>JDBC驱动程序名称</th><th>URL网址格式</th></tr></thead><tbody><tr><td>MySQL的</td><td>com.mysql.jdbc.Driver</td><td><strong>jdbc：mysql：//</strong>hostname:3306 / databaseName</td></tr><tr><td>ORACLE</td><td>oracle.jdbc.driver.OracleDriver</td><td><strong>jdbc：oracle：thin：@</strong> hostname：port Number：databaseName</td></tr><tr><td>DB2</td><td>COM.ibm.db2.jdbc.net.DB2Driver</td><td><strong>jdbc：db2：</strong>hostname：port Number / databaseName</td></tr><tr><td>SYBASE</td><td>com.sybase.jdbc.SybDriver</td><td><strong>jdbc：sybase：Tds：</strong> hostname：port Number / databaseName</td></tr></tbody></table><p><strong>创建数据库连接对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String URL = <span class="string">"jdbc:oracle:thin:@amrood:1521:EMP"</span>;</span><br><span class="line">String USER = <span class="string">"username"</span>;</span><br><span class="line">String PASS = <span class="string">"password"</span></span><br><span class="line">Connection conn = DriverManager.getConnection(URL, USER, PASS);</span><br></pre></td></tr></table></figure><p><strong>使用数据库URL和属性对象</strong></p><p>DriverManager.getConnection（）方法的第三种形式需要一个数据库URL和一个Properties对象 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DriverManager.getConnection(String url, Properties info);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line">String URL = <span class="string">"jdbc：mysql：//hostname:3306 / databaseName"</span>;</span><br><span class="line">Properties info = <span class="keyword">new</span> Properties( );</span><br><span class="line">info.put( <span class="string">"user"</span>, <span class="string">"username"</span> );</span><br><span class="line">info.put( <span class="string">"password"</span>, <span class="string">"password"</span> );</span><br><span class="line"></span><br><span class="line">Connection conn = DriverManager.getConnection(URL, info);</span><br></pre></td></tr></table></figure><p><strong>关闭数据库连接</strong>(重点)</p><p>为确保连接关闭，您可以在代码中提供一个“finally”块。一个<em>finally</em>块总是执行，不管是否发生异常。</p><p>要关闭上面打开的连接，你应该调用close（）方法如下 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn.close();</span><br></pre></td></tr></table></figure><h4 id="四-JDBC执行SQL语句"><a href="#四-JDBC执行SQL语句" class="headerlink" title="四. JDBC执行SQL语句"></a>四. JDBC执行SQL语句</h4><p>一旦获得了连接，我们可以与数据库进行交互。JDBC Statement和PreparedStatement接口定义了使您能够发送SQL命令并从数据库接收数据的方法和属性。</p><table><thead><tr><th>接口</th><th>推荐使用</th></tr></thead><tbody><tr><td>声明</td><td>用于对数据库进行通用访问。在运行时使用静态SQL语句时很有用。Statement接口不能接受参数。</td></tr><tr><td>PreparedStatement的</td><td>当您计划多次使用SQL语句时使用。PreparedStatement接口在运行时接受输入参数。</td></tr></tbody></table><h5 id="1-声明Statement对象"><a href="#1-声明Statement对象" class="headerlink" title="1. 声明Statement对象"></a>1. 声明Statement对象</h5><p>创建语句对象</p><p>在使用Statement对象执行SQL语句之前，需要使用Connection对象的createStatement（）方法创建一个，如下例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Statement stmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   stmt = conn.createStatement( );</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建Statement对象后，您可以使用它来执行一个SQL语句，其中有三个执行方法之一。</p><ul><li><p><strong>boolean execute（String SQL）</strong>：如果可以检索到ResultSet对象，则返回一个布尔值true; 否则返回false。使用此方法执行SQL DDL语句或需要使用真正的动态SQL时。</p><p>一般查询时，有结果集返回，值为true，而增删改无结果集返回，值为false</p></li><li><p><strong>int executeUpdate（String SQL）</strong>：返回受SQL语句执行影响的行数。使用此方法执行预期会影响多个行的SQL语句，例如INSERT，UPDATE或DELETE语句。</p></li><li><p><strong>ResultSet executeQuery（String SQL）</strong>：返回一个ResultSet对象。当您希望获得结果集时，请使用此方法，就像使用SELECT语句一样。</p></li></ul><h5 id="2-关闭Statement对象"><a href="#2-关闭Statement对象" class="headerlink" title="2. 关闭Statement对象"></a>2. 关闭Statement对象</h5><p>就像我们关闭一个Connection对象以保存数据库资源一样，由于同样的原因，还应该关闭Statement对象。</p><p>一个简单的调用close（）方法将执行该作业。如果先关闭Connection对象，它也会关闭Statement对象。但是，应始终显式关闭Statement对象，以确保正确清理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Statement stmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   stmt = conn.createStatement( );</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">   stmt.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-创建PreparedStatement对象-重点，常用，推荐使用"><a href="#3-创建PreparedStatement对象-重点，常用，推荐使用" class="headerlink" title="3 .创建PreparedStatement对象(重点，常用，推荐使用)"></a>3 .创建PreparedStatement对象(重点，常用，推荐使用)</h5><p>该<em>PreparedStatement的</em>接口扩展了Statement接口，它为您提供了一个通用的Statement对象有两个优点附加功能。</p><p>此语句使您可以动态地提供参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   String SQL = <span class="string">"Update Employees SET age = ? WHERE id = ?"</span>;</span><br><span class="line">   pstmt = conn.prepareStatement(SQL);</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDBC中的所有参数都由<strong>？</strong>符号，这被称为参数标记。在执行SQL语句之前，必须为每个参数提供值。</p><p>所述<strong>的setXXX（）</strong>方法将值绑定到所述参数，其中<strong>XXX</strong>代表要绑定到输入参数的值的Java数据类型。如果忘记提供值，将收到一个SQLException。</p><p>每个参数标记由其顺序位置引用。第一个标记表示位置1，下一个位置2等等。该方法与Java数组索引不同，从0开始。</p><h5 id="4-关闭PreparedStatement对象"><a href="#4-关闭PreparedStatement对象" class="headerlink" title="4. 关闭PreparedStatement对象"></a>4. 关闭PreparedStatement对象</h5><p>就像关闭Statement对象一样，由于同样的原因，还应该关闭PreparedStatement对象。</p><p>一个简单的调用close（）方法将执行该作业。如果先关闭Connection对象，它也会关闭PreparedStatement对象。但是，应始终显式关闭PreparedStatement对象，以确保正确清理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   String SQL = <span class="string">"Update Employees SET age = ? WHERE id = ?"</span>;</span><br><span class="line">   pstmt = conn.prepareStatement(SQL);</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">   pstmt.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-ResultSet结果集"><a href="#5-ResultSet结果集" class="headerlink" title="5. ResultSet结果集"></a>5. ResultSet结果集</h5><p>SELECT语句是从数据库中选择行并在结果集中查看行的标准方法。该<em>java.sql.ResultSet中的</em>接口表示结果集数据库查询。</p><p>ResultSet对象维护指向结果集中当前行的游标。术语“结果集”是指包含在ResultSet对象中的行和列数据。</p><p><strong>其中 ResultSet类型</strong></p><p>如果没有指定任何ResultSet类型，您将自动获得一个TYPE_FORWARD_ONLY。</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>ResultSet.TYPE_FORWARD_ONLY</td><td>光标只能在结果集中向前移动。</td></tr><tr><td>ResultSet.TYPE_SCROLL_INSENSITIVE</td><td>光标可以向前和向后滚动，结果集对创建结果集后发生的数据库的其他更改不敏感。</td></tr><tr><td>ResultSet.TYPE_SCROLL_SENSITIVE。</td><td>光标可以向前和向后滚动，结果集对创建结果集之后发生的其他数据库所做的更改敏感。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   Statement stmt = conn.createStatement(</span><br><span class="line">                           ResultSet.TYPE_FORWARD_ONLY,</span><br><span class="line">                           ResultSet.CONCUR_READ_ONLY);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">   ....</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//注意：该对像也需手动关闭</span></span><br><span class="line">   ....ResultSet.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="作业题"><a href="#作业题" class="headerlink" title="作业题"></a>作业题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1.登录</span><br><span class="line">创建user表</span><br><span class="line">id int 主键 自增</span><br><span class="line">username varchar</span><br><span class="line">password varchar</span><br><span class="line">创建user_leaf 用户个人信息表</span><br><span class="line">id int 主键 自增</span><br><span class="line">name</span><br><span class="line">age</span><br><span class="line">sex</span><br><span class="line">u_id 外键</span><br><span class="line"></span><br><span class="line">控制台输入用户名 密码</span><br><span class="line">连接数据库 </span><br><span class="line">判断和数据库里的是否一致</span><br><span class="line">一致 显示 登录成功 </span><br><span class="line">不一致 显示登陆失败</span><br><span class="line">扩展 如登录成功</span><br><span class="line">显示user个人信息表信息</span><br><span class="line">2.根据id查询指定的学生记录</span><br><span class="line">创建学生信息表创建方法 传入学生id 获取学生信息</span><br><span class="line">student 表 </span><br><span class="line">sid(int 主键 自增) </span><br><span class="line">sname(varchar 非空) </span><br><span class="line">sage(int 默认值为10) </span><br><span class="line">ssex(varchar) </span><br><span class="line">birthday(date) </span><br><span class="line">score(double 保留小数点后2位)</span><br><span class="line">扩展</span><br><span class="line">1.将 score单独存储到student_s表中</span><br><span class="line">一对多关系</span><br><span class="line">将数据存储到合适的集合中 遍历结合获取数据</span><br><span class="line">    2.将集合中的数据 写出到student.txt文件中 以逗号分隔</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JDBC实现CRUD&quot;&gt;&lt;a href=&quot;#JDBC实现CRUD&quot; class=&quot;headerlink&quot; title=&quot;JDBC实现CRUD&quot;&gt;&lt;/a&gt;JDBC实现CRUD&lt;/h3&gt;&lt;h4 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今日内容&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/JDBC%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C%E5%92%8C%E4%BA%8B%E5%8A%A1/"/>
    <id>http://kongxianghe.top/2018/10/23/JDBC高级操作和事务/</id>
    <published>2018-10-23T14:06:03.470Z</published>
    <updated>2018-07-09T06:15:56.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JDBC高级使用和数据库事务"><a href="#JDBC高级使用和数据库事务" class="headerlink" title="JDBC高级使用和数据库事务"></a>JDBC高级使用和数据库事务</h3><h4 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、preparedStatement用法</span><br><span class="line">2、JDBC多表关联查询</span><br><span class="line">3、数据库事务</span><br><span class="line">4、JDBC事务实现</span><br><span class="line">5、JDBC的批处理</span><br><span class="line">6、JDBC操作二进制</span><br><span class="line">7、作业</span><br></pre></td></tr></table></figure><h4 id="一-preparedStatement的用法（重点）"><a href="#一-preparedStatement的用法（重点）" class="headerlink" title="一.preparedStatement的用法（重点）"></a>一.preparedStatement的用法（重点）</h4><p><strong>1.作用</strong></p><p>preparedStatement可以对sql语句进行预处理，并进行参数绑定操作，然后进行执行CRUD操作</p><p><strong>2.用法</strong><br>对EMP表的CRUD操作如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line">package crud;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import tools.JdbcUtil;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 使用preparedStatement进行CRUD操作</span><br><span class="line"> * </span><br><span class="line"> * preparedStatement是Statement的子接口</span><br><span class="line"> * </span><br><span class="line"> * @author kevin</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class EmpDao &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 增</span><br><span class="line"> * </span><br><span class="line"> * @param emp</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public int insert(Emp emp) &#123;</span><br><span class="line"></span><br><span class="line">// 1.获取连接对像</span><br><span class="line">Connection conn = JdbcUtil.findConnection();</span><br><span class="line">/*</span><br><span class="line"> * 2.创建会话preparedStatement 其中？表示点位符</span><br><span class="line"> */</span><br><span class="line">String sql = &quot;insert into EMP(empno,ename,job) values(?,?,?)&quot;;</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line">int i = 0;</span><br><span class="line">try &#123;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">// 3.进行参数绑定</span><br><span class="line">ps.setInt(1, emp.getEmpno());</span><br><span class="line">ps.setString(2, emp.getEname());</span><br><span class="line">ps.setString(3, emp.getJob());</span><br><span class="line">/*</span><br><span class="line"> * 4.执行sql PreparedStatement一定是无参的执行方法s</span><br><span class="line"> */</span><br><span class="line">i = ps.executeUpdate();</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">JdbcUtil.closeResource(null, ps, conn);</span><br><span class="line">&#125;</span><br><span class="line">return i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 删</span><br><span class="line"> * </span><br><span class="line"> * @param empno</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public int delete(int empno) &#123;</span><br><span class="line"></span><br><span class="line">// 1.获取连接对像</span><br><span class="line">Connection conn = JdbcUtil.findConnection();</span><br><span class="line">/*</span><br><span class="line"> * 2.创建会话preparedStatement 其中？表示点位符</span><br><span class="line"> */</span><br><span class="line">String sql = &quot;delete from EMP where empno = ?&quot;;</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line">int i = 0;</span><br><span class="line">try &#123;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">// 3.进行参数绑定</span><br><span class="line">ps.setInt(1, empno);</span><br><span class="line">/*</span><br><span class="line"> * 4.执行sql PreparedStatement一定是无参的执行方法s</span><br><span class="line"> */</span><br><span class="line">i = ps.executeUpdate();</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">JdbcUtil.closeResource(null, ps, conn);</span><br><span class="line">&#125;</span><br><span class="line">return i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 改</span><br><span class="line"> * </span><br><span class="line"> * @param emp</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public int update(Emp emp) &#123;</span><br><span class="line"></span><br><span class="line">// 1.获取连接对像</span><br><span class="line">Connection conn = JdbcUtil.findConnection();</span><br><span class="line">/*</span><br><span class="line"> * 2.创建会话preparedStatement 其中？表示点位符</span><br><span class="line"> */</span><br><span class="line">String sql = &quot;update EMP set ename = ?,job=? where empno = ?&quot;;</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line">int i = 0;</span><br><span class="line">try &#123;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">// 3.进行参数绑定</span><br><span class="line">ps.setString(1, emp.getEname());</span><br><span class="line">ps.setString(2, emp.getJob());</span><br><span class="line">ps.setInt(3, emp.getEmpno());</span><br><span class="line">/*</span><br><span class="line"> * 4.执行sql PreparedStatement一定是无参的执行方法s</span><br><span class="line"> */</span><br><span class="line">i = ps.executeUpdate();</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">JdbcUtil.closeResource(null, ps, conn);</span><br><span class="line">&#125;</span><br><span class="line">return i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 按主键查询</span><br><span class="line"> * </span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public Emp selectByEmpno(int empno) &#123;</span><br><span class="line"></span><br><span class="line">Connection conn = JdbcUtil.findConnection();</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line">ResultSet rs = null;</span><br><span class="line">Emp emp = null;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">String sql = &quot;select * from EMP where empno = ?&quot;;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">ps.setInt(1, empno);</span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line">if (rs.next()) &#123;</span><br><span class="line">empno = rs.getInt(&quot;empno&quot;);</span><br><span class="line">String ename = rs.getString(&quot;ename&quot;);</span><br><span class="line">String job = rs.getString(&quot;job&quot;);</span><br><span class="line"></span><br><span class="line">emp = new Emp();</span><br><span class="line">emp.setEmpno(empno);</span><br><span class="line">emp.setEname(ename);</span><br><span class="line">emp.setJob(job);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">JdbcUtil.closeResource(rs, ps, conn);</span><br><span class="line">&#125;</span><br><span class="line">return emp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 查询所有</span><br><span class="line"> * </span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public List&lt;Emp&gt; selectAll() &#123;</span><br><span class="line"></span><br><span class="line">Connection conn = JdbcUtil.findConnection();</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line">ResultSet rs = null;</span><br><span class="line">List&lt;Emp&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">String sql = &quot;select * from EMP&quot;;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line">while (rs.next()) &#123;</span><br><span class="line">int empno = rs.getInt(&quot;empno&quot;);</span><br><span class="line">String ename = rs.getString(&quot;ename&quot;);</span><br><span class="line">String job = rs.getString(&quot;job&quot;);</span><br><span class="line"></span><br><span class="line">Emp emp = new Emp();</span><br><span class="line">emp.setEmpno(empno);</span><br><span class="line">emp.setEname(ename);</span><br><span class="line">emp.setJob(job);</span><br><span class="line"></span><br><span class="line">list.add(emp);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">JdbcUtil.closeResource(rs, ps, conn);</span><br><span class="line">&#125;</span><br><span class="line">return list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * limit查询</span><br><span class="line"> * </span><br><span class="line"> * @param firstIndex</span><br><span class="line"> * @param maxResult</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public List&lt;Emp&gt; selectByPage(int firstIndex, int maxResult) &#123;</span><br><span class="line"></span><br><span class="line">Connection conn = JdbcUtil.findConnection();</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line">ResultSet rs = null;</span><br><span class="line">List&lt;Emp&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">String sql = &quot;select * from EMP limit ?,?&quot;;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">ps.setInt(1, firstIndex);</span><br><span class="line">ps.setInt(2, maxResult);</span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line">while (rs.next()) &#123;</span><br><span class="line">int empno = rs.getInt(&quot;empno&quot;);</span><br><span class="line">String ename = rs.getString(&quot;ename&quot;);</span><br><span class="line">String job = rs.getString(&quot;job&quot;);</span><br><span class="line"></span><br><span class="line">Emp emp = new Emp();</span><br><span class="line">emp.setEmpno(empno);</span><br><span class="line">emp.setEname(ename);</span><br><span class="line">emp.setJob(job);</span><br><span class="line"></span><br><span class="line">list.add(emp);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">JdbcUtil.closeResource(rs, ps, conn);</span><br><span class="line">&#125;</span><br><span class="line">return list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-JDBC多表关联查询"><a href="#二-JDBC多表关联查询" class="headerlink" title="二.JDBC多表关联查询"></a>二.JDBC多表关联查询</h4><p>如进行以下查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM emp LEFT JOIN dept </span><br><span class="line">ON emp.`deptno` = dept.`deptno`</span><br><span class="line">WHERE emp.`empno` = 7369;</span><br></pre></td></tr></table></figure><p>Emp模型类如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Emp &#123;</span><br><span class="line"></span><br><span class="line">private Integer empno;</span><br><span class="line">private String ename;</span><br><span class="line">private String job;</span><br><span class="line">private Integer mgr;</span><br><span class="line">private Double sal;</span><br><span class="line">private Double comm;</span><br><span class="line">private Integer deptno;</span><br><span class="line">private Date hiredate;</span><br><span class="line">//多对一</span><br><span class="line">//重点：类之间的关联关系 </span><br><span class="line">private Dept dept;</span><br><span class="line">//省略setter和getter方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dept模型类如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Dept &#123;</span><br><span class="line"></span><br><span class="line">private Integer deptno;</span><br><span class="line">private String dname;</span><br><span class="line">private String loc;</span><br><span class="line"></span><br><span class="line">//一对多</span><br><span class="line">private Set&lt;Emp&gt; set;</span><br><span class="line">//省略setter和getter方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmpDao(Data Access Object) 数据访问对象如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public Emp selectByJoin(int empno) &#123;</span><br><span class="line"></span><br><span class="line">Connection conn = JdbcUtil.findConnection();</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line">ResultSet rs = null;</span><br><span class="line">String sql = &quot;SELECT * FROM emp LEFT JOIN dept ON emp.deptno = dept.deptno WHERE emp.empno = ?&quot;;</span><br><span class="line">try &#123;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">ps.setInt(1, empno);</span><br><span class="line">//得到结果集</span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line">while(rs.next())&#123;</span><br><span class="line">String ename = rs.getString(&quot;ename&quot;);</span><br><span class="line">String job = rs.getString(&quot;job&quot;);</span><br><span class="line">//封装emp对像</span><br><span class="line">Emp emp = new Emp();</span><br><span class="line">emp.setEmpno(empno);</span><br><span class="line">emp.setJob(job);</span><br><span class="line">emp.setEname(ename);</span><br><span class="line"></span><br><span class="line">//封装dept对像</span><br><span class="line">int deptno = rs.getInt(&quot;deptno&quot;);</span><br><span class="line">String dname = rs.getString(&quot;dname&quot;);</span><br><span class="line">String loc = rs.getString(&quot;loc&quot;);</span><br><span class="line">Dept dept = new Dept();</span><br><span class="line">dept.setDeptno(deptno);</span><br><span class="line">dept.setDname(dname);</span><br><span class="line">dept.setLoc(loc);</span><br><span class="line"></span><br><span class="line">//把dept封装到emp中</span><br><span class="line">emp.setDept(dept);</span><br><span class="line"></span><br><span class="line">return emp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">JdbcUtil.closeResource(rs, ps, conn);</span><br><span class="line">&#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单元测试：</p><p>略</p><h4 id="三-数据库事务-重点"><a href="#三-数据库事务-重点" class="headerlink" title="三. 数据库事务(重点)"></a>三. 数据库事务(重点)</h4><blockquote><p>一组要么同时执行成功，要么同时执行失败的SQL语句。是数据库操作的一个执行单元。</p></blockquote><h5 id="1-数据库事务讲解"><a href="#1-数据库事务讲解" class="headerlink" title="1 数据库事务讲解"></a>1 数据库事务讲解</h5><p><strong>事务开始于</strong></p><ul><li>连接到数据库上，并执行一条DML语句insert、update或delete</li><li>前一个事务结束后，又输入了另一条DML语句</li></ul><p><strong>事务结束于</strong></p><ul><li>执行commit或rollback语句。</li><li>执行一条DDL语句，例如create table语句，在这种情况下，会自动执行commit语句。</li><li>执行一条DDL语句，例如grant语句，在这种情况下，会自动执行commit。</li><li>断开与数据库的连接</li><li>执行了一条DML语句，该语句却失败了，在这种情况中，会为这个无效的DML语句执行rollback语句。</li></ul><h5 id="2-事务的四大特点（ACID）（面试经常问）"><a href="#2-事务的四大特点（ACID）（面试经常问）" class="headerlink" title="2 事务的四大特点（ACID）（面试经常问）"></a>2 事务的四大特点（ACID）（面试经常问）</h5><ul><li><strong>atomicity(原子性)</strong></li></ul><p>　　　　表示一个事务内的所有操作是一个整体，要么全部成功，要么全部失败</p><ul><li><strong>consistency(一致性)</strong></li></ul><p>　　　　表示一个事务内有一个操作失败时，所有的更改过的数据都必须回滚到修改前状态</p><ul><li><strong>isolation(隔离性)（重点中重点）</strong></li></ul><p>　　　　事务查看数据时数据所处的状态，要么是另一并发事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看中间状态的数据。</p><ul><li><strong>durability(持久性)</strong></li></ul><p>　　　　持久性事务完成之后，它对于系统的影响是永久性的（一旦保存在数据库中的数据，就是永久性数据）。</p><h5 id="3-事务隔离级别-对事务隔离性的描述"><a href="#3-事务隔离级别-对事务隔离性的描述" class="headerlink" title="3 事务隔离级别(对事务隔离性的描述)"></a>3 事务隔离级别(对事务隔离性的描述)</h5><p>　　SQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。==低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。==</p><p><strong>以下事务隔离级别由低到高：</strong></p><p><strong>Read Uncommitted</strong>（读取未提交内容)</p><p>​       在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为<strong>脏读（Dirty Read）</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">T1读取某一第记录</span><br><span class="line">T2事务在更新该条记录，没有提交</span><br><span class="line">没提交的数据被T1事务读取到了，该数据称为脏数据。</span><br><span class="line">原因：当t2回滚事务以后，t1读取到的数据就是脏数据</span><br></pre></td></tr></table></figure><p><strong>Read Committed</strong>（读取提交内容，屏蔽了脏数据读取的可能，行级锁）</p><p>​       这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别<br>也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">T1事务读取某一条记录，并已读出数据</span><br><span class="line">T2事务在更新该条记录，并且提交了。</span><br><span class="line">T1事务又去读取该条记录，发现和原来记录不相符，</span><br><span class="line">这种情况叫不可重复读</span><br></pre></td></tr></table></figure><p><strong>Repeatable Read</strong>可重读（虚读或幻读，但屏蔽了不可重复读）</p><p>​       这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读（Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">T1事务读某个范围内多条记录时，</span><br><span class="line">T2事务介入，增加或删除该范围内的记录</span><br><span class="line">T1事务再次读取该范围内记录时，发现和之前读的记录数不一致，这就是幻读</span><br></pre></td></tr></table></figure><p><strong>Serializable</strong> 可串行化（无并发性可言，表级锁）<br>​       这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p><p>​       这四种隔离级别采取不同的锁类型来实现，若读取的是同一个数据的话，就容易发生问题。</p><p><strong>例如：</strong></p><p>​       　　脏读(Drity Read)：某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事务所读取的数据就会是不正确的。</p><p>​        　  不可重复读(Non-repeatableread):在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。</p><p>​        　  幻读(Phantom Read):在一个事务的两次查询中数据笔数不一致，例如有一个事务查询了几列(Row)数据，而另一个事务却在此时插入了新的几列数据，先前的事务在接下来的查询中，就会发现有几列数据是它先前所没有的</p><p><strong>==JDBC事务隔离级别的设置==</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">connection.setTransactionIsolation(事务隔离级别)</span><br><span class="line">事务隔离级别，请使用以下常量</span><br><span class="line"> Connection.TRANSACTION_READ_UNCOMMITTED</span><br><span class="line"> Connection.TRANSACTION_READ_COMMITTED</span><br><span class="line"> Connection.TRANSACTION_REPEATABLE_READ</span><br><span class="line"> Connection.TRANSACTION_SERIALIZABLE</span><br></pre></td></tr></table></figure><h4 id="四-JDBC事务现实"><a href="#四-JDBC事务现实" class="headerlink" title="四. JDBC事务现实"></a>四. JDBC事务现实</h4><p><strong>1.原理</strong></p><p>如果JDBC连接处于<em>自动提交</em>模式，默认情况下，则每个SQL语句在完成后都会提交到数据库。</p><p>事务使您能够控制是否和何时更改应用于数据库。它将单个SQL语句或一组SQL语句视为一个逻辑单元，如果任何语句失败，则整个事务将失败。</p><p>要启用手动事务支持，而不是JDBC驱动程序默认使用的<em>自动提交</em>模式，请使用Connection对象的<strong>setAutoCommit（）</strong>方法。如果将boolean false传递给setAutoCommit（），则关闭自动提交。我们可以传递一个布尔值true来重新打开它。</p><p><strong>2.事务的提交和回滚</strong></p><p>完成更改后，我们要提交更改，然后在连接对象上调用<strong>commit（）</strong>方法，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn.commit( );</span><br></pre></td></tr></table></figure><p>否则，要使用连接名为conn的数据库回滚更新，请使用以下代码 -</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn.rollback( );</span><br></pre></td></tr></table></figure><p>代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   <span class="comment">//关闭事务自动提交</span></span><br><span class="line">   conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">   Statement st = conn.createStatement();</span><br><span class="line">   </span><br><span class="line">   String SQL = <span class="string">"INSERT INTO Emp（empno,ename,job） VALUES (8000,'张三','CLERK')"</span>;</span><br><span class="line">    <span class="comment">//执行插入，这时并没真正提交到数据库中</span></span><br><span class="line">   st.executeUpdate(SQL);  </span><br><span class="line">    </span><br><span class="line">   String SQL2 = <span class="string">"INSERT INTO Emp（empno,ename,job） VALUES (8001,'李四','CLERK')"</span>;</span><br><span class="line">   st.executeUpdate(SQL2);</span><br><span class="line">   <span class="comment">//如果没有异常抛出，提交事务</span></span><br><span class="line">   conn.commit();</span><br><span class="line">&#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">   <span class="comment">//如果有异常招出，则回滚事务</span></span><br><span class="line">   conn.rollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3 使用 Savepoints保存点</strong></p><p>新的JDBC 3.0 Savepoint接口为您提供了额外的事务控制。</p><p>设置保存点时，可以在事务中定义逻辑回滚点。如果通过保存点发生错误，则可以使用回滚方法来撤消所有更改或仅保存在保存点之前所做的更改，==即保存点前的SQL代码要提交，保存点后的SQL代码要回滚==。</p><p>Connection对象有两种新的方法来帮助您管理保存点 -</p><ul><li><strong>setSavepoint（String savepointName）：</strong>定义新的保存点。它还返回一个Savepoint对象。</li><li><strong>releaseSavepoint（Savepoint savepointName）：</strong>删除保存点。请注意，它需要一个Savepoint对象作为参数。此对象通常是由setSavepoint（）方法生成的保存点。</li></ul><p>代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//关闭事务自动提交</span></span><br><span class="line">   conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">   Statement stmt = conn.createStatement();</span><br><span class="line">  </span><br><span class="line">   String SQL = <span class="string">"INSERT INTO Emp（empno,ename,job） VALUES (8000,'张三','CLERK')"</span>;</span><br><span class="line">   <span class="comment">//执行插入操作，这时事务并没提交</span></span><br><span class="line">   stmt.executeUpdate(SQL);  </span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">   <span class="comment">//设置一个保存点</span></span><br><span class="line">   Savepoint savepoint1 = conn.setSavepoint(<span class="string">"Savepoint1"</span>); </span><br><span class="line">    </span><br><span class="line">   <span class="comment">//System.out.print(1/0)测试保存点</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   String SQL2 = <span class="string">"INSERT INTO Emp（empno,ename,job） VALUES (8001,'李四','CLERK')"</span>;</span><br><span class="line">   stmt.executeUpdate(SQL2);</span><br><span class="line">   <span class="comment">//没有异常抛出，则提交事务，数据持久化到数据库中</span></span><br><span class="line">   conn.commit();</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">   <span class="comment">// 如果有异常抛出，则回滚到保存点</span></span><br><span class="line">   conn.rollback(savepoint1);</span><br><span class="line">   <span class="comment">//在此处要执行提交操作（关键操作）</span></span><br><span class="line">   conn.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  1、要取消掉JDBC的自动提交：void setAutoCommit(boolean autoCommit)</p><p>  2、执行各个SQL语句，加入到批处理之中</p><p>  3、如果所有语句执行成功，则提交事务 commit()；如果出现了错误，则回滚：rollback()</p><h4 id="五-JDBC批处理操作"><a href="#五-JDBC批处理操作" class="headerlink" title="五. JDBC批处理操作"></a>五. JDBC批处理操作</h4><p><strong>1.原理</strong></p><p>批量处理允许您将相关的SQL语句分组到批处理中，并通过对数据库的一次调用提交它们。</p><p>当您一次向数据库发送多个SQL语句时，可以减少连接数据库的开销，从而提高性能。</p><h5 id="2-使用Statement对象进行批处理操作"><a href="#2-使用Statement对象进行批处理操作" class="headerlink" title="2.使用Statement对象进行批处理操作"></a>2.使用Statement对象进行批处理操作</h5><p>以下是使用语句对象的批处理的典型步骤序列</p><ul><li>使用<em>createStatement（）</em>方法创建Statement对象。</li><li>使用<em>setAutoCommit（）</em>将auto-commit设置为false 。</li><li>使用<em>addBatch（）</em>方法在创建的语句对象上添加您喜欢的SQL语句到批处理中。</li><li>在创建的语句对象上使用<em>executeBatch（）</em>方法执行所有SQL语句。</li><li>最后，使用<em>commit（）</em>方法提交所有更改。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 打开一次会话，可以处理批量sql，减轻数据库开销</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public void insertBatchByStatement() &#123;</span><br><span class="line">Connection conn = JdbcUtil.findConnection();</span><br><span class="line">Statement st = null;</span><br><span class="line">try &#123;</span><br><span class="line">conn.setAutoCommit(false);</span><br><span class="line">st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">String sql = &quot;insert into EMP (empno,ename,job) values (1111,&apos;张三&apos;,&apos;CLERK&apos;)&quot;;</span><br><span class="line">String sql2 = &quot;insert into EMP (empno,ename,job) values (1112,&apos;李四&apos;,&apos;CLERK&apos;)&quot;;</span><br><span class="line">// 添加批处理</span><br><span class="line">st.addBatch(sql);</span><br><span class="line">st.addBatch(sql2);</span><br><span class="line"></span><br><span class="line">// 执行批处理</span><br><span class="line">st.executeBatch();</span><br><span class="line">conn.commit();</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">try &#123;</span><br><span class="line">conn.rollback();</span><br><span class="line">&#125; catch (SQLException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">JdbcUtil.closeResource(null, st, conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.PrepareStatement对象进行批处理</strong></p><ul><li>使用占位符创建SQL语句。</li><li>使用<em>prepareStatement（）</em> 方法创建PrepareStatement对象。</li><li>使用<em>setAutoCommit（）</em>将auto-commit设置为false 。</li><li>使用<em>addBatch（）</em>方法在创建的语句对象上添加您喜欢的SQL语句到批处理中。</li><li>在创建的语句对象上使用<em>executeBatch（）</em>方法执行所有SQL语句。</li><li>最后，使用<em>commit（）</em>方法提交所有更改。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 一次连接，一次会话，进行批量处理</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public void insertBatchByPreparedStatement() &#123;</span><br><span class="line"></span><br><span class="line">Connection conn = JdbcUtil.findConnection();</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">conn.setAutoCommit(false);</span><br><span class="line"></span><br><span class="line">String sql = &quot;insert into emp(empno,ename,job) values (?,?,?)&quot;;</span><br><span class="line"></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">ps.setInt(1, 1113);</span><br><span class="line">ps.setString(2, &quot;王五&quot;);</span><br><span class="line">ps.setString(3, &quot;CLERK&quot;);</span><br><span class="line">//添加批处理,和Statement不一样，不需要参数该sql</span><br><span class="line">ps.addBatch();</span><br><span class="line"></span><br><span class="line">ps.setInt(1, 8000);</span><br><span class="line">ps.setString(2, &quot;赵六&quot;);</span><br><span class="line">ps.setString(3, &quot;CLERK&quot;);</span><br><span class="line">//添加批处理</span><br><span class="line">ps.addBatch();</span><br><span class="line"></span><br><span class="line">//执行批处理</span><br><span class="line">ps.executeBatch();</span><br><span class="line">//提交事务</span><br><span class="line">conn.commit();</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">try &#123;</span><br><span class="line">conn.rollback();</span><br><span class="line">&#125; catch (SQLException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125; finally&#123;</span><br><span class="line">JdbcUtil.closeResource(null, ps, conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="六-JDBC操作二进制数据"><a href="#六-JDBC操作二进制数据" class="headerlink" title="六. JDBC操作二进制数据"></a>六. JDBC操作二进制数据</h4><p>1.<strong>原理</strong></p><p>PreparedStatement对象可以使用输入和输出流来提供参数数据。这使您可以将整个文件放入可以保存大值的数据库列，例如CLOB和BLOB数据类型。</p><p>有以下方法可用于流式传输数据 -</p><ul><li><strong>setAsciiStream（）：</strong>此方法用于提供大的ASCII值。</li><li><strong>setCharacterStream（）：</strong>此方法用于提供大型UNICODE值。</li><li><strong>setBinaryStream（）：</strong>此方法用于提供较大的二进制值。</li></ul><p><strong>setXXXStream（）</strong>方法除了参数占位符之外还需要额外的参数，文件大小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">二进制：</span><br><span class="line">blob :65535约等于64KB</span><br><span class="line">longBlob：约4G</span><br><span class="line">文本：</span><br><span class="line">text:65535约等于64KB</span><br><span class="line">longText:约4G</span><br></pre></td></tr></table></figure><p><strong>2.把图片或大文本保存到数据库字段中（一般不推荐这么做）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 保存blob数据</span><br><span class="line"> * </span><br><span class="line"> * @throws SQLException</span><br><span class="line"> * @throws FileNotFoundException</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void insertImg() throws SQLException, FileNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">Connection connection = JdbcUtil.findConnection();</span><br><span class="line"></span><br><span class="line">String sql = &quot;insert into Emp(empno,ename,job,img) values(?,?,?,?)&quot;;</span><br><span class="line">PreparedStatement ps = connection.prepareStatement(sql);</span><br><span class="line">ps.setString(1, &quot;8000&quot;);</span><br><span class="line">ps.setString(2, &quot;张三&quot;);</span><br><span class="line">ps.setString(3, &quot;CLERK&quot;);</span><br><span class="line"></span><br><span class="line">// 绑定二进制数据,使用setBinaryStream或setBlob方法</span><br><span class="line">File file = new File(&quot;d:/001.jpg&quot;);</span><br><span class="line">ps.setBinaryStream(3, new FileInputStream(file), file.length());</span><br><span class="line"></span><br><span class="line">ps.execute();</span><br><span class="line"></span><br><span class="line">//关闭资源略</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.读取二进制或大文本数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 读取blob类型数据</span><br><span class="line"> * </span><br><span class="line"> * @throws SQLException</span><br><span class="line"> * @throws IOException</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void selectImg() throws SQLException, IOException &#123;</span><br><span class="line"></span><br><span class="line">Connection connection = JdbcUtil.findConnection();</span><br><span class="line"></span><br><span class="line">PreparedStatement ps = connection.prepareStatement(&quot;select img from Emp where empno = 8000&quot;);</span><br><span class="line"></span><br><span class="line">ResultSet rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line">rs.next();</span><br><span class="line"></span><br><span class="line">//结果集对像中获取大数据类型</span><br><span class="line">InputStream is = rs.getBinaryStream(&quot;img&quot;);</span><br><span class="line">//写入本地磁盘</span><br><span class="line">OutputStream os = new FileOutputStream(&quot;d:/2.jpg&quot;);</span><br><span class="line">int i = 0;</span><br><span class="line">while ((i = is.read()) != -1) &#123;</span><br><span class="line">os.write(i);</span><br><span class="line">&#125;</span><br><span class="line">//关闭流</span><br><span class="line">os.close();</span><br><span class="line"></span><br><span class="line">//关闭资源略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="作业题"><a href="#作业题" class="headerlink" title="作业题"></a>作业题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、实现一个学生管理系统，要求实现增删改查，基于控制台实现即可</span><br><span class="line">   要求可以对学生信息进行添加、修改、删除、查询的功能</span><br></pre></td></tr></table></figure><p>#### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JDBC高级使用和数据库事务&quot;&gt;&lt;a href=&quot;#JDBC高级使用和数据库事务&quot; class=&quot;headerlink&quot; title=&quot;JDBC高级使用和数据库事务&quot;&gt;&lt;/a&gt;JDBC高级使用和数据库事务&lt;/h3&gt;&lt;h4 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8AServlet%E5%85%A5%E9%97%A8/"/>
    <id>http://kongxianghe.top/2018/10/23/Tomcat服务器及Servlet入门/</id>
    <published>2018-10-23T14:06:03.466Z</published>
    <updated>2018-07-09T06:15:58.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tomcat服务器及Servlet入门"><a href="#Tomcat服务器及Servlet入门" class="headerlink" title="Tomcat服务器及Servlet入门"></a>Tomcat服务器及Servlet入门</h2><h4 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1.web服务器简介</span><br><span class="line">2.B/S架构和C/S架构</span><br><span class="line">3.tomcat服务器搭建（重点）</span><br><span class="line">tomcat服务器介绍</span><br><span class="line">tomcat服务器安装</span><br><span class="line">tomcat服务器目录介绍</span><br><span class="line">tomcat服务器启动</span><br><span class="line">tomcat服务器的访问</span><br><span class="line">4.eclipse集成tomcat（重点）</span><br><span class="line">5.javaWeb项目创建及结构（重点）</span><br><span class="line">javaWeb项目创建</span><br><span class="line">javaWeb项目结构讲解</span><br><span class="line">javaWeb中的jar包加载</span><br><span class="line">web.xml文件详解</span><br><span class="line">6.HTTP协议简介</span><br><span class="line">HTTP概念</span><br><span class="line">HTTP特点</span><br><span class="line">HTTP通信</span><br><span class="line">HTTP请求</span><br><span class="line">HTTP响应</span><br><span class="line">7.Servlet简介（重点）</span><br><span class="line">Servlet概念</span><br><span class="line">Servlet基本使用</span><br><span class="line">ServletAPI</span><br><span class="line">Servlet的三种创建方式</span><br><span class="line">Servlet的二种配置方式</span><br><span class="line">8.Servlet的生命周期（重点）</span><br><span class="line">概念</span><br><span class="line">生命周期四个阶段</span><br><span class="line">生命周期代码实例</span><br><span class="line">9.Servlet获到页面传参（重点）</span><br><span class="line">页面表单</span><br><span class="line">Servlet获取参数</span><br><span class="line">get请求和post请求异同</span><br><span class="line">中文乱码解决</span><br><span class="line"></span><br><span class="line">10.作业</span><br></pre></td></tr></table></figure><p>####一.web服务器简介</p><p>Web服务器是运行及发布Web应用的容器，只有将开发的Web项目放置到该容器中，才能使网络中的所有用户通过浏览器进行访问。开发Java Web应用所采用的服务器主要是与JSP/Servlet兼容的Web服务器，比较常用的有Tomcat、Resin、JBoss、WebSphere 和 WebLogic 等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tomcat 服务器</span><br><span class="line">　　目前最为流行的Tomcat服务器是Apache-Jarkarta开源项目中的一个子项目，是一个小型、轻量级的支持JSP和Servlet 技术的Web服务器，也是初学者学习开发JSP应用的首选</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Resin 服务器</span><br><span class="line">　　Resin是Caucho公司的产品，是一个非常流行的支持Servlet和JSP的服务器，速度非常快。Resin本身包含了一个支持HTML的Web服务器，这使它不仅可以显示动态内容，而且显示静态内容的能力也毫不逊色，因此许多网站都是使用Resin服务器构建</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JBoss服务器(通用动web,但不包含servlet和jsp等jar)</span><br><span class="line">　　JBoss是一个种遵从JavaEE规范的、开放源代码的、纯Java的EJB服务器，对于J2EE有很好的支持。JBoss采用JML API实现软件模块的集成与管理，其核心服务又是提供EJB服务器，不包含Servlet和JSP的Web容器，不过它可以和Tomcat完美结合</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WebSphere 服务器</span><br><span class="line">　　WebSphere是IBM公司的产品，可进一步细分为 WebSphere Performance Pack、Cache Manager 和WebSphere Application Server等系列，其中WebSphere Application Server 是基于Java 的应用环境，可以运行于 Sun Solaris、Windows NT 等多种操作系统平台，用于建立、部署和管理Internet和Intranet Web应用程序。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WebLogic 服务器(功能强大)</span><br><span class="line">　　WebLogic 是BEA公司的产品（现在已经被Oracle收购），可进一步细分为 WebLogic Server、WebLogic Enterprise 和 WebLogic Portal 等系列，其中 WebLogic Server 的功能特别强大。WebLogic 支持企业级的、多层次的和完全分布式的Web应用，并且服务器的配置简单、界面友好。对于那些正在寻求能够提供Java平台所拥有的一切应用服务器的用户来说，WebLogic是一个十分理想的选择</span><br></pre></td></tr></table></figure><h4 id="二-服务器架构"><a href="#二-服务器架构" class="headerlink" title="二.服务器架构"></a>二.服务器架构</h4><p><strong>B/S 与C/S模式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">B/S:Browser/Server或浏览器/服务器模式</span><br><span class="line">优点是用户使用简单只要有浏览器和网络即可</span><br><span class="line">常见的程序：淘宝网、京东网等</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C/S:Client/Server或客户端/服务器模式</span><br><span class="line">C/S的优点是能充分发挥客户端PC的处理能力</span><br><span class="line">缺点是对用户的电脑配置要求较高</span><br><span class="line">常见的CS程序：LOL、穿越火线、QQ</span><br></pre></td></tr></table></figure><p>####三.tomcat服务器搭建（重点）</p><p><strong>1.tomcat服务器介绍</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</span><br><span class="line">Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访</span><br><span class="line">问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</span><br><span class="line">诀窍是，当配置正确时，Apache 为HTML页面服务，而Tomcat 实际上运行JSP 页面和Servlet。另外，Tomcat和IIS等Web服务器一样，具有处理HTML页面的功能，另外它还是一个Servlet和JSP容器，独立的Servlet容器是Tomcat的默认模式。不过，Tomcat处理静态HTML的能力不如Apache服务器。目前Tomcat最新版本为9.0。</span><br></pre></td></tr></table></figure><p><strong>2.tomcat服务器安装</strong></p><p>tomcat压缩版,安装特别方便,只需要右键解压即可!</p><p>安装步骤如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 下载Tomcat，如果网速比较慢，可以在网盘下载</span><br><span class="line">2. 解压到一个没有特殊符号的目录中（一般纯英文即可）</span><br><span class="line">3. 进入到解压的目录下找到bin\startup.bat双击启动即可</span><br></pre></td></tr></table></figure><p>注意事项:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不建议将服务器软件放在磁盘层次很多的文件夹中!</span><br><span class="line">不建议放在中文路径下!</span><br><span class="line">tomcat安装需要配置JAVA_HOME环境变量</span><br><span class="line">第一次启动服务器建议使用命名行打开,因为可以提示错误信息!</span><br></pre></td></tr></table></figure><p><strong>3.tomcat服务器目录介绍</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1、bin：该目录下存放的是二进制可执行文件，如果是安装版，那么这个目录下会有两个exe文件：tomcat8.exe、tomcat8w.exe，前者是在控制台下启动Tomcat，后者是弹出UGI窗口启动Tomcat；如果是解压版，那么会有startup.bat和shutdown.bat文件，startup.bat用来启动Tomcat，但需要JDK的配置，shutdawn.bat用来停止Tomcat；</span><br><span class="line"></span><br><span class="line">2、conf：这是一个非常非常重要的目录，这个目录下有四个最为重要的文件：</span><br><span class="line">server.xml：配置整个服务器信息。例如修改端口号，添加虚拟主机等；</span><br><span class="line">tomcatusers.xml：存储tomcat用户的文件，这里保存的是tomcat的用户名及密码，以及用户的角色信息。可以按着该文件中的注释信息添加tomcat用户，然后就可以在Tomcat主页中进入Tomcat Manager页面了；</span><br><span class="line">web.xml：部署描述符文件，这个文件中注册了很多MIME类型，即文档类型。这些MIME类型是客户端与服务器之间说明文档类型的，如用户请求一个html网页，那么服务器还会告诉客户端浏览器响应的文档是text/html类型的，这就是一个MIME类型。客户端浏览器通过这个MIME类型就知道如何处理它了。当然是在浏览器中显示这个html文件了。但如果服务器响应的是一个exe文件，那么浏览器就不可能显示它，而是应该弹出下载窗口才对。</span><br><span class="line">MIME就是用来说明文档的内容是什么类型的,通过服务器响应给客户端，让客户端使用应有的方式去处理</span><br><span class="line">context.xml：对所有应用的统一配置，通常我们不会去配置它。</span><br><span class="line"></span><br><span class="line">3、lib：Tomcat的类库，里面是一大堆jar文件。如果需要添加Tomcat依赖的jar文件，可以把它放到这个目录中，当然也可以把应用依赖的jar文件放到这个目录中，这个目录中的jar所有项目都可以共享之，但这样你的应用放到其他Tomcat下时就不能再共享这个目录下的Jar包了，所以建议只把Tomcat需要的Jar包放到这个目录下；</span><br><span class="line"></span><br><span class="line">4、logs：这个目录中都是日志文件，记录了Tomcat启动和关闭的信息，如果启动Tomcat时有错误，那么异常也会记录在日志文件中。</span><br><span class="line"></span><br><span class="line">5、temp：存放Tomcat的临时文件，这个目录下的东西可以在停止Tomcat后删除！</span><br><span class="line"></span><br><span class="line">6、webapps：存放web项目的目录，其中每个文件夹都是一个项目；如果这个目录下已经存在了目录，那么都是tomcat自带的项目。其中ROOT是一个特殊的项目，在地址栏中没有给出项目目录时，对应的就是ROOT项目。http://localhost:8080/examples，进入示例项目。其中examples就是项目名，即文件夹的名字。</span><br><span class="line"></span><br><span class="line">7、work：运行时生成的文件，最终运行的文件都在这里。通过webapps中的项目生成的！可以把这个目录下的内容删除，再次运行时会生再次生成work目录。当客户端用户访问一个JSP文件时，Tomcat会通过JSP生成Java文件，然后再编译Java文件生成class文件，生成的java和class文件都会存放到这个目录下。</span><br><span class="line"></span><br><span class="line">8、LICENSE：许可证。</span><br><span class="line"></span><br><span class="line">9、NOTICE：说明文件。</span><br></pre></td></tr></table></figure><p><strong>4.tomcat服务器启动</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tomcat安装文件/bin/startup.bat 启动程序</span><br></pre></td></tr></table></figure><p><strong>5.tomcat服务器的访问</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">打开浏览器,输入http://localhost:8080</span><br></pre></td></tr></table></figure><p>出下以下界面表示安装成功</p><p><img src="D:\JAVAEE教案\JAVAEE笔记\第9天 tomcat服务器使用及servlet入门\笔记\pic\3.png" alt="3.png"></p><h4 id="四-eclipse集成tomcat"><a href="#四-eclipse集成tomcat" class="headerlink" title="四.eclipse集成tomcat"></a>四.eclipse集成tomcat</h4><p><strong>1.打开Eclipse的window–&gt;Preferences—&gt;Server</strong></p><p><img src="D:\JAVAEE教案\JAVAEE笔记\第9天 tomcat服务器使用及servlet入门\笔记\pic\5.bmp" alt="6.bmp"></p><p><strong>2.点击add—&gt;选择对应的版本—&gt;Finish即可</strong></p><p><img src="D:\JAVAEE教案\JAVAEE笔记\第9天 tomcat服务器使用及servlet入门\笔记\pic\6.bmp" alt="6.bmp"></p><p><strong>3.然后选择右边的server—&gt;空白处右键new—&gt;server—&gt;Finish即可。</strong></p><p><img src="D:\JAVAEE教案\JAVAEE笔记\第9天 tomcat服务器使用及servlet入门\笔记\pic\7.bmp" alt="7.bmp"></p><p><strong>4.再右键新建的服务器点击open，按照图片进行修改保存即可</strong></p><p><img src="D:\JAVAEE教案\JAVAEE笔记\第9天 tomcat服务器使用及servlet入门\笔记\pic\8.bmp" alt="8.bmp"></p><p><strong>5.选中新建的服务器右键start即可启动</strong></p><h4 id="五-javaWeb项目创建及结构"><a href="#五-javaWeb项目创建及结构" class="headerlink" title="五.javaWeb项目创建及结构"></a>五.javaWeb项目创建及结构</h4><p><strong>1.javaWeb项目创建</strong></p><p><img src="D:\JAVAEE教案\JAVAEE笔记\第9天 tomcat服务器使用及servlet入门\笔记\pic\9.bmp" alt="9.bmp"></p><p><strong>2. javaweb项目结构讲解</strong></p><p><img src="D:\JAVAEE教案\JAVAEE笔记\第9天 tomcat服务器使用及servlet入门\笔记\pic\11.bmp" alt="2.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java web工程下的webapp或WebContent就是工程的发布文件夹，发布时会把该文件夹发布到tomcat的webapps里。</span><br><span class="line"></span><br><span class="line">开发时classes文件存放路径：</span><br><span class="line">buildpath：在eclipse中项目的右键java build path-source中指定工程中class文件的编译路径，一般为：test/build/classes。（test是工程名）</span><br><span class="line"></span><br><span class="line">发布时classes文件存放路径：</span><br><span class="line">发布到tomcat时（在eclipse里启动tomcat），src文件夹里的java文件经过编译后，会把.class文件放在WEB-INF文件夹里的classes文件夹中。</span><br><span class="line"></span><br><span class="line">有一些配置文件需要放到WEB-INF的classes文件夹下，所以，通常的做法是手动在工程的WEB-INF文件夹下建立classes文件夹。如果不在工程的WEB-INF下手动建立classes，发布到tomcat时tomcat里的WEB-INF中也会有classes文件夹。</span><br></pre></td></tr></table></figure><p><strong>3.javaWeb中的jar包加载</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">【Web App Libraries】 一般是指向web工程的WEB-INF/lib下的包(可以将包copy到此目录下,然后刷新工程,加入的包一般可以自动找到,如果找不到,右键Properties-&gt;Java Build Path-&gt;Libraries-&gt;Add JARs可以加入.</span><br><span class="line"></span><br><span class="line">如果引用了工程以外的jar，一般会在.classpath中添加&lt;classpathentry kind=&quot;lib&quot; path=&quot;xxx/xxx.jar&quot;/&gt;</span><br><span class="line">以此来表示引入该jar包</span><br><span class="line"></span><br><span class="line">而web-info/lib中的jar不会往.classpath文件中会添加</span><br><span class="line"></span><br><span class="line">编绎jar包的顺序：编译的时候先找classpath中的jar如果没有则找web-info/lib中的jar。</span><br><span class="line"></span><br><span class="line">web工程参照了很多文件，因此发布的时候要打成war包，使其变成单独的个体，放到web容器里。开发环境中eclipse会将工程打包放到tomcat下，进行关联。</span><br></pre></td></tr></table></figure><p><strong>4.web.xml文件详解</strong></p><p>Web 应用名称：提供GUI工具可能会用来标记这个特定的Web应用的一个名称，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;display-name&gt;Tomcat Example&lt;/display-name&gt;</span><br></pre></td></tr></table></figure><p>Web 应用描述：给出于此相关的说明性文本，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;desciption&gt;Tomcat Example servlets and JSP pages.&lt;/desciption&gt;</span><br></pre></td></tr></table></figure><p>上下文参数：声明应用范围内的初始化参数，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &lt;context-param&gt;</span><br><span class="line">      &lt;param-name&gt;参数名&lt;/para-name&gt;</span><br><span class="line">      &lt;param-value&gt;参数值&lt;/param-value&gt;</span><br><span class="line">      &lt;description&gt;参数描述&lt;/description&gt;</span><br><span class="line">  &lt;/context-param&gt;</span><br><span class="line">  </span><br><span class="line">注意：这是全局参数的获得方式，在servlet里面可以通过 getServletContext().getInitParameter(“context/param”)得到</span><br></pre></td></tr></table></figure><p>过滤器配置：将一个名字与一个实现javaxs.servlet.Filter接口的类相关联，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">       &lt;filter-name&gt;setCharacterEncoding&lt;/filter-name&gt;</span><br><span class="line">       &lt;filter-class&gt;com.myTest.setCharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">       &lt;init-param&gt;</span><br><span class="line">           &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">           &lt;param-value&gt;GB2312&lt;/param-value&gt;</span><br><span class="line">       &lt;/init-param&gt;</span><br><span class="line">   &lt;/filter&gt;</span><br><span class="line">   &lt;filter-mapping&gt;</span><br><span class="line">      &lt;filter-name&gt;setCharacterEncoding&lt;/filter-name&gt;</span><br><span class="line">      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure><p>监听器配置,如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;listener&gt;</span><br><span class="line">     &lt;listerner-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class="line"> &lt;/listener&gt;</span><br></pre></td></tr></table></figure><p>Servlet配置，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;servlet名称&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;servlet类全路径&lt;/servlet-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;参数名&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;参数值&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">　 &lt;load-on-startup&gt;指定当Web应用启动时，装载Servlet的次序&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;servlet名称&lt;/servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;映射路径&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>会话超时配置（单位为分钟），如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;session-config&gt;</span><br><span class="line">     &lt;session-timeout&gt;120&lt;/session-timeout&gt;</span><br><span class="line">&lt;/session-config&gt;</span><br></pre></td></tr></table></figure><p>MIME类型配置（手动设置扩展名为htm，标记为html文档），如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;mime-mapping&gt;</span><br><span class="line">      &lt;extension&gt;htm&lt;/extension&gt;</span><br><span class="line">      &lt;mime-type&gt;text/html&lt;/mime-type&gt;</span><br><span class="line">&lt;/mime-mapping&gt;</span><br></pre></td></tr></table></figure><p>指定欢迎文件页配置，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;welcome-file-list&gt;</span><br><span class="line">    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</span><br><span class="line">    &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;</span><br><span class="line">    &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;</span><br><span class="line">&lt;/welcome-file-list&gt;</span><br></pre></td></tr></table></figure><p>配置错误页面，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置了当系统发生404错误时，跳转到错误处理页面NotFound.jsp--&gt;</span><br><span class="line">&lt;error-page&gt;</span><br><span class="line">       &lt;error-code&gt;404&lt;/error-code&gt;</span><br><span class="line">       &lt;location&gt;/NotFound.jsp&lt;/location&gt;</span><br><span class="line">&lt;/error-page&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置了当系统发生java.lang.NullException（即空指针异常）时，跳转到错误处理页面error.jsp--&gt;</span><br><span class="line">&lt;error-page&gt;</span><br><span class="line">     &lt;exception-type&gt;java.lang.NullException&lt;/exception-type&gt;</span><br><span class="line">     &lt;location&gt;/error.jsp&lt;/location&gt;</span><br><span class="line">&lt;/error-page&gt;</span><br></pre></td></tr></table></figure><p>TLD配置（标签库配置），如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;taglib&gt;</span><br><span class="line">     &lt;taglib-uri&gt;标签库唯一访问标识(必须与标签库tld描述文件中的uri一致)&lt;/taglib-uri&gt;</span><br><span class="line">     &lt;taglib-location&gt;标签库tld描述文件本地路径(如/WEB-INF/mytag.tld)&lt;/taglib-location&gt;</span><br><span class="line"> &lt;/taglib&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">如果开发工具一直在报错,应该把&lt;taglib&gt; 放到 &lt;jsp-config&gt;中</span><br><span class="line"> &lt;jsp-config&gt;</span><br><span class="line">      &lt;taglib&gt;</span><br><span class="line">          &lt;taglib-uri&gt;http://jakarta.apache.org/tomcat/debug-taglib&lt;/taglib-uri&gt;</span><br><span class="line">          &lt;taglib-location&gt;/WEB-INF/pager-taglib.tld&lt;/taglib-location&gt;</span><br><span class="line">      &lt;/taglib&gt;</span><br><span class="line">  &lt;/jsp-config&gt;</span><br></pre></td></tr></table></figure><h4 id="六-HTTP协议简介"><a href="#六-HTTP协议简介" class="headerlink" title="六.HTTP协议简介"></a>六.HTTP协议简介</h4><p><strong>1.HTTP概念</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议,是一个基于请求与响应模式的、无状态的、应用层的协议，常基于TCP的连接方式。</span><br><span class="line">它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(NextGeneration of HTTP)的建议已经提出。</span><br></pre></td></tr></table></figure><p><strong>2.HTTP特点</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.支持客户/服务器模式。</span><br><span class="line">2.简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</span><br><span class="line">3.灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</span><br><span class="line">4.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</span><br><span class="line">5.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</span><br></pre></td></tr></table></figure><p><strong>3.HTTP通信过程（先请求，后响应）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">HTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤：</span><br><span class="line">1、 建立TCP连接</span><br><span class="line">在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建Internet，即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。HTTP是比TCP更高层次的应用层协议，根据规则，只有低层协议建立之后才能进行更高层协议的连接。因此，首先要建立TCP连接，一般TCP连接的端口号是80</span><br><span class="line">2、 浏览器向Web服务器发送请求命令</span><br><span class="line">一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令</span><br><span class="line">例如：GET/sample/hello.html HTTP/1.1</span><br><span class="line">3、 浏览器发送请求头信息</span><br><span class="line">浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。</span><br><span class="line">4、 Web服务器应答</span><br><span class="line">客户机向服务器发出请求后，服务器会客户机回送应答，</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">应答的第一部分是协议的版本号和应答状态码</span><br><span class="line">5、 Web服务器发送应答头信息</span><br><span class="line">正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。</span><br><span class="line">6、 Web服务器向浏览器发送数据</span><br><span class="line">Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据</span><br><span class="line">7、 Web服务器关闭TCP连接</span><br><span class="line">一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码 Connection:keep-alive</span><br><span class="line">TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽</span><br></pre></td></tr></table></figure><p><strong>4.HTTP请求</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当浏览器向Web服务器发出请求时，它向服务器传递了一个数据块，也就是请求信息，HTTP请求信息由3部分组成：</span><br><span class="line">1 请求方法URI协议/版本</span><br><span class="line">2 请求头(Request Header)</span><br><span class="line">3 请求正文</span><br></pre></td></tr></table></figure><p>下面是一个HTTP请求的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">GET/hello HTTP/1.1</span><br><span class="line"></span><br><span class="line">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Language:zh-CN,zh;q=0.8,en-GB;q=0.6,en;q=0.4</span><br><span class="line">Connection:Keep-Alive</span><br><span class="line">Host:localhost</span><br><span class="line">User-Agent:Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36</span><br><span class="line">Accept-Encoding:gzip, deflate, br </span><br><span class="line"></span><br><span class="line">name=zhangsan</span><br><span class="line"></span><br><span class="line">解析如下：</span><br><span class="line">1、请求方法 URI 协议/版本</span><br><span class="line">请求的第一行是“方法URL议/版本”：GET/hello HTTP/1.1</span><br><span class="line">以上代码中“GET”代表请求方法，“/hello”表示URI，“HTTP/1.1代表协议和协议的版本。</span><br><span class="line">根据HTTP标准，HTTP请求可以使用多种请求方法。例如：HTTP1.1支持7种请求方法：GET、POST、HEAD、OPTIONS、PUT、DELETE和TARCE。在Internet应用中，最常用的方法是GET和POST。</span><br><span class="line">URL完整地指定了要访问的网络资源，通常只要给出相对于服务器的根目录的相对目录即可，因此总是以“/”开头，最后，协议版本声明了通信过程中使用HTTP的版本。</span><br><span class="line">2、请求头(Request Header)</span><br><span class="line">请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。</span><br><span class="line">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Language:zh-CN,zh;q=0.8,en-GB;q=0.6,en;q=0.4</span><br><span class="line">Connection:Keep-Alive</span><br><span class="line">Host:localhost</span><br><span class="line">User-Agent:Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36</span><br><span class="line">Accept-Encoding:gzip, deflate, br</span><br><span class="line">3、请求正文</span><br><span class="line">请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。请求正文中可以包含客户提交的查询字符串信息：</span><br><span class="line">name=zhangsan</span><br></pre></td></tr></table></figure><p><strong>5.HTTP响应</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在接收和解释请求消息后，服务器返回一个HTTP响应消息。</span><br><span class="line">HTTP响应也是由三个部分组成，分别是：状态行、消息报头、响应正文</span><br></pre></td></tr></table></figure><p>其中状态行如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">状态行格式如下：</span><br><span class="line">HTTP-Version  Status-Code  Reason-Phrase  CRLF</span><br><span class="line"></span><br><span class="line">其中：</span><br><span class="line">HTTP-Version表示服务器HTTP协议的版本；</span><br><span class="line">Status-Code表示服务器发回的响应状态代码；</span><br><span class="line">Reason-Phrase表示状态代码的文本描述。</span><br><span class="line"></span><br><span class="line">状态代码有三位数字组成，第一个数字定义了响应的类别，且有五种可能取值：</span><br><span class="line">1xx：指示信息--表示请求已接收，继续处理</span><br><span class="line">2xx：成功--表示请求已被成功接收、理解、接受</span><br><span class="line">3xx：重定向--要完成请求必须进行更进一步的操作</span><br><span class="line">4xx：客户端错误--请求有语法错误或请求无法实现</span><br><span class="line">5xx：服务器端错误--服务器未能实现合法的请求</span><br><span class="line">常见状态代码、状态描述、说明：</span><br><span class="line">200 OK      //客户端请求成功（记住）</span><br><span class="line">400 Bad Request  //客户端请求有语法错误，不能被服务器所理解（记住）</span><br><span class="line">401 Unauthorized //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 </span><br><span class="line">403 Forbidden  //服务器收到请求，但是拒绝提供服务</span><br><span class="line">404 Not Found  //请求资源不存在，eg：输入了错误的URL（记住）</span><br><span class="line">500 Internal Server Error //服务器发生不可预期的错误（记住）</span><br><span class="line">503 Server Unavailable  //服务器当前不能处理客户端的请求，一段时间后可能恢复正常</span><br><span class="line">eg：HTTP/1.1 200 OK （CRLF）</span><br></pre></td></tr></table></figure><p>如访问<a href="http://www.1000phone.com/" target="_blank" rel="noopener">http://www.1000phone.com/</a></p><p><img src="D:\JAVAEE教案\JAVAEE笔记\第9天 tomcat服务器使用及servlet入门\笔记\pic\10.bmp" alt="10.bmp"></p><h4 id="七-Servlet简介"><a href="#七-Servlet简介" class="headerlink" title="七.Servlet简介"></a>七.Servlet简介</h4><p><strong>1.概念</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序，主要功能在于交互式地浏览和修改数据，生成动态Web内容</span><br><span class="line">Servlet运行于支持Java的应用服务器中。从实现上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。</span><br></pre></td></tr></table></figure><p><strong>2.Servlet的基本使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 在src创建package</span><br><span class="line">2. 选中刚刚创建的包，右键--&gt;New--&gt;Servlet</span><br><span class="line">3. 发布到tomcat容器中</span><br><span class="line">4. 浏览器输入网址访问：http://localhost:8080/项目名称/HelloServlet</span><br></pre></td></tr></table></figure><p>第一个Servlet代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *第一个Servlet程序</span><br><span class="line"> */</span><br><span class="line">@WebServlet(&quot;/HelloServlet&quot;)</span><br><span class="line">public class HelloServlet extends HttpServlet &#123;</span><br><span class="line">private static final long serialVersionUID = 1L;</span><br><span class="line">       </span><br><span class="line">    /**</span><br><span class="line">     * @构造函数</span><br><span class="line">     */</span><br><span class="line">    public HelloServlet() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  处理Get请求</span><br><span class="line"> */</span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// 响应内容到浏览器</span><br><span class="line">response.getWriter().print(&quot;Hello Word&quot;);;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 处理Post请求</span><br><span class="line"> */</span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.ServletAPI</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Servlet编程需要使用到javax.servlet 和 javax.servlet.http两个包下面的类和接口，在所有的类和接口中，javax.servlet.servlet 接口最为重要。所有的servlet程序都必须实现该接口或者继承实现了该接口的类。</span><br><span class="line"></span><br><span class="line">其中：</span><br><span class="line">javax.Servlet是父接口</span><br><span class="line">javax.GenericServlet是抽像类，实现了Servlet接口，该类没有实现http协议</span><br><span class="line">javax.HttpServlet是GenericServlet的子类，该类实现了Http协议，专门处理Http请求服务的</span><br><span class="line"></span><br><span class="line">常用的API</span><br><span class="line">javax.servlet.ServletConfig;</span><br><span class="line">javax.servlet.ServletException;</span><br><span class="line">javax.servlet.http.HttpServlet;</span><br><span class="line">javax.servlet.http.HttpServletRequest;</span><br><span class="line">javax.servlet.http.HttpServletResponse;</span><br><span class="line">javax.servlet.http.HttpSession;</span><br><span class="line">javax.servlet.http.Cookie;</span><br></pre></td></tr></table></figure><p>其中三个重要接口和类如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Servlet接口</span><br><span class="line">在ServletAPI中最重要的是Servlet接口，所有Servlet都会直接或间接的与该接口发生联系，或是直接实现该接口，或间接继承自实现了该接口的类。</span><br><span class="line">该接口包括以下五个方法：</span><br><span class="line"></span><br><span class="line">init(ServletConfig config)</span><br><span class="line">ServletConfig getServletConfig()</span><br><span class="line">service(ServletRequest req,ServletResponse res)</span><br><span class="line">String getServletInfo()</span><br><span class="line">destroy( )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GenericServlet抽象类</span><br><span class="line">它对Servlet接口中的部分方法（init和destroy）添加了实现，使得开发时只需要考虑针对service方法的业务实现即可。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HttpServlet类</span><br><span class="line">是继承GenericServlet的基础上进一步的扩展，</span><br><span class="line">扩展方法：</span><br><span class="line">public voidinit(ServletConfig config)，</span><br><span class="line">public void init()。他们有如下的关系： init（ServletConfig config）方法由tomcat自动调用，它读取web工程下的web.xml，将读取的信息打包传给此参数，此方法的参数同时将接收的信息传递给GenericServlet类中的成员变量config，同时调用init()。以后程序员想重写init方法可以选择init（ServletConfig config）或者init()，但是选择init（ServletConfig config）势必会覆盖此方法已实现的内容，没有为config变量赋值，此后若是调用getServletConfig（）方法返回config时会产生空指针异常的，所以想重写init（ServletConfig config）方法，必须在方法体中第一句写上 super.init（config），为了防止程序员忘记重写super.init（config）方法sun公司自动为用户生成一个public void init()的方法</span><br></pre></td></tr></table></figure><p><strong>4.Servlet的三种创建方式</strong></p><p>方式一：继承HttpServlet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Servlet implementation class HelloServlet</span><br><span class="line"> * 演示Servlet的第一种创建方式，继承HttpServlet.也是开发中推荐的</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">@WebServlet(&quot;/hs1&quot;)</span><br><span class="line">public class HelloServlet extends HttpServlet &#123;</span><br><span class="line">private static final long serialVersionUID = 1L;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">response.getWriter().print(&quot;我是Servlet创建的第一种方式&quot;);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二：实现接口Servlet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Servlet创建的第二种方式：实现接口Servlet</span><br><span class="line"> * */</span><br><span class="line">@WebServlet(&quot;/hs2&quot;)</span><br><span class="line">public class HelloServlet2 implements Servlet&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void destroy() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public ServletConfig getServletConfig() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String getServletInfo() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void init(ServletConfig arg0) throws ServletException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;OK&quot;);</span><br><span class="line">response.setContentType(&quot;text/html;charset=UTF-8&quot;);</span><br><span class="line">response.getWriter().println(&quot;我是第二种创建方式&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式三：继承GenericServlet类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Servlet的第三种创建方式：继承GenericServlet类*/</span><br><span class="line">@WebServlet(value=&quot;/hs3&quot;)</span><br><span class="line">public class HelloServlet3 extends GenericServlet&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;OK&quot;);</span><br><span class="line">response.setContentType(&quot;text/html;charset=UTF-8&quot;);</span><br><span class="line">response.getWriter().println(&quot;我是第三种创建方式&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.Servlet的二种配置方式</strong></p><p>方式一：注解式配置 Servlet3.0及以后支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Servlet implementation class HelloServlet</span><br><span class="line"> * 演示Servlet注解式配置</span><br><span class="line"> */</span><br><span class="line">@WebServlet(value=&quot;/hello&quot;,loadOnStartup=1)</span><br><span class="line">public class HelloServlet extends HttpServlet &#123;</span><br><span class="line">private static final long serialVersionUID = 1L;</span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">response.getWriter().print(&quot;OK&quot;);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二：web.xml配置 Servlet所有版本都支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Servlet implementation class HelloServlet</span><br><span class="line"> * 演示Servlet的web.xml配置</span><br><span class="line"> */</span><br><span class="line">public class HelloServlet extends HttpServlet &#123;</span><br><span class="line">private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">response.getWriter().print(&quot;OK&quot;);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml文件配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot; version=&quot;3.1&quot;&gt;</span><br><span class="line">  &lt;display-name&gt;Web_Day11&lt;/display-name&gt;</span><br><span class="line">  &lt;!--Servlet的第二种配置  --&gt;</span><br><span class="line">  &lt;!--Servlet配置  --&gt;</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">  &lt;!--名称  --&gt;</span><br><span class="line">    &lt;servlet-name&gt;hello2&lt;/servlet-name&gt;</span><br><span class="line">    &lt;!--Servlet的全称类名  --&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.qf.web.servlet.HelloServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;!--启动的优先级，数字越小越先起作用  --&gt;</span><br><span class="line">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br><span class="line">  &lt;!--映射配置  --&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">  &lt;!--名称  --&gt;</span><br><span class="line">    &lt;servlet-name&gt;hello2&lt;/servlet-name&gt;</span><br><span class="line">    &lt;!--资源的匹配规则：精确匹配  --&gt;</span><br><span class="line">    &lt;url-pattern&gt;/hello2&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br><span class="line">  &lt;welcome-file-list&gt;</span><br><span class="line">    &lt;welcome-file&gt;login.html&lt;/welcome-file&gt;</span><br><span class="line">  &lt;/welcome-file-list&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><h4 id="八-Servlet的生命周期"><a href="#八-Servlet的生命周期" class="headerlink" title="八.Servlet的生命周期"></a>八.Servlet的生命周期</h4><p><strong>1.概念</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">生命周期也就是生命历程，就像人都是从怀胎--&gt;出生--&gt;婴儿--&gt;儿童--&gt;少年--&gt;成年--&gt;中年--&gt;老年--&gt;死亡</span><br></pre></td></tr></table></figure><p><strong>2.生命周期的四个阶段</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">阶段一、实例化</span><br><span class="line">实例化阶段是Servlet生命周期中的第一步，由Servlet容器调用Servlet的构造器创建一个具体的Servlet对象的过程。而这个创建的时机可以是在容器收到针对这个组件的请求之后，即用了才创建；也可以在容器启动之后立刻创建实例，而不管此时Servlet是否使用的上。使用如下代码可以设置Servlet是否在服务器启动时就执行创建</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">阶段二、初始化</span><br><span class="line">Servlet在被加载实例化之后，必须要初始化它。在初始化阶段，init（）方法会被调用。这个方法在javax.servlet.Servlet接口中定义。其中，方法以一个ServletConfig类型的对象作为参数。ServletConfig对象由Servlet引擎负责创建，从中可以读取到事先在web.xml文件中通过&lt;init-param&gt;节点配置的多个name-value名值对。ServletConfig对象还可以让Servlet接受一个ServletContext对象。</span><br><span class="line">一般情况下，init方法不需要编写，因GenericServlet已经提供了init方法的实现，并且提供了getServletConfig方法来获得ServletConfig对象。</span><br><span class="line">注：init方法只被执行一次</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">阶段三、就绪/服务</span><br><span class="line">Servlet被初始化以后就处于能够响应请求的就绪状态。每个对Servlet的请求由一个ServletRequest对象代表，Servlet给客户端的响应由一个ServletResponse对象代表。当客户端有一个请求时，容器就会将请求与响应对象转给Servlet，以参数的形式传给service方法。service方法由javax.servlet.Servlet定义，由具体的Servlet实现</span><br><span class="line">HttpServlet将service方法拆分了。doGet和doPost</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">阶段四、销毁</span><br><span class="line">Servlet容器在销毁Servlet对象时会调用destroy方法来释放资源。通常情况下Servlet容器停止或者重新启动都会引起销毁Servlet对象的动作，但除此之外，Servlet容器也有自身管理Servlet对象的准则，整个生命周期并不需要人为进行干预</span><br></pre></td></tr></table></figure><p><strong>3.生命周期代码如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Servlet implementation class LifeServlet</span><br><span class="line"> * 演示Servlet的生命周期：</span><br><span class="line"> * 1、实例化</span><br><span class="line"> * 2、init:初始化</span><br><span class="line"> * 3、service：服务</span><br><span class="line"> * 4、destory：销毁</span><br><span class="line"> */</span><br><span class="line">@WebServlet(&quot;/LifeServlet&quot;)</span><br><span class="line">public class LifeServlet extends HttpServlet &#123;</span><br><span class="line">private static final long serialVersionUID = 1L;</span><br><span class="line">       </span><br><span class="line">    /**</span><br><span class="line">     * @see HttpServlet#HttpServlet()</span><br><span class="line">     */</span><br><span class="line">    public LifeServlet() &#123;</span><br><span class="line">        super();</span><br><span class="line">        System.out.println(&quot;1、完成了实例化&quot;);</span><br><span class="line">        // TODO Auto-generated constructor stub</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void init() throws ServletException &#123;</span><br><span class="line">    // TODO Auto-generated method stub</span><br><span class="line">    super.init();</span><br><span class="line">    System.out.println(&quot;2、完成了初始化&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;3、就绪中&quot;);</span><br><span class="line">response.getWriter().append(&quot;Served at: &quot;).append(request.getContextPath());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void destroy() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">super.destroy();</span><br><span class="line">System.out.println(&quot;4、销毁了&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="九-Servlet获取页面传参"><a href="#九-Servlet获取页面传参" class="headerlink" title="九.Servlet获取页面传参"></a>九.Servlet获取页面传参</h4><p><strong>1.html页面如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;欢迎页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;欢迎你&lt;/h1&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;form action=&quot;HelloServlet&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;label&gt;姓名：&lt;/label&gt;&lt;input name=&quot;name&quot;&gt;&lt;br/&gt;</span><br><span class="line">&lt;label&gt;年龄：&lt;/label&gt;&lt;input  name=&quot;age&quot;&gt;&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：如查在浏览器地址栏输入如下链接</span><br><span class="line">http://localhost:8080/servlet_day01/login?username=admin&amp;password=1234</span><br><span class="line"></span><br><span class="line">其中？后面称为查询字符串，一般是由键值对组成，键值对与键值对之间使用&amp;符号连接</span><br><span class="line">?username=admin&amp;password=1234</span><br></pre></td></tr></table></figure><p><strong>2.Servlet代码如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Servlet implementation class HelloServlet</span><br><span class="line"> * 演示Servlet的获取请求参数</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">@WebServlet(&quot;/HelloServlet&quot;)</span><br><span class="line">public class HelloServlet extends HttpServlet &#123;</span><br><span class="line">private static final long serialVersionUID = 1L;</span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">//获取表单提交的姓名</span><br><span class="line">String name=request.getParameter(&quot;name&quot;);</span><br><span class="line">//获取年龄</span><br><span class="line">String age=request.getParameter(&quot;age&quot;);</span><br><span class="line">//服务端输出打印</span><br><span class="line">System.out.println(request.getRemoteAddr()+&quot;发来信息：姓名：&quot;+name+&quot;----&gt;年龄：&quot;+age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.get请求和post请求区别</strong></p><p>默认的请求方式是GET请求，对应的Servlet的方法是doGet方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连</span><br><span class="line">GET提交的数据大小有限制（因为浏览器对URL的长度有限制）</span><br><span class="line">GET方式提交数据，会带来安全问题</span><br><span class="line">效率高</span><br></pre></td></tr></table></figure><p>POST请求，对应的Servlet的方法是doPost</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST方法是把提交的数据放在HTTP包的Body中</span><br><span class="line">POST方法提交的数据没有限制</span><br><span class="line">POST提交的数据相对安全</span><br><span class="line">效率相对没有GET高</span><br></pre></td></tr></table></figure><p><strong>4.中文乱码解决</strong></p><p>产生乱码原因：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">产生乱码，就是因为服务器和客户端沟通的编码不一致造成的，因此解决的办法是：在客户端和服务器之间设置一个统一的编码，之后就按照此编码进行数据的传输和接收</span><br></pre></td></tr></table></figure><p>get中文乱码解决方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">三码一致</span><br><span class="line">1.tomcat中工程的编码要和页面编码一致</span><br><span class="line">2.tomcat服务器编码也要和上述编码一致</span><br><span class="line"></span><br><span class="line">工程编码默认设置方式：</span><br><span class="line">window---&gt;preferences---&gt;general---&gt;workspace</span><br><span class="line"></span><br><span class="line">在server.xml文件中可以配置服务器的编码：</span><br><span class="line"> &lt;Connector connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot; URIEncoding=&quot;GBK&quot;/&gt;</span><br><span class="line">tomcat 其默认编码是ISO8859-1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在Tomcat7及以下</span><br><span class="line">客户端以UTF-8的编码传输数据到服务器端，而服务器端的request对象使用的是ISO8859-1这个字符编码来接收数据，服务器和客户端沟通的编码不一致因此才会产生中文乱码的。解决办法：在接收到数据后，先获取request对象以ISO8859-1字符编码接收到的原始数据的字节数组，然后通过字节数组以指定的编码构建字符串，解决乱码问题。</span><br><span class="line"></span><br><span class="line">Tomcat8的版本中GET基本就不会乱码了，因为服务器对url的编码格式可以进行自动转换</span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Servlet implementation class HelloServlet</span><br><span class="line"> * 演示Servlet的GET请求,中文乱码的问题</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">@WebServlet(&quot;/GETServlet&quot;)</span><br><span class="line">public class GetServlet extends HttpServlet &#123;</span><br><span class="line">private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">//获取表单提交的姓名</span><br><span class="line">String name=request.getParameter(&quot;name&quot;);</span><br><span class="line">name=new String(name.getBytes(&quot;ISO8859-1&quot;),&quot;UTF-8&quot;);</span><br><span class="line">//获取年龄</span><br><span class="line">String age=request.getParameter(&quot;age&quot;);</span><br><span class="line">//服务端输出打印</span><br><span class="line">System.out.println(request.getRemoteAddr()+&quot;发来信息：姓名：&quot;+name+&quot;----&gt;年龄：&quot;+age);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Post乱码解决方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于客户端是以UTF-8字符编码将表单数据传输到服务器端的，因此服务器也需要设置以UTF-8字符编码进行接收，要想完成此操作，服务器可以直接使用从ServletRequest接口继承而来的&quot;setCharacterEncoding(charset)&quot;方法进行统一的编码设置。</span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Servlet implementation class HelloServlet</span><br><span class="line"> * 演示Servlet的GET请求,中文乱码的问题</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">@WebServlet(&quot;/GETServlet&quot;)</span><br><span class="line">public class GetServlet extends HttpServlet &#123;</span><br><span class="line">private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">//设置请求参数的编码格式--对GET无效</span><br><span class="line">        request.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">//获取表单提交的信息</span><br><span class="line">String name=request.getParameter(&quot;msg&quot;);</span><br><span class="line">//服务端输出打印</span><br><span class="line">System.out.println(request.getRemoteAddr()+&quot;发来信息：&quot;+msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.Servlet输出中文</strong></p><p>页面产生乱码原因</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器识别不到返回的中文是什么编码格式，就会默认使用GB2312,如果返回的是UTF-8格式的那么在浏览器上就会显示乱码的问题</span><br></pre></td></tr></table></figure><p>解决方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(&quot;text/html;charset=UTF-8&quot;);</span><br></pre></td></tr></table></figure><h4 id="十-作业"><a href="#十-作业" class="headerlink" title="十.作业"></a>十.作业</h4><p>请结合之前学习的前端技术，用户注册功能（用户名，密码，性别，地址），</p><p>实现一个页面输入内容存储到数据库的功能</p><p>使用Servlet接收页面数据，通过JDBC存储到数据库</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Tomcat服务器及Servlet入门&quot;&gt;&lt;a href=&quot;#Tomcat服务器及Servlet入门&quot; class=&quot;headerlink&quot; title=&quot;Tomcat服务器及Servlet入门&quot;&gt;&lt;/a&gt;Tomcat服务器及Servlet入门&lt;/h2&gt;&lt;h4 i
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/Servlet%E7%9A%84Request%E5%92%8CResponse%E5%AF%B9%E5%83%8F/"/>
    <id>http://kongxianghe.top/2018/10/23/Servlet的Request和Response对像/</id>
    <published>2018-10-23T14:06:03.462Z</published>
    <updated>2018-07-09T06:15:55.007Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Servlet的Request和Response对像"><a href="#Servlet的Request和Response对像" class="headerlink" title="Servlet的Request和Response对像"></a>Servlet的Request和Response对像</h2><h4 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.servlet请求资源路径（重点）</span><br><span class="line">2.servlet的Request对像（重点）</span><br><span class="line">3.servlet的Response对像（重点）</span><br><span class="line">4.servlet上下文对像（重点）</span><br><span class="line">5.servlet的重定向和转发（重点）</span><br><span class="line">6.servlet的绝对路径和相对路径（重点）</span><br><span class="line">7.servlet线程安全问题（重点）</span><br><span class="line">8.作业</span><br></pre></td></tr></table></figure><h4 id="一-Servlet请求资源路径"><a href="#一-Servlet请求资源路径" class="headerlink" title="一.Servlet请求资源路径"></a>一.Servlet请求资源路径</h4><p><strong>1.请求资源路径的概念</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在浏览器输入：http://127.0.0.1:8080/servlet_day12/HelloServlet</span><br><span class="line">servlet_day12/HelloServlet就是请求资源路径</span><br></pre></td></tr></table></figure><p><strong>2.容器对请求的处理过程</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.在浏览器输入：http://127.0.0.1:8080/servlet_day02/HelloServlet</span><br><span class="line">2.浏览器依据ip，port建立与Servlet容器之间的连接，然后将请求资源路径servlet_day02/HelloServlet发送过去给容器</span><br><span class="line">3.容器依据应用名“/servlet_day12”找到应用所在的文件夹，容器会默认请求的是一个Servlet，</span><br><span class="line">4.如果使用的是XML配置，那么查找web.xml文件中所有的Servlet配置url-pattern,看是否有匹配的Servlet</span><br><span class="line">如果使用的是注解式配置，那么就直接检索注解@WebServlet的值是否匹配</span><br></pre></td></tr></table></figure><p><strong>3.匹配Servlet的规则</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">容器在进行url-pattern比对的时候是遵循一定的匹配原则的</span><br><span class="line">url-pattern定义匹配规则，取值说明：</span><br><span class="line">1. 精确匹配 /具体的资源名称：只有url路径是具体的名称的时候才会触发Servlet后缀匹配</span><br><span class="line">2. *.xxx资源名称：只要是以xxx结尾的就匹配触发Servlet</span><br><span class="line">3. 通配符匹配/*：匹配所有请求，包含服务器的所有资源</span><br></pre></td></tr></table></figure><h4 id="二-Servlet的Request对像"><a href="#二-Servlet的Request对像" class="headerlink" title="二.Servlet的Request对像"></a>二.Servlet的Request对像</h4><p><strong>1.servletRequest对像介绍</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义将客户端请求信息提供给某个 servlet 的对象。servlet 容器创建 ServletRequest 对象，并将该对象作为参数传递给该 servlet 的 service 方法。</span><br></pre></td></tr></table></figure><p><strong>2.HttpServletRequest对像介绍</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpServletRequest对象代表客户端的请求，当客户端通过HTTP协议访问服务器时，HTTP请求头中的所有信息都封装在这个对象中，开发人员通过这个对象的方法，可以获得客户这些信息。</span><br></pre></td></tr></table></figure><p><strong>3.HttpServletRequest常用API</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">获得客户端信息</span><br><span class="line">　　getRequestURL方法返回客户端发出请求时的完整URL。</span><br><span class="line">　　getRequestURI方法返回请求行中的资源名部分。</span><br><span class="line">　　getQueryString 方法返回请求行中的参数部分。</span><br><span class="line">　　getPathInfo方法返回请求URL中的额外路径信息。额外路径信息是请求URL中的位于Servlet的路径之后和查询参数之前的内容，它以“/”开头。</span><br><span class="line">　　getRemoteAddr方法返回发出请求的客户机的IP地址。</span><br><span class="line">　　getRemoteHost方法返回发出请求的客户机的完整主机名。</span><br><span class="line">　　getRemotePort方法返回客户机所使用的网络端口号。</span><br><span class="line">　　getLocalAddr方法返回WEB服务器的IP地址。</span><br><span class="line">　　getLocalName方法返回WEB服务器的主机名。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获得客户端请求头</span><br><span class="line">　　getHeader(string name)方法:获取指定名称的String值</span><br><span class="line">　　getHeaders(String name)方法:获取指定名称的Enumeration值</span><br><span class="line">　　getHeaderNames()方法：获取所有的请求消息头的名称</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">获得客户机端请求参数(客户端提交的数据)</span><br><span class="line">    getParameter(String)方法(常用)：获取指定参数的值</span><br><span class="line">    //http://localhost:8080/servlet_day02/req.do?love=reading&amp;love=movie&amp;love=music</span><br><span class="line">    getParameterValues(String name)方法(常用)：获取指定参数的所有的值</span><br><span class="line">    getParameterNames()方法(不常用)：获取所有的请求参数</span><br><span class="line">    getParameterMap()方法(编写框架时常用)：获取所有的请求参数和对应的值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">设置request域中内容,称为request域，该域可以存放键值对</span><br><span class="line">setAttribute(String key,Object value);</span><br><span class="line">getAttribute(String key);</span><br><span class="line">removeAttribute(String key)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置请求的编码格式</span><br><span class="line">setCharacterEncoding(String);设置编码格式，可以解决post乱码</span><br></pre></td></tr></table></figure><p><strong>4.代码如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//1.测试获取请求行数据的方法和请求头的方法</span><br><span class="line">  //1.获取请求行的方法</span><br><span class="line">   //获取请求方式</span><br><span class="line">   String method = request.getMethod();</span><br><span class="line">   //获取请求的url </span><br><span class="line">   String url = request.getRequestURL()+&quot;&quot;;</span><br><span class="line">   //获取uri </span><br><span class="line">   String uri = request.getRequestURI();</span><br><span class="line">   //获取请求的参数</span><br><span class="line">   String query = request.getQueryString();</span><br><span class="line">   //获取请求人的iP</span><br><span class="line">   String ip = request.getRemoteAddr();</span><br><span class="line">   //获取请求的主机名</span><br><span class="line">   String host = request.getRemoteHost();</span><br><span class="line">   </span><br><span class="line">   System.out.println(method+&quot; url:&quot;+url+&quot; uri:&quot;+</span><br><span class="line">   uri+&quot; query:&quot;+query+&quot; ip:&quot;+ip+&quot; host:&quot;+host);</span><br><span class="line">   </span><br><span class="line">  //获取请求信息</span><br><span class="line">  //全部输出  </span><br><span class="line">   String header = request.getHeader(&quot;user-agent&quot;);</span><br><span class="line">   if (header.contains(&quot;firefox&quot;)) &#123;</span><br><span class="line">             //获取所有请求的names</span><br><span class="line">    Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line">    while (headerNames.hasMoreElements()) &#123;</span><br><span class="line">String name = (String) headerNames.nextElement();</span><br><span class="line">//根据name获取keys</span><br><span class="line">Enumeration&lt;String&gt; headers = request.getHeaders(name);</span><br><span class="line">while (headers.hasMoreElements()) &#123;</span><br><span class="line">String key = (String) headers.nextElement();</span><br><span class="line">System.out.println(name+&quot;---&gt;&quot;+key);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="三-Servlet的Response对像"><a href="#三-Servlet的Response对像" class="headerlink" title="三.Servlet的Response对像"></a>三.Servlet的Response对像</h4><p><strong>1.Response简介</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义辅助servlet将响应发送到客户端的对象。servlet 容器创建 ServletResponse 对象，并将它作为参数传递给 servlet 的 service 方法。</span><br></pre></td></tr></table></figure><p><strong>2.HttpServletResponse介绍</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">扩展 ServletResponse 接口以提供特定于 HTTP 的发送响应功能。</span><br><span class="line">例如，该接口拥有访问 HTTP 头和 cookie 的方法。</span><br><span class="line">客户端向服务器发起的都是HTTP协议操作,所以我们大部分使用HttpServletResponse对象作为直接操作对象!</span><br></pre></td></tr></table></figure><p><strong>3.HttpServletResponse 常用API介绍</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.setStatus(int code)设置响应状态码</span><br><span class="line">2.setHeader(name,value)设置响应信息头</span><br><span class="line">3.setCharacterEncoding(String);设置响应编码格式</span><br><span class="line">4.setContentType(String)设置返回数据mimetype，即设置响应头中contentType属性的值</span><br><span class="line">5.getWriter()获取字符输出流</span><br><span class="line">6.getOutputStream()获取字节输出流</span><br></pre></td></tr></table></figure><p><strong>4.代码如下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//告诉浏览器解析字符串使用的编码</span><br><span class="line"></span><br><span class="line">1.方案按相对简单,通过设置响应头告知浏览器解析字符串的编码格式!</span><br><span class="line">response.setCharacterEncoding（）</span><br><span class="line">response.setHeader(&quot;Content-type&quot;,&quot;text/html;charset=UTF-8&quot;)</span><br><span class="line"></span><br><span class="line">2.利用setContentType这种综合性的写法解决问题!此方法也是开发中常用的方法!方便!</span><br><span class="line">response.setContentType(&quot;text/html;charset=UTF-8&quot;)</span><br></pre></td></tr></table></figure><p>####四.Servlet上下文对像</p><p><strong>1.概念(ServletContext)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在web容器启动的时候，会为每一个web应用创建唯一的一个符合ServletContext接口的对象，该对象一般称之为&quot;servlet上下文&quot;,即ServletContext.</span><br><span class="line">当WEB服务器启动时，会为每一个WEB应用程序(webapps下的每个目录就是一个应用程序)创建一块共享的存储区域。该“公共区域”即是ServletContext，也就是同一个WEB应用程序中，所有的Servlet和JSP都可以共享同一个区域。</span><br><span class="line">ServletContext在WEB服务器启动时创建，服务器关闭时销毁。</span><br></pre></td></tr></table></figure><p><strong>2.获取ServletContext上下文</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1:GenericServlet提供了getServletContext()方法。</span><br><span class="line">2:ServletConfig提供了getServletContext()方法。</span><br><span class="line">3:HttpSession提供了getServletContext()方法。</span><br><span class="line">4:HttpServletRequest提供了getServletContext()方法。</span><br></pre></td></tr></table></figure><p><strong>3.Servlet上下文的作用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1、获取真实路径</span><br><span class="line">获取当前项目的发布路径</span><br><span class="line">request.getSelectContext().getRealPath(&quot;/&quot;);</span><br><span class="line"></span><br><span class="line">2、获取容器的附加信息</span><br><span class="line">request.getServletContext().getServerInfo();</span><br><span class="line">request.getServletContext().getContextPath();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、全局容器</span><br><span class="line">//设置信息到全局容器中</span><br><span class="line">request.getServletContext().setAttribute(&quot;msg&quot;, &quot;共享信息&quot;);</span><br><span class="line">//读取全局内容</span><br><span class="line">request.getServletContext().getAttribute(&quot;msg&quot;)</span><br><span class="line">//移除数据</span><br><span class="line">request.getServletContext().removeAttribute(&quot;msg&quot;);</span><br></pre></td></tr></table></figure><p><strong>4.Servlet上下文特点</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">唯一性: 一个应用对应一个servlet上下文。</span><br><span class="line">一直存在: 只要容器不关闭或者应用不卸载，servlet上下文就一直存在。</span><br></pre></td></tr></table></figure><h4 id="五-Servlet的重定向和转发操作"><a href="#五-Servlet的重定向和转发操作" class="headerlink" title="五.Servlet的重定向和转发操作"></a>五.Servlet的重定向和转发操作</h4><p><strong>1.重定向</strong></p><p>概念：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重定向就是通过各种方法将各种网络请求重新定个方向转到其它位置</span><br></pre></td></tr></table></figure><p>原理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.客户浏览器发送http请求</span><br><span class="line">2.web服务器接受后发送302状态码响应及对应新的location给客户浏览器</span><br><span class="line">3.客户浏览器发现是302响应，则自动再发送一个新的http请求，请求url是新的location地址</span><br><span class="line">4.服务器根据此请求寻找资源并发送给客户。在这里location可以重定向到任意URL，既然是浏览器重新发出了请求，则就没有什么request传递的概念了。</span><br><span class="line">在客户浏览器路径栏显示的是其重定向的路径，客户可以观察到地址的变化的。</span><br></pre></td></tr></table></figure><p>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(&quot;url&quot;);</span><br></pre></td></tr></table></figure><p>特点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1，重定向是客户端行为。</span><br><span class="line">2，重定向是浏览器做了至少两次的访问请求的。（在一个重定向资源中发生了又一次重定向）</span><br><span class="line">3，重定向浏览器地址改变。</span><br><span class="line">4，重定向2次跳转之间传输的信息会丢失（request域中的数据，servletContext中内容不会丢失）。</span><br><span class="line">5，重定向可以指向任何的资源，包括当前应用程序中的其他资源，同一个站点上的其他应用程序中的资源，其他站点的资源。注意：传递给HttpServletResponse.sendRedirect 方法的相对URL以“/”开头，它是相对于整个WEB站点的根目录</span><br></pre></td></tr></table></figure><p>实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.sun.xml.internal.ws.encoding.soap.SOAP12Constants;</span><br><span class="line">@WebServlet(&quot;/redirect.do&quot;)</span><br><span class="line">public class RedirectServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;RedirectServlet 被访问&quot;);</span><br><span class="line"></span><br><span class="line">//重新定向到另一个资源（本工程内部servlet，html,jsp;外部网站，外部工程中的开放的接口）</span><br><span class="line">//注意：在此处使用/资源位置，其定位到tomcat服务器webApps目录下</span><br><span class="line"> response.sendRedirect(&quot;redirect.html&quot;);</span><br><span class="line">//response.sendRedirect(&quot;ctx.do&quot;);</span><br><span class="line">//response.sendRedirect(&quot;http://www.baidu.com&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：重定向后不要有业务逻辑，所有业务逻辑都要写在重定向代码之前</span><br></pre></td></tr></table></figure><p><strong>2.转发</strong></p><p>概念：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Servlet除了支持重定向之外还支持请求转发，服务器中转请求</span><br></pre></td></tr></table></figure><p>原理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.客户浏览器发送http请求</span><br><span class="line">2.web服务器接受此请求</span><br><span class="line">3.调用内部的一个方法在容器内部完成请求处理和转发动作</span><br><span class="line">4.将目标资源发送给客户。在这里，转发的路径必须是同一个web容器下的url，其不能转向到其他的web路径上去，中间传递的是自己的容器内的request。</span><br><span class="line">在客户浏览器路径栏显示的仍然是其第一次访问的路径，也就是说客户是感觉不到服务器做了转发的</span><br></pre></td></tr></table></figure><p>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(&quot;url&quot;).forward(servletrequest, servletresponse);</span><br></pre></td></tr></table></figure><p>特点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1，转发是服务器行为</span><br><span class="line">2，转发是浏览器只做了一次访问请求</span><br><span class="line">3，转发浏览器地址不变</span><br><span class="line">4，转发2次跳转之间传输的信息不会丢失，所以可以通过request进行数据的传递</span><br><span class="line">5，转发只能将请求转发给同一个WEB应用中的组件</span><br><span class="line">注意：如果创建RequestDispatcher 对象时指定的相对URL以“/”开头，它是相对于当前WEB应用程序的根目录。</span><br></pre></td></tr></table></figure><p>实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package servlet;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;/forward.do&quot;)</span><br><span class="line">public class DispatchServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;DispatchServlet被访问&quot;);</span><br><span class="line"></span><br><span class="line">//转发操作，访问下一个资源</span><br><span class="line">//内部资源可以访问，但外部资源访问不了</span><br><span class="line">request.getRequestDispatcher(&quot;forward.html&quot;).forward(request, response);</span><br><span class="line">//request.getRequestDispatcher(&quot;http://www.baidu.com&quot;).forward(request, response);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####六.servlet的绝对路径和相对路径</p><p><strong>1.绝对路径</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">即绝对路径就是你的主页上的文件或目录在硬盘上真正的路径，(URL和物理路径)</span><br><span class="line">例如：</span><br><span class="line">C:/xyz/test.txt 代表了test.txt文件的绝对路径。</span><br><span class="line">http://www.sun.com/index.htm也代表了一个URL绝对路径</span><br></pre></td></tr></table></figure><p><strong>2.相对路径</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">即相对于某个基准目录的路径。包含Web的相对路径（HTML中的相对目录），</span><br><span class="line">例如：</span><br><span class="line">在Servlet中，&quot;/&quot;代表Web应用的根目录。和物理路径的相对表示。</span><br><span class="line">&quot;./&quot; 代表当前目录(当前被使用的目类),</span><br><span class="line">&quot;../&quot;代表上级目录。这种类似的表示，也是属于相对路径</span><br></pre></td></tr></table></figure><p><strong>3.服务端相对地址</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">服务器端的相对地址指的是相对于你的web应用的地址，这个地址是在服务器端解析的</span><br><span class="line">（不同于html和javascript中的相对地址，他们是由客户端浏览器解析的）</span><br><span class="line">也就是说这时候在jsp和servlet中的相对地址应该是相对于你的web应用，</span><br><span class="line">即相对于http://127.0.0.1:8080/项目名/  的路径</span><br><span class="line"></span><br><span class="line">注意：如果路径前面不加/,表示相对路径，其相对于http://127.0.0.1:8080/项目名/的路径</span><br></pre></td></tr></table></figure><p>####七.servlet线程安全问题</p><p><strong>1.线程安全问题</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为每次请求都会创建一个线程，如果多人同时请求，那么就会存在多个线程操作同一个Servlet对象，那么如果在对应的方法中操作了成员变量，就有可能产生线程安全的问题。</span><br></pre></td></tr></table></figure><p><strong>2.创建线程安全的servlet方式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、synchronized</span><br><span class="line">将存在线程安全问题的代码放到同步代码块中</span><br><span class="line">2、尽可能只使用局部变量</span><br></pre></td></tr></table></figure><p><strong>八.作业</strong><br>用户登录，如果用户名密码输入错误，请跳转到登录页面login.html，如果输入正确，请跳转到index.html,</p><p>请连接数据库，验证用户名密码是否正确</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Servlet的Request和Response对像&quot;&gt;&lt;a href=&quot;#Servlet的Request和Response对像&quot; class=&quot;headerlink&quot; title=&quot;Servlet的Request和Response对像&quot;&gt;&lt;/a&gt;Servlet的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/Session%E5%92%8CCookie%E5%AF%B9%E5%83%8F/"/>
    <id>http://kongxianghe.top/2018/10/23/Session和Cookie对像/</id>
    <published>2018-10-23T14:06:03.458Z</published>
    <updated>2018-07-09T06:15:54.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Session和Cookie对像"><a href="#Session和Cookie对像" class="headerlink" title="Session和Cookie对像"></a>Session和Cookie对像</h2><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、状态管理</span><br><span class="line">2、Cookie的使用</span><br><span class="line">3、Session的使用</span><br><span class="line">4、作业</span><br></pre></td></tr></table></figure><h4 id="一-状态管理"><a href="#一-状态管理" class="headerlink" title="一.状态管理"></a>一.状态管理</h4><p><strong>1.状态管理原因</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP协议是无状态的，不能保存每次提交的信息，即当服务器返回与请求相对应的应答之后，这次事务的所有信息就丢掉了。 </span><br><span class="line">如果用户发来一个新的请求，服务器无法知道它是否与上次的请求有联系。 </span><br><span class="line">对于那些需要多次提交数据才能完成的Web操作，比如登录来说，就成问题了。</span><br></pre></td></tr></table></figure><p><strong>2.状态管理概念</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WEB应用中的会话（session）是指一个客户端浏览器与WEB服务器之间连续发生的一系列请求和响应过程。</span><br><span class="line">WEB应用的会话状态是指WEB服务器与浏览器在会话过程中产生的状态信息，借助会话状态，WEB服务器能够把属于同一会话中的一系列的请求和响应过程关联起来。</span><br></pre></td></tr></table></figure><p><strong>3.状态管理的两种常见模式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">服务器状态管理技术：</span><br><span class="line">将状态保存在服务器端。代表性的是session技术（服务器传递sessionID时需要使用Cookie的方式）。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">客户端状态管理技术：将状态保存在客户端。代表性的是Cookie技术。</span><br></pre></td></tr></table></figure><h4 id="二-Cookie对像"><a href="#二-Cookie对像" class="headerlink" title="二.Cookie对像"></a>二.Cookie对像</h4><p><strong>1.概念</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cookie是在浏览器访问WEB服务器的某个资源时，由WEB服务器在HTTP响应消息头中附带传送给浏览器的一片数据，WEB服务器传送给各个客户端浏览器的数据是可以各不相同的。</span><br><span class="line">一旦WEB浏览器保存了某个Cookie，那么它在以后每次访问该WEB服务器时，都应在HTTP请求头中将这个Cookie回传给WEB服务器。</span><br><span class="line">WEB服务器通过在HTTP响应消息中增加Set-Cookie响应头字段将Cookie信息发送给浏览器，浏览器则通过在HTTP请求消息中增加Cookie请求头字段将Cookie回传给WEB服务器。</span><br><span class="line">一个Cookie只能标识一种信息，它至少含有一个标识该信息的名称（NAME）和设置值（VALUE）。</span><br><span class="line">一个WEB站点可以给一个WEB浏览器发送多个Cookie，一个WEB浏览器也可以存储多个WEB站点提供的Cookie。</span><br><span class="line">浏览器一般只允许存放300个Cookie，每个站点最多存放20个Cookie，每个Cookie的大小限制为4KB</span><br><span class="line">Cookie不支持存放中文字符信息</span><br></pre></td></tr></table></figure><p><strong>2.服务端创建Cookie的方式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie=new Cookie(&quot;key&quot;, value);</span><br><span class="line"></span><br><span class="line">//设置Cookie的路径</span><br><span class="line">cookie.setPath(&quot;/&quot;);</span><br><span class="line"></span><br><span class="line">//内存存储，取值有三种,单位为秒</span><br><span class="line">//大于0表示cookie生效时间，等于0表示失效，小于0表示内存存储，不写入浏览器</span><br><span class="line">cookie.setMaxAge(-1);</span><br><span class="line"></span><br><span class="line">//把cookie写入客户端浏览器</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><p><strong>3.服务器查询客户端Cookie</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//获取所有的Cookie</span><br><span class="line">Cookie[] cks=request.getCookies();</span><br><span class="line">//遍历Cookie</span><br><span class="line">for(Cookie ck:cks)&#123;</span><br><span class="line">     //通过key值，检索出自己的Cookie</span><br><span class="line">if(ck.getName().equals(&quot;key&quot;))&#123;</span><br><span class="line">       //记录Cookie的值</span><br><span class="line">code=ck.getValue();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.修改Cookie</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">只需要保证Cookie的key 及 路径一致即可修改</span><br><span class="line"></span><br><span class="line">//重新写入value2值</span><br><span class="line">Cookie cookie=new Cookie(&quot;key&quot;, value2);</span><br><span class="line">cookie.setPath(&quot;/&quot;);</span><br><span class="line">cookie.setMaxAge(-1);</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><p><strong>5.Cookie的编码与解码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">中文和英文字符不同，中文属于Unicode字符，在内存中占用4个字节，而英文属于ASCII字符，内存中只占2个字节。Cookie中使用Unicode字符时需要对Unicode字符进行编码，否则会出现乱码。</span><br><span class="line">编码可以使用java.net.URLEncoder类的encode(String str,String encoding)方法，</span><br><span class="line">解码使用java.net.URLDecoder类的decode(String str,String encoding)方法</span><br></pre></td></tr></table></figure><p><strong>6.代码如下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 使用中文的 Cookie. </span><br><span class="line">//其中 name 与 value 都使用 UTF-8 编码. </span><br><span class="line">String key = URLEncoder.encode(&quot;姓名&quot;, &quot;UTF-8&quot;);</span><br><span class="line">String value= URLEncoder.encode(&quot;张三&quot;, &quot;UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">Cookie cookie = new Cookie(key,value）;</span><br><span class="line">// 发送到客户端   </span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><p><strong>7.Cookie的路径问题</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cookie一般都是由于用户访问页面而被创建的，可是并不是只有在创建cookie的页面才可以访问这个cookie。</span><br><span class="line">在默认情况下，出于安全方面的考虑，只有与创建 cookie 的页面处于同一个目录或在创建cookie页面的子目录下的网页才可以访问。那么此时如果希望其父级或者整个网页都能够使用cookie，就需要进行路径的设置</span><br></pre></td></tr></table></figure><p><strong>8.浏览器发送Cookie</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">先域名匹配，再路径匹配：</span><br><span class="line">浏览器在发送请求之前，首先会根据请求url中的域名在cookie列表中找所有与当前域名一样的cookie，然后再根据指定的路径进行匹配.</span><br><span class="line">如果两者都匹配成功，那么就会将所有匹配的cookie发送给服务器。</span><br><span class="line">这里要注意的是最大匹配和最小匹配问题，有些cookie服务器在发送之前会有意扩大当前页面cookie的匹配范围，此时这些被扩大范围的cookie也会一起发送给服务器</span><br></pre></td></tr></table></figure><p><strong>9.设置Cookie的路径</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie.setPath(&quot;&quot;);</span><br></pre></td></tr></table></figure><p><strong>10.Cookie的特点</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line">可配置到期规则 Cookie 可以在浏览器会话结束时到期，或者可以在客户端计算机上无限期存在，这取决于客户端的到期规则。</span><br><span class="line">不需要任何服务器资源 Cookie 存储在客户端并在发送后由服务器读取。</span><br><span class="line">简单性 Cookie 是一种基于文本的轻量结构，包含简单的键值对。</span><br><span class="line">数据持久性，虽然客户端计算机上 Cookie 的持续时间取决于客户端上的 Cookie 过期处理和用户干预，Cookie 通常是客户端上持续时间最长的数据保留形式</span><br><span class="line"></span><br><span class="line">缺点： </span><br><span class="line">1.大小受到限制</span><br><span class="line">大多数浏览器对 Cookie 的大小有 4096 字节的限制，尽管在当今新的浏览器和客户端设备版本中，支持 8192字节的Cookie大小已愈发常见。</span><br><span class="line">2.用户配置为禁用</span><br><span class="line">有些用户禁用了浏览器或客户端设备接收 Cookie 的能力，因此限制了这一功能。</span><br><span class="line">3.潜在的安全风险</span><br><span class="line">Cookie 可能会被篡改。用户可能会操纵其计算机上的 Cookie，这意味着会对安全性造成潜在风险或者导致依赖于 Cookie 的应用程序失败。</span><br><span class="line">另外，虽然 Cookie 只能被将它们发送到客户端的域访问，历史上黑客已经发现从用户计算机上的其他域访问 Cookie 的方法。您可以手动加密和解密 Cookie，但这需要额外的编码，并且因为加密和解密需要耗费一定的时间而影响应用程序的性能。</span><br></pre></td></tr></table></figure><h4 id="三-Session对像"><a href="#三-Session对像" class="headerlink" title="三.Session对像"></a>三.Session对像</h4><p><strong>1.概念</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Session用于跟踪客户的状态。</span><br><span class="line">Session指的是在一段时间内，单个客户与Web服务器的一连串相关的交互过程。</span><br><span class="line">在一个Session中，客户可能会多次请求访问同一个网页，也有可能请求访问各种不同的服务器资源。</span><br></pre></td></tr></table></figure><p><strong>2.原理</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">session被用于表示一个持续的连接状态，在网站访问中一般指代客户端浏览器的进程从开启到结束的过程。</span><br><span class="line">session其实就是网站分析的访问（visits）度量，表示一个访问的过程。</span><br><span class="line">session的常见实现形式是会话cookie（session cookie），即未设置过期时间的cookie，这个cookie的默认生命周期为浏览器会话期间，只要关闭浏览器窗口，cookie就消失了。实现机制是当用户发起一个请求的时候，服务器会检查该请求中是否包含sessionid，如果未包含，则系统会创造一个名为JSESSIONID的输出cookie返回给浏览器(只放入内存，并不存在硬盘中)，并将其以HashTable的形式写到服务器的内存里面；当已经包含sessionid时，服务端会检查找到与该session相匹配的信息，如果存在则直接使用该sessionid，若不存在则重新生成新的 session。</span><br><span class="line">这里需要注意的是session始终是有服务端创建的，并非浏览器自己生成的。　</span><br><span class="line">但是浏览器的cookie被禁止后session就需要用get方法的URL重写的机制或使用POST方法提交隐藏表单的形式来实现</span><br></pre></td></tr></table></figure><p><strong>3.获取Session</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session=request.getSession();</span><br></pre></td></tr></table></figure><p><strong>4.Session常用方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">唯一标记：</span><br><span class="line">session.getId());</span><br><span class="line">最后一次访问时间，毫秒:</span><br><span class="line">session.getLastAccessedTime();</span><br><span class="line">获取最大的空闲时间，单位秒:</span><br><span class="line">session.getMaxInactiveInterval();</span><br><span class="line">获取Session的创建，单位毫秒:</span><br><span class="line">session.getCreationTime();</span><br></pre></td></tr></table></figure><p><strong>5.使用Session绑定对像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HttpSession.setAttribute(属性名,Object);</span><br><span class="line"></span><br><span class="line">//删除session中绑定的对像</span><br><span class="line">HttpSession.removeAttribute(属性名);</span><br></pre></td></tr></table></figure><p><strong>6.删除Session</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpSession.invalidate();</span><br></pre></td></tr></table></figure><p><strong>7.Session超时</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpSession的最后一程访问时间和当前时间的差距大于了指定的最大空闲时间，这时服务器就会销毁Session对象。默认的空闲时间为30分钟。</span><br></pre></td></tr></table></figure><p><strong>8.修改Session的缺省时间限制</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpSession.setMaxInactiveInterval(10)，单位秒</span><br></pre></td></tr></table></figure><p><strong>9.Session失效几中机制</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、超过了设置的超时时间</span><br><span class="line">2、主动调用了invalidate方法</span><br><span class="line">3、服务器主动或异常关闭</span><br><span class="line">注意：浏览器关闭并不会让Session失效</span><br></pre></td></tr></table></figure><p><strong>10.浏览器禁用Cookie,导致Session不可用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">如果浏览器禁用Cookie，session将不可用。</span><br><span class="line">原因是：服务器要读取客户端Cookie的值，来确定此次连接和之前连接是否是同一会话Session，判断标准是读取Cookie中存放的SessionID值。</span><br><span class="line">如果浏览器禁用，则服务器不能把SessionID写入客户端浏览器，则Session的判断标准将失去作用。</span><br><span class="line"></span><br><span class="line">解决方式：</span><br><span class="line">服务器可以使用如URL重写这样的方式来发送jsessionID.</span><br><span class="line">sessionId不能写入cookie，只能通过查询字符串的方式拼接在URL后面，响应给客户端</span><br></pre></td></tr></table></figure><p><strong>11.URL重写</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">浏览器在访问服务器上的某个地址时，不再使用原来的那个地址，而是使用经过改写的地址</span><br><span class="line">（即，在原来的地址后面加上了sessionID）</span><br></pre></td></tr></table></figure><p><strong>12.URL重写的实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">生成重写后的URL：</span><br><span class="line">1、response.encodeURL(String url）</span><br><span class="line">2、response.encodeRedirectURL(String url)</span><br><span class="line">该方法的实现机制为： </span><br><span class="line">● 先判断当前的 Web 组件是否启用 Session，如果没有启用 Session，直接返回参数 url。 </span><br><span class="line">● 再判断客户端浏览器是否支持 Cookie，如果支持 Cookie，直接返回参数 url；如果不支持 Cookie，就在参数 url 中加入 Session ID 信息，然后返回修改后的 url。</span><br></pre></td></tr></table></figure><p><strong>13.两种重写方法异同</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">相同点:</span><br><span class="line">都对url附加上jsessionid参数进行了处理，如果需要.则在url的path后面附加上;jsessionid=xxx；如果不需要则直接返回传入的url。</span><br><span class="line">不同点：</span><br><span class="line">encodeURL()是本应用级别的，encodeRedirectURL()是跨应用的。</span><br></pre></td></tr></table></figure><p><strong>14.代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package encodeURL;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * URL重写，解决Cookie被禁用</span><br><span class="line"> * @author kevin</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">@WebServlet(&quot;/encode.do&quot;)</span><br><span class="line">public class EncodeURLServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line">response.getWriter().println(&quot;encodeURL&quot;);</span><br><span class="line">String url = &quot;login.html&quot;;</span><br><span class="line">/*</span><br><span class="line">1.先判断当前的 Web 组件是否启用 Session，如果没有启用 Session，直接返回参数 url。 </span><br><span class="line">2.再判断客户端浏览器是否支持 Cookie，如果支持 Cookie，直接返回参数 url；</span><br><span class="line">3.如果不支持 Cookie，就在参数 url 中加入 Session ID 信息，然后返回修改后的 url。 </span><br><span class="line"> */</span><br><span class="line">String newUrl = response.encodeURL(url);</span><br><span class="line">System.out.println(newUrl);</span><br><span class="line">response.sendRedirect(newUrl);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四-作业"><a href="#四-作业" class="headerlink" title="四.作业"></a>四.作业</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Session和Cookie对像&quot;&gt;&lt;a href=&quot;#Session和Cookie对像&quot; class=&quot;headerlink&quot; title=&quot;Session和Cookie对像&quot;&gt;&lt;/a&gt;Session和Cookie对像&lt;/h2&gt;&lt;h4 id=&quot;内容&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/Filter%E5%92%8CListener/"/>
    <id>http://kongxianghe.top/2018/10/23/Filter和Listener/</id>
    <published>2018-10-23T14:06:03.444Z</published>
    <updated>2018-07-09T06:15:56.639Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Web之过滤器和监听器"><a href="#Web之过滤器和监听器" class="headerlink" title="Web之过滤器和监听器"></a>Web之过滤器和监听器</h3><h4 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.过滤器</span><br><span class="line">什么是过滤器</span><br><span class="line">过滤器链</span><br><span class="line">过滤器的优先级和参数</span><br><span class="line">过滤器的典型应用</span><br><span class="line">2.监听器</span><br><span class="line">什么是监听器</span><br><span class="line">     常用的监听器</span><br><span class="line">3. 作业题</span><br></pre></td></tr></table></figure><p>#### </p><h4 id="一-过滤器（重点）"><a href="#一-过滤器（重点）" class="headerlink" title="一. 过滤器（重点）"></a>一. 过滤器（重点）</h4><h5 id="1-什么是过滤器"><a href="#1-什么是过滤器" class="headerlink" title="1. 什么是过滤器"></a>1. 什么是过滤器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Filter也称之为过滤器，它是Servlet技术中最激动人心的技术，WEB开发人员通过Filter技术，对web服务器管理的所有web资源：例如Jsp, Servlet, 静态图片文件或静态 html 文件等进行拦截，从而实现一些特殊的功能。例如实现URL级别的权限访问控制、过滤敏感词汇、压缩响应信息等一些高级功能。</span><br><span class="line">Servlet API中提供了一个Filter接口，开发web应用时，如果编写的Java类实现了这个接口，则把这个java类称之为过滤器Filter。通过Filter技术，开发人员可以实现用户在访问某个目标资源之前，对访问的请求和响应进行拦截</span><br></pre></td></tr></table></figure><p>如图所示：</p><p><img src="D:\JAVAEE教案\JAVAEE笔记\第12天 filter和listener\笔记\1.bmp" alt="1.bmp"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line">1.过滤器0-n个过滤器组成过滤器链</span><br><span class="line">2.过滤器可以过滤所有（可设置想过滤的路径）请求和响应</span><br><span class="line">3.过滤器优先于Servlet执行</span><br><span class="line">4.语法只需实现简单的接口filter</span><br><span class="line">5.过滤器会自动执行，web容器调用</span><br></pre></td></tr></table></figure><h5 id="2-如何编写过滤器"><a href="#2-如何编写过滤器" class="headerlink" title="2. 如何编写过滤器"></a>2. 如何编写过滤器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、编写java类实现Filter接口</span><br><span class="line">2、重写doFilter方法</span><br><span class="line">3、设置拦截的url</span><br></pre></td></tr></table></figure><p>#####3. 过滤器的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注解式配置:</span><br><span class="line">在自定义的Filter类上使用注解@WebFilter(“/*”)</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">在web.xml中进行过滤器的配置：</span><br><span class="line"><span class="comment">&lt;!--过滤器的xml配置  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>sf<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--过滤器类全称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>过滤器类的完全限定名<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--映射路径配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>sf<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--过滤的url匹配规则和Servlet的一模一样--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>#####4 .过滤器链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">通常客户端对服务器请求之后，服务器调用Servlet之前会执行一组过滤器（多个过滤器）,那么这组过滤器就称为一条过滤器链。</span><br><span class="line">每个过滤器实现某个特定的功能，一个过滤器检测多个Servlet。（匹配几个，检测几个）。</span><br><span class="line">一组过滤器中的执行顺序与&lt;filter-mapping&gt;的配置顺序呢有关。</span><br><span class="line">当第一个Filter的doFilter方法被调用时，web服务器会创建一个代表Filter链的FilterChain对象传递给该方法。在doFilter方法中，开发人员如果调用了FilterChain对象的doFilter方法，则web服务器会检查FilterChain对象中是否还有filter，如果有，则调用第2个filter，如果没有，则调用目标资源</span><br></pre></td></tr></table></figure><h5 id="5-过滤器的优先级"><a href="#5-过滤器的优先级" class="headerlink" title="5. 过滤器的优先级"></a>5. 过滤器的优先级</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在一个web应用中，可以开发编写多个Filter，这些Filter组合起来称之为一个Filter链。web服务器根据Filter在web.xml文件中的注册顺序，决定先调用哪个Filter。当第一个Filter的doFilter方法被调用时，web服务器会创建一个代表Filter链的FilterChain对象传递给该方法。在doFilter方法中，开发人员如果调用了FilterChain对象的doFilter方法，则web服务器会检查FilterChain对象中是否还有filter，如果有，则调用第2个filter，如果没有，则调用目标资源</span><br><span class="line"></span><br><span class="line">1.配置优先</span><br><span class="line">2.web.xml文件中配置的顺序来执行</span><br><span class="line">3.如果为注解的话，是按照类名的字符串顺序进行起作用的</span><br></pre></td></tr></table></figure><h5 id="6-过滤器的初始化参数"><a href="#6-过滤器的初始化参数" class="headerlink" title="6. 过滤器的初始化参数"></a>6. 过滤器的初始化参数</h5><p>在过滤器的创建的时候，可以传递初始化参数</p><p>第一种：基于注解的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@WebFilter</span>(value=<span class="string">"/*"</span>,initParams= &#123;<span class="meta">@WebInitParam</span>(name = <span class="string">"version"</span>, value = <span class="string">"1.0"</span>)&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Filter#destroy() 销毁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"destroy销毁……"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Filter#doFilter(ServletRequest, ServletResponse, FilterChain) 过滤</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"><span class="comment">// place your code here</span></span><br><span class="line">System.out.println(<span class="string">"doFilter……过滤"</span>);</span><br><span class="line"><span class="comment">// 是否继续---访问下一个</span></span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Filter#init(FilterConfig)</span></span><br><span class="line"><span class="comment"> * 初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig fConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"init……初始化"</span>);</span><br><span class="line">System.out.println(<span class="string">"初始化参数：版本号："</span>+fConfig.getInitParameter(<span class="string">"version"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种：基于xml配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  创建过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Filter#destroy() 销毁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Filter#doFilter(ServletRequest, ServletResponse, FilterChain) 过滤</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"><span class="comment">// 是否继续---访问下一个</span></span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Filter#init(FilterConfig)</span></span><br><span class="line"><span class="comment"> * 初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig fConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"初始化参数：版本号："</span>+fConfig.getInitParameter(<span class="string">"version"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Web.xml实现配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Web_Day<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--过滤器的xml配置  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myfilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filter.SecondFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--过滤器的初始化参数  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>version<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myfilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="7-过滤器的优点"><a href="#7-过滤器的优点" class="headerlink" title="7 .过滤器的优点"></a>7 .过滤器的优点</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以实现 Web 应用程序中的预处理和后期处理逻辑</span><br></pre></td></tr></table></figure><h5 id="8-过滤器的典型应用"><a href="#8-过滤器的典型应用" class="headerlink" title="8. 过滤器的典型应用"></a>8. 过滤器的典型应用</h5><blockquote><p>禁止浏览器缓存动态页面</p></blockquote><p>过滤器的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现禁止浏览器缓存动态页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoCacheFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Filter#destroy()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注意：响应头设置放在doFilter方法之前</span></span><br><span class="line">HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line"><span class="comment">//禁止浏览器缓存动态页面信息</span></span><br><span class="line"><span class="comment">//指定缓存过期时间，过期后要请求服务器;-1表示总要请求服务器</span></span><br><span class="line">response.setDateHeader(<span class="string">"Expires"</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="comment">//设置不需要缓存</span></span><br><span class="line">response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">response.setHeader(<span class="string">"Pragma"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">        </span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Filter#init(FilterConfig)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig fConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>过滤所有请求和响应的编码</p></blockquote><p>代码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package filter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import javax.servlet.Filter;</span><br><span class="line">import javax.servlet.FilterChain;</span><br><span class="line">import javax.servlet.FilterConfig;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.ServletRequest;</span><br><span class="line">import javax.servlet.ServletResponse;</span><br><span class="line">import javax.servlet.annotation.WebFilter;</span><br><span class="line">import javax.servlet.annotation.WebInitParam;</span><br><span class="line"></span><br><span class="line">@WebFilter(urlPatterns=&quot;/*&quot;,initParams=&#123;@WebInitParam(name=&quot;version&quot;,value=&quot;1.0&quot;)&#125;)</span><br><span class="line">public class EncodingFilter implements Filter&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void destroy() &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;执行destory操作&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)</span><br><span class="line">throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">//设置请求和响应的编码</span><br><span class="line">System.out.println(&quot;请求到达过滤器&quot;);</span><br><span class="line">request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">response.setContentType(&quot;text/html;charset=utf-8&quot;);</span><br><span class="line"></span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">System.out.println(&quot;响应到达过滤器&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void init(FilterConfig config) throws ServletException &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;执行init操作&quot;);</span><br><span class="line">String value = config.getInitParameter(&quot;version&quot;);</span><br><span class="line">System.out.println(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对用户登录查行验证</p></blockquote><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 过滤session</span><br><span class="line"> * 业务：用户访问系统APP中资源时，都必须处于登录状态</span><br><span class="line"> * 如果session中没有值，即用户不在登录状态，则强制其返回登录页面，进行登录</span><br><span class="line"> * @author kevin</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">@WebFilter(urlPatterns=&quot;/*&quot;)</span><br><span class="line">public class SessionFilter implements Filter&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void destroy() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)</span><br><span class="line">throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">//1.如果访问login.html页，不需session验证</span><br><span class="line">String url = request.getRequestURL().toString();</span><br><span class="line">int index = url.lastIndexOf(&quot;/login.html&quot;);</span><br><span class="line">//2.执行登录操作，不需验证session</span><br><span class="line">int index2 = url.lastIndexOf(&quot;/login.do&quot;);</span><br><span class="line">//3.如果访问index.html，就需要session验证</span><br><span class="line">User sessionUser = (User) request.getSession().getAttribute(&quot;sessionUser&quot;);</span><br><span class="line"></span><br><span class="line">if(index&gt;0)&#123;</span><br><span class="line">//放行</span><br><span class="line">chain.doFilter(req, res);</span><br><span class="line">&#125;else if(index2&gt;0)&#123;</span><br><span class="line">//放行</span><br><span class="line">chain.doFilter(req, res);</span><br><span class="line">&#125;else if(sessionUser !=null)&#123;</span><br><span class="line">//放行</span><br><span class="line">chain.doFilter(req, res);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">//重定向到login.html</span><br><span class="line">response.sendRedirect(&quot;login.html&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void init(FilterConfig arg0) throws ServletException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-监听器的使用"><a href="#二-监听器的使用" class="headerlink" title="二 .监听器的使用"></a>二 .监听器的使用</h4><h5 id="1-什么是监听器"><a href="#1-什么是监听器" class="headerlink" title="1. 什么是监听器"></a>1. 什么是监听器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">监听器用于监听web应用中某些对象、信息的创建、销毁、增加，修改，删除等动作的发生，然后作出相应的响应处理。当范围对象的状态发生变化的时候，服务器自动调用监听器对象中的方法。常用于统计在线人数和在线用户，系统加载时进行信息初始化，统计网站的访问量等等</span><br><span class="line"></span><br><span class="line">一般分为三类：</span><br><span class="line">1.对ServletContext监听</span><br><span class="line">2.HttpSession监听</span><br><span class="line">3.HttpServletRequest监听</span><br></pre></td></tr></table></figure><h5 id="2-监听器类型"><a href="#2-监听器类型" class="headerlink" title="2. 监听器类型"></a>2. 监听器类型</h5><blockquote><p>ServletContext类型监听器，监听ServletContext变化（重点）</p></blockquote><p>a.监听生命周期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ServletContextListener接口</span><br><span class="line">内部方法：</span><br><span class="line">初始化：contextInitialized</span><br><span class="line">销毁：contextDestroyed</span><br></pre></td></tr></table></figure><p>b.监听属性内容变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ServletContextAttributeListener接口</span><br><span class="line">内部的方法：</span><br><span class="line">attributeAdded：监听属性的添加</span><br><span class="line">attributeRemoved：监听属性的移除</span><br><span class="line">attributeReplaced：监听属性的修改</span><br></pre></td></tr></table></figure><blockquote><p>HttpSession类型监听器，监听HttpSession变化</p></blockquote><p>a.监听生命周期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HttpSessionListener</span><br><span class="line">内部方法：</span><br><span class="line">sessionCreated：监听Session对象的创建</span><br><span class="line">sessionDestroyed：监听Session对象的销毁</span><br></pre></td></tr></table></figure><p>b.监听属性内容变化(重点)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HttpSessionAttributeListener</span><br><span class="line">监听HttpSession的内容的变化</span><br><span class="line">内部的方法：</span><br><span class="line">attributeAdded：监听属性的添加</span><br><span class="line">attributeRemoved：监听属性的移除</span><br><span class="line">attributeReplaced：监听属性的修改</span><br></pre></td></tr></table></figure><p>c.监听服务器的Session的钝化和活化</p><p>（如果一个对像被放到session中，那么其所属的类要实现该接口）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">注意：该类不需要使用注解@WebListener</span><br><span class="line">HttpSessionActivationListener</span><br><span class="line">监听服务器的钝化和活化</span><br><span class="line">内部方法：</span><br><span class="line">sessionWillPassivate：监听Session内部存储对象的钝化-存储</span><br><span class="line">sessionDidActivate：监听Session内部存储对象的活化---读取</span><br><span class="line">对应类需要实现序列化接口Serializable</span><br></pre></td></tr></table></figure><p>d.监听对象的添加和移除(重要)</p><p>（如果一个对像被放到session中，那么其所属的类要实现该接口）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">注意：该类不需要使用注解@WebListener</span><br><span class="line">HttpSessionBindingListener</span><br><span class="line">监听对象的添加和移除</span><br><span class="line">内部方法：</span><br><span class="line">valueBound：监听对象的绑定</span><br><span class="line">valueUnbound：监听对象的解除绑定</span><br></pre></td></tr></table></figure><p>e.HttpSession的id的变化</p><p>这是Servlet3.1新增的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HttpSessionIdListener</span><br><span class="line">监听HttpSession的id的变化</span><br><span class="line">这是Servlet3.1新增的</span><br><span class="line">内部方法：</span><br><span class="line">sessionIdChanged：监听HttpSession的id的变化</span><br></pre></td></tr></table></figure><blockquote><p>ServletRequest类型监听器，监听ServletRequest的变化</p></blockquote><p>a.监听生命周期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ServletRequestListener</span><br><span class="line">监听request对象的初始化和销毁</span><br><span class="line">内部方法：</span><br><span class="line">1、requestInitialized：监听request对象的初始化</span><br><span class="line">2、requestDestroyed：监听request对象的销毁</span><br></pre></td></tr></table></figure><p>b.监听属性内容变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ServletRequestAttributeListener</span><br><span class="line">监听属性内容变化</span><br><span class="line">内部方法：</span><br><span class="line">attributeAdded：监听属性的添加</span><br><span class="line">attributeRemoved：监听属性的移除</span><br><span class="line">attributeReplaced：监听属性的修改</span><br></pre></td></tr></table></figure><p>c.监听异步请求</p><p>Servelt3.1新增监听器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AsyncListener</span><br><span class="line">监听异步请求</span><br><span class="line">内部方法：</span><br><span class="line">1、onStartAsync：监听异步开始</span><br><span class="line">2、onTimeout：监听超时</span><br><span class="line">3、onError：监听异步的错误信息</span><br><span class="line">4、onComplete：监听异步的完成</span><br></pre></td></tr></table></figure><h5 id="3-监听器的2种配置"><a href="#3-监听器的2种配置" class="headerlink" title="3.监听器的2种配置"></a>3.监听器的2种配置</h5><blockquote><p>xml的配置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在web.xml中进行配置</span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--直接写出自定义的监听器的类名即可--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>listener.RequestLeftListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注解式配置</p></blockquote><p>Servlet3.0之后新增的，使用注解@WebListener进行监听器的注册</p><p>如下： 实现ServletContext生命周期的监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Application Lifecycle Listener implementation class FirstListener</span></span><br><span class="line"><span class="comment"> *监听ServletContext的初始化和销毁,即对整个应用生命周期的监听</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注解方式</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationLifeListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Servlet上下文被销毁"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ServletContext ctx = arg0.getServletContext();</span><br><span class="line"><span class="comment">//可以在ServletContext中加上全局参数</span></span><br><span class="line">ctx.setAttribute(<span class="string">"key"</span>, <span class="string">"value"</span>);</span><br><span class="line">System.out.println(<span class="string">"Servlet上下文初始化完成"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下: 实现ServletContext属性内容的变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Application Lifecycle Listener implementation class ApplicationAttributeListener</span></span><br><span class="line"><span class="comment"> * 实现ServletContext属性内容变化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationAttributeListener</span> <span class="keyword">implements</span> <span class="title">ServletContextAttributeListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default constructor. </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApplicationAttributeListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ServletContextAttributeListener#attributeAdded(ServletContextAttributeEvent)</span></span><br><span class="line"><span class="comment">     * 新增内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(ServletContextAttributeEvent event)</span>  </span>&#123; </span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    System.out.println(<span class="string">"attributeAdded:"</span>+event.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ServletContextAttributeListener#attributeRemoved(ServletContextAttributeEvent)</span></span><br><span class="line"><span class="comment">     * 删除属性内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(ServletContextAttributeEvent event)</span>  </span>&#123; </span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    System.out.println(<span class="string">"attributeRemoved:"</span>+event.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ServletContextAttributeListener#attributeReplaced(ServletContextAttributeEvent)</span></span><br><span class="line"><span class="comment">     * 修改内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(ServletContextAttributeEvent event)</span>  </span>&#123; </span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    System.out.println(<span class="string">"attributeReplaced:"</span>+event.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下：实现HttpSession生命周期的变化和属性内容的变化和id变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Application Lifecycle Listener implementation class SessionLeftListener</span></span><br><span class="line"><span class="comment"> * 该监听器实现HttpSession的生命周期变化和属性内容的变化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionLeftListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span>, <span class="title">HttpSessionAttributeListener</span>,<span class="title">HttpSessionIdListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default constructor. </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SessionLeftListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpSessionListener#sessionCreated(HttpSessionEvent)</span></span><br><span class="line"><span class="comment">     * Session的创建</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span>  </span>&#123; </span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    System.out.println(<span class="string">"sessionCreated"</span>);</span><br><span class="line">    <span class="keyword">int</span> ct=(<span class="keyword">int</span>) se.getSession().getServletContext().getAttribute(<span class="string">"fwrs"</span>);</span><br><span class="line">    se.getSession().getServletContext().setAttribute(<span class="string">"fwrs"</span>, ++ct);</span><br><span class="line">    se.getSession().setAttribute(<span class="string">"tea"</span>, <span class="keyword">new</span> Teacher(<span class="string">"西施"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpSessionListener#sessionDestroyed(HttpSessionEvent)</span></span><br><span class="line"><span class="comment">     * Session的销毁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span>  </span>&#123; </span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    System.out.println(<span class="string">"sessionDestroyed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpSessionAttributeListener#attributeAdded(HttpSessionBindingEvent)</span></span><br><span class="line"><span class="comment">     * Session中属性内容的添加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(HttpSessionBindingEvent event)</span>  </span>&#123; </span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpSessionAttributeListener#attributeRemoved(HttpSessionBindingEvent)</span></span><br><span class="line"><span class="comment">     * Session中属性内容的移除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(HttpSessionBindingEvent event)</span>  </span>&#123; </span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpSessionAttributeListener#attributeReplaced(HttpSessionBindingEvent)</span></span><br><span class="line"><span class="comment">     * Session中属性内容的修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(HttpSessionBindingEvent event)</span>  </span>&#123; </span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听HttpSession的id的变化，Servlet3.1新特性</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionIdChanged</span><span class="params">(HttpSessionEvent event, String oldSessionId)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下:实现对象的绑定和Session的钝化和活化监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**演示Session的对象绑定和解除绑定还有Session的活化和钝化*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">implements</span> <span class="title">HttpSessionActivationListener</span>,<span class="title">HttpSessionBindingListener</span>,<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定对象--添加对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueBound</span><span class="params">(HttpSessionBindingEvent event)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"添加绑定："</span>+event.getName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解除绑定---移除对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueUnbound</span><span class="params">(HttpSessionBindingEvent event)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"解除绑定："</span>+event.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//钝化--从内存到硬盘</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionWillPassivate</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"sessionWillPassivate：钝化："</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//活化--从硬盘到内存</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDidActivate</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"sessionWillPassivate：活化："</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下：实现监听ServletRequest生命周期和属性内容变化和异步请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Application Lifecycle Listener implementation class RequestLeftListener</span></span><br><span class="line"><span class="comment"> *监听Request对象的内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestLeftListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span>, <span class="title">ServletRequestAttributeListener</span>, <span class="title">AsyncListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default constructor. </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestLeftListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> AsyncListener#onComplete(AsyncEvent)</span></span><br><span class="line"><span class="comment">     * 异步监听---完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">(AsyncEvent event)</span> <span class="keyword">throws</span> java.io.IOException </span>&#123; </span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> AsyncListener#onError(AsyncEvent)</span></span><br><span class="line"><span class="comment">     * 异步监听---错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(AsyncEvent event)</span> <span class="keyword">throws</span> java.io.IOException </span>&#123; </span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> AsyncListener#onStartAsync(AsyncEvent)</span></span><br><span class="line"><span class="comment">     * 异步监听---启动</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartAsync</span><span class="params">(AsyncEvent event)</span> <span class="keyword">throws</span> java.io.IOException </span>&#123; </span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> AsyncListener#onTimeout(AsyncEvent)</span></span><br><span class="line"><span class="comment">     * 异步监听---超时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimeout</span><span class="params">(AsyncEvent event)</span> <span class="keyword">throws</span> java.io.IOException </span>&#123; </span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ServletRequestListener#requestInitialized(ServletRequestEvent)</span></span><br><span class="line"><span class="comment">     * 请求对象的初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span>  </span>&#123; </span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ServletRequestListener#requestDestroyed(ServletRequestEvent)</span></span><br><span class="line"><span class="comment">     * 销毁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span>  </span>&#123; </span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ServletRequestAttributeListener#attributeRemoved(ServletRequestAttributeEvent)</span></span><br><span class="line"><span class="comment">     * 移除属性内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(ServletRequestAttributeEvent srae)</span>  </span>&#123; </span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ServletRequestAttributeListener#attributeAdded(ServletRequestAttributeEvent)</span></span><br><span class="line"><span class="comment">     * 添加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(ServletRequestAttributeEvent srae)</span>  </span>&#123; </span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ServletRequestAttributeListener#attributeReplaced(ServletRequestAttributeEvent)</span></span><br><span class="line"><span class="comment">     * 修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(ServletRequestAttributeEvent srae)</span>  </span>&#123; </span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三-作业题"><a href="#三-作业题" class="headerlink" title="三.作业题"></a>三.作业题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、使用监听器实现当前登录用户人数和今日访问人数统计</span><br><span class="line">2、使用过滤器实现未登录拦截</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Web之过滤器和监听器&quot;&gt;&lt;a href=&quot;#Web之过滤器和监听器&quot; class=&quot;headerlink&quot; title=&quot;Web之过滤器和监听器&quot;&gt;&lt;/a&gt;Web之过滤器和监听器&lt;/h3&gt;&lt;h4 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今日内容&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/JSP%E6%8A%80%E6%9C%AF/"/>
    <id>http://kongxianghe.top/2018/10/23/JSP技术/</id>
    <published>2018-10-23T14:06:03.440Z</published>
    <updated>2018-07-09T06:15:56.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><h4 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、JSP</span><br><span class="line">什么是JSP</span><br><span class="line">JSP的语法</span><br><span class="line">JSP的指令</span><br><span class="line">JSP的动作</span><br><span class="line">JSP的内置对象</span><br><span class="line">2、EL表达式</span><br><span class="line">域对象</span><br><span class="line">3、JSTL语言</span><br><span class="line">JSTL的使用</span><br></pre></td></tr></table></figure><p>#### </p><h4 id="一-JSP"><a href="#一-JSP" class="headerlink" title="一. JSP"></a>一. JSP</h4><h5 id="1-jsp概念"><a href="#1-jsp概念" class="headerlink" title="1.jsp概念"></a>1.jsp概念</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">全称：Java Server Pages,java服务器页面。和Servlet一样，是sun公司定义的一种动态网页开发技术。</span><br><span class="line">特点：基于html模版，可以在html模版嵌入java代码和jsp中的标签。</span><br><span class="line">备注：html静态页面。</span><br><span class="line">      CSS:修饰美化html页面。</span><br><span class="line">      JavaScript:动态修改html页面和css样式。</span><br><span class="line">      Servlet：运行在服务器上的java程序。适合编写java代码，写网页困难</span><br><span class="line">      jsp:适合编写动态内容，不适合写java代码，主要用于显示页面</span><br></pre></td></tr></table></figure><h5 id="2-为什么要用jsp"><a href="#2-为什么要用jsp" class="headerlink" title="2. 为什么要用jsp"></a>2. 为什么要用jsp</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 jsp性能好，可以在html页面中动态嵌入元素</span><br><span class="line">2 服务器调用的是已经编译好的JSP文件</span><br><span class="line">3 JSP基于Java Servlet Api,有很多强大企业的支持。</span><br><span class="line">4 JSP可以与处理业务逻辑的Servlet一起使用，该模式被Java Servlet模版引擎所支持。</span><br></pre></td></tr></table></figure><h5 id="3-JSP优势"><a href="#3-JSP优势" class="headerlink" title="3. JSP优势"></a>3. JSP优势</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 与纯 Servlet 相比：JSP可以很方便的编写或者修改HTML网页而不用去面对大量的println语句</span><br><span class="line">2 与JavaScript相比：虽然JavaScript可以在客户端动态生成HTML，但是很难与服务器交互，因此不能提供复杂的服务，比如访问数据库和图像处理等等。</span><br><span class="line">3 与静态HTML相比：静态HTML不包含动态信息</span><br></pre></td></tr></table></figure><h5 id="4-JSP语法"><a href="#4-JSP语法" class="headerlink" title="4. JSP语法"></a>4. JSP语法</h5><p> JSP语法格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JSP页面中可以包含任意量的Java语句、变量、方法或表达式</span><br><span class="line"></span><br><span class="line">语法格式： &lt;% java代码 %&gt;</span><br><span class="line">声明局部变量： &lt;%  int i=10;%&gt;</span><br><span class="line">声明全局变量： &lt;%!  int i=10;%&gt;</span><br><span class="line">输出变量： &lt;%=2+3%&gt;等价于输出语句  (注意：不能使用分号来结束表达式)</span><br></pre></td></tr></table></figure><p> JSP注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式： &lt;%-- 网页注释 —&gt;：安全，省流量</span><br><span class="line">网页注释：&lt;!-- 网页注释 --&gt; ,特点，不安全，耗流量</span><br></pre></td></tr></table></figure><p>  代码演示</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--指令，页面的设置--%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--<span class="number">1</span>、模板元素 --%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;第一个JSP页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">&lt;%--我是jsp特有的注释 --%&gt;</span><br><span class="line">&lt;!--我是HTML的注释  --&gt;</span><br><span class="line">    </span><br><span class="line">&lt;a href="http://www.baidu.com"&gt;百度一下&lt;/a&gt;</span><br><span class="line">    </span><br><span class="line">&lt;%--jsp脚本 --%&gt;</span><br><span class="line">&lt;%! <span class="keyword">int</span> c=<span class="number">10</span>; %&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!-- jsp标签 --&gt;</span><br><span class="line">&lt;jsp:include page=""&gt;&lt;/jsp:include&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%--指令，页面设置信息 --%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;第二个JSP页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--我是JSP的注释，我是不会出现在对应的java类中的 --%&gt;</span><br><span class="line">&lt;!--我是HTML的注释，会写出到页面  --&gt;</span><br><span class="line"></span><br><span class="line">&lt;%-- &lt;%!System.out.println(<span class="number">123</span>); %&gt;带！的意思是声明 --%&gt;</span><br><span class="line">&lt;!--jsp脚本之声明  --&gt;</span><br><span class="line">&lt;!--声明一个属性  --&gt;</span><br><span class="line">&lt;%!<span class="keyword">private</span> <span class="keyword">int</span> count; %&gt;</span><br><span class="line">&lt;!--声明并且实现方法  --&gt;</span><br><span class="line">&lt;%!<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(count); </span><br><span class="line">&#125; %&gt;</span><br><span class="line">&lt;%!<span class="keyword">private</span> <span class="keyword">int</span> age=<span class="number">10</span>; %&gt;</span><br><span class="line">&lt;%-- &lt;%!show(); %&gt; --%&gt;</span><br><span class="line">&lt;!--jsp脚本之方法内使用  --&gt;</span><br><span class="line">&lt;!-- 局部变量 --&gt;</span><br><span class="line">&lt;%<span class="keyword">int</span> c=<span class="number">1</span>;%&gt;</span><br><span class="line">&lt;%count++;</span><br><span class="line">c++;%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">System.out.println(<span class="string">"局部变量："</span>+c);</span><br><span class="line">System.out.println(<span class="string">"全局变量："</span>+count);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%System.out.println(<span class="string">"请求的IP地址："</span>+request.getRemoteAddr()); %&gt;</span><br><span class="line">&lt;!--jsp脚本之三：赋值、输出内容  --&gt;</span><br><span class="line">&lt;h1&gt;访问次数：&lt;%=count %&gt;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="5-JSP指令"><a href="#5-JSP指令" class="headerlink" title="5. JSP指令"></a>5. JSP指令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">告诉JSP引擎如何jsp文件中的内容</span><br><span class="line">语法： &lt;%@ 指令名称 属性名称1＝“属性值1” 属性名称2＝“属性值2” 。。。。。%&gt;</span><br><span class="line">示例：&lt;%@ page language=*&quot;java&quot;* contentType=&quot;text/html; charset=UTF-8&quot;  pageEncoding=*&quot;UTF-8&quot;*%&gt;</span><br></pre></td></tr></table></figure><p>page指令</p><p>作用：用于定义JSP页面的各种属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import和java代码的含义一样</span><br><span class="line">&lt;%@ page import=&quot;java.util.Date,java.util.List&quot;%&gt;</span><br><span class="line">或者：</span><br><span class="line">&lt;%@ page import=&quot;java.util.Date&quot;%&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.util.List&quot;%&gt;</span><br><span class="line">session:是否会自动创建session对象，默认值为true;</span><br><span class="line">buffer:JSP中有java.servlet.jsp.JspWriter输出字符流。设置输出数据的缓存大小。默认8kb.</span><br><span class="line">errorPage:如果页面中有错误，跳转到指定的资源 errorPage=&quot;/uri&quot; 如果写“/”则代表当前应用的目录下，绝对路径。如果不写“/”则代表相对路径</span><br><span class="line">isErrorPage:是否创建throwable对象。默认是false</span><br><span class="line">contentType:等同于response.setContentType(“text/html”；charset=utf-8);服务器发送客户端的内容编码</span><br><span class="line">pageEncoding: Jsp文件本身的编码</span><br><span class="line">isELIgnored: 是否支持EL表达式。默认是false,支持表达式, 是true,不支持表达式，$&#123;1+1&#125;;false输出结果2   true按照原样输出</span><br></pre></td></tr></table></figure><p> include指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">include指令</span><br><span class="line">静态包含：把其它资源包含到当前页面中  </span><br><span class="line">&lt;%@ include file=&quot;header.jsp&quot; %&gt;</span><br><span class="line">动态包含： </span><br><span class="line">&lt;jsp:include page=“header.jsp&quot;&gt;&lt;/jsp:include&gt;</span><br><span class="line">     </span><br><span class="line">两者的区别：翻译的时间段不同(可在tomcat工作目录下查看)</span><br><span class="line">静态包含：在翻译时就把两个文件进行合并</span><br><span class="line">动态包含：不会合并文件，当代码执行到include时，才包含另一个文件的内容</span><br></pre></td></tr></table></figure><p> taglib指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">作用：在JSP页面中导入JSTL标签库。替换jsp中的java代码片段。</span><br><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot;prefix=&quot;c&quot; %&gt;</span><br></pre></td></tr></table></figure><h5 id="6-JSP的6个动作标签"><a href="#6-JSP的6个动作标签" class="headerlink" title="6. JSP的6个动作标签"></a>6. JSP的6个动作标签</h5><p>使用标签的形式表示一段java代码，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jsp:include 动态包含</span><br><span class="line">jsp:forward请求转发</span><br><span class="line">jsp:param 请求设置参数</span><br><span class="line">jsp:useBean 创建一个对象</span><br><span class="line">jsp:setProperty给指定的对象属性赋值</span><br><span class="line">jsp:getProperty取出指定的对象属值</span><br></pre></td></tr></table></figure><h5 id="7-内置对象（重点）"><a href="#7-内置对象（重点）" class="headerlink" title="7. 内置对象（重点）"></a>7. 内置对象（重点）</h5><table><thead><tr><th>对象名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>request</td><td>javax.servlet.http.HttpServletRequest</td><td></td></tr><tr><td>response</td><td>javax.servlet.http.HttpServletResponse</td><td></td></tr><tr><td>session</td><td>javax.servlet.http.HttpSession</td><td>由session=“true”开关</td></tr><tr><td>application</td><td>javax.servlet.ServletContext</td><td></td></tr><tr><td>exception</td><td>java.lang.Throwable</td><td>由isErrorPage=“false”开关</td></tr><tr><td>page</td><td>java.lang.Object当前对象this</td><td>当前JSP的servlet实例，相当于对像</td></tr><tr><td>config</td><td>javax.servlet.ServletConfig</td><td></td></tr><tr><td>pageContext</td><td>javax.servlet.jsp.PageContext</td><td>这个对象代表页面上下文，该对象主要用于访问JSP之间的共享数据。 相当于类,可以在其中获取其几个内置</td></tr><tr><td>out</td><td>javax.servlet.jsp.JspWriter</td><td>javax.servlet.jsp.JspWriter</td></tr></tbody></table><p>代码演示：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span> isErrorPage=<span class="string">"true"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;JSP内置对象&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="comment">//页面上下文对象</span></span><br><span class="line">pageContext.setAttribute(<span class="string">"msg"</span>, <span class="string">"我是PageContext对象"</span>);</span><br><span class="line">System.out.println(pageContext.getAttribute(<span class="string">"msg"</span>));</span><br><span class="line"><span class="comment">//请求对象</span></span><br><span class="line">System.out.println(<span class="string">"请求对象："</span>+request);</span><br><span class="line"><span class="comment">//响应对象</span></span><br><span class="line">response.getWriter().print(<span class="string">"OK"</span>);</span><br><span class="line"><span class="comment">//当前页面对象</span></span><br><span class="line">System.out.println(page.getClass());<span class="comment">//输出到控制台</span></span><br><span class="line"><span class="comment">//输出对象</span></span><br><span class="line">out.print(<span class="number">48</span>);<span class="comment">//输出到浏览器：48</span></span><br><span class="line">out.write(<span class="number">48</span>);<span class="comment">//输出到浏览器：0</span></span><br><span class="line"><span class="keyword">int</span> no=<span class="number">101</span>;</span><br><span class="line"><span class="comment">//会话对象</span></span><br><span class="line">System.out.println(session);</span><br><span class="line"><span class="comment">//全局对象</span></span><br><span class="line">System.out.println(application.getRealPath(<span class="string">"/"</span>));</span><br><span class="line"><span class="comment">//配置对象--初始化参数</span></span><br><span class="line">System.out.println(config.getServletName());</span><br><span class="line"><span class="comment">//异常对象</span></span><br><span class="line">System.out.println(exception);</span><br><span class="line">System.out.println(application);</span><br><span class="line">application.setAttribute(<span class="string">"author"</span>, <span class="string">"1711"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;h1&gt;jsp脚本：&lt;%=no %&gt;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;jsp脚本：&lt;% out.print(no); %&gt;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="8-pageContext对象-重点"><a href="#8-pageContext对象-重点" class="headerlink" title="8. pageContext对象(重点)"></a>8. pageContext对象(重点)</h5><p> 域对象</p><p>可以操作其他三个域对象(request,session,application)的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void setAttribute(String name,Object o);</span><br><span class="line">Object getAttribute(String name);</span><br><span class="line">void removeAttribute(String name);</span><br><span class="line"></span><br><span class="line">操作其它域对象的方法</span><br><span class="line">    void setAttribute(String name,Objecto,int Scope);</span><br><span class="line">    Object getAttribute(String name,intScope);</span><br><span class="line">    void removeAttribute(String name,intScope);</span><br><span class="line">Scope作用域，值如下:</span><br><span class="line">    PageContext.PAGE_SCOPE</span><br><span class="line">    PageContext.REQUEST_SCOPE</span><br><span class="line">    PageContext.SESSION_SCOPE</span><br><span class="line">    PageContext.APPLICATION_SCOPE</span><br><span class="line"></span><br><span class="line">findAttribute(Stringname)自动从page,request，session，application依次查找，</span><br><span class="line">找到了就取值，结束查找  （作用域的范围由小到大）</span><br></pre></td></tr></table></figure><p>它可以创建其它的8个隐式对象</p><p>  在普通类中可以通过PageContext获取其它JSP隐式对象,具体如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getException方法返回exception隐式对象 </span><br><span class="line">getPage方法返回page隐式对象</span><br><span class="line">getRequest方法返回request隐式对象 </span><br><span class="line">getResponse方法返回response隐式对象 </span><br><span class="line">getServletConfig方法返回config隐式对象</span><br><span class="line">getServletContext方法返回application隐式对象</span><br><span class="line">getSession方法返回session隐式对象 </span><br><span class="line">getOut方法返回out隐式对象</span><br></pre></td></tr></table></figure><p>提供了简易方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pageContext.forward(“2.jsp”);</span><br><span class="line">pageContext.include(“2.jsp”);</span><br></pre></td></tr></table></figure><h4 id="二-EL表达式"><a href="#二-EL表达式" class="headerlink" title="二. EL表达式"></a>二. EL表达式</h4><h5 id="1-EL概述和基本语法"><a href="#1-EL概述和基本语法" class="headerlink" title="1. EL概述和基本语法"></a>1. EL概述和基本语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">EL表达式:expression language表达式语言</span><br><span class="line">目的:简化jsp中java代码开发</span><br><span class="line">它不是一种开发语言，是jsp中获取数据的一种规范</span><br><span class="line">格式如： $&#123;EL表达式&#125; 等价于findAttribute(name)</span><br><span class="line">默认从pageContext中找，找不到，则request中找，再找不到，则session找，再找不到，则application中找</span><br><span class="line">再找不到，不作显示，不会报错</span><br><span class="line">即寻找顺序，从小的域的范围到大的域的范围寻找，即pageContext--request--session--application</span><br><span class="line">也可以精确指定域的范围寻找 $&#123;域.key&#125;</span><br></pre></td></tr></table></figure><h5 id="2-EL的具体功能"><a href="#2-EL的具体功能" class="headerlink" title="2. EL的具体功能"></a>2. EL的具体功能</h5><p>​       案例1：获取实体类中的属性值</p><blockquote>   <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;    &lt;%</span><br><span class="line">&gt;    User user= <span class="keyword">new</span> User();</span><br><span class="line">&gt;    user.setName(<span class="string">"gggg"</span>);</span><br><span class="line">&gt;</span><br><span class="line">&gt;    Address  address = <span class="keyword">new</span> Address();</span><br><span class="line">&gt;    address.setAddr(<span class="string">"北京市海淀区"</span>);</span><br><span class="line">&gt;    user.setAddress(address);</span><br><span class="line">&gt;</span><br><span class="line">&gt;    session.setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">&gt;    <span class="comment">/* request.getRequestDispatcher("testEl.jsp").forward(request, response); */</span></span><br><span class="line">&gt;    response.sendRedirect(<span class="string">"testEl.jsp"</span>);</span><br><span class="line">&gt;    %&gt;</span><br><span class="line">&gt;    &lt;!--  EL表达式中的.表示调用该属性的get方法 --&gt;</span><br><span class="line">&gt;    &lt;%-- 我是：$住在&#123;user.name &#125;  , 住在  $&#123;user.address.addr &#125; --%&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><h5 id="3-使用list和map"><a href="#3-使用list和map" class="headerlink" title="3. 使用list和map"></a>3. 使用list和map</h5><blockquote>   <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&gt;    &lt;%</span><br><span class="line">&gt;    List&lt;String&gt; list =<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">&gt;    list.add(<span class="string">"aa"</span>);</span><br><span class="line">&gt;    list.add(<span class="string">"bb"</span>);</span><br><span class="line">&gt;    list.add(<span class="string">"cc"</span>);</span><br><span class="line">&gt;    pageContext.setAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">&gt;</span><br><span class="line">&gt;    Map&lt;String,String&gt; map =<span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">&gt;    map.put(<span class="string">"aa"</span>, <span class="string">"11"</span>);</span><br><span class="line">&gt;    map.put(<span class="string">"bb"</span>, <span class="string">"22"</span>);</span><br><span class="line">&gt;    map.put(<span class="string">"cc"</span>, <span class="string">"33"</span>);</span><br><span class="line">&gt;</span><br><span class="line">&gt;    pageContext.setAttribute(<span class="string">"map"</span>, map);</span><br><span class="line">&gt;</span><br><span class="line">&gt;    %&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt;    &lt;h1&gt;1.以数组的下标形式获取list值&lt;/h1&gt;</span><br><span class="line">&gt;    $&#123;list[<span class="number">0</span>]&#125;&lt;br&gt;</span><br><span class="line">&gt;    $&#123;list[<span class="number">1</span>]&#125;&lt;br&gt;</span><br><span class="line">&gt;    $&#123;list[<span class="number">2</span>]&#125;&lt;br&gt;</span><br><span class="line">&gt;    &lt;h1&gt;2.以提供的方法get(index)&lt;/h1&gt;</span><br><span class="line">&gt;    $&#123;list.get(<span class="number">0</span>)&#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;    &lt;h1&gt;3.使用El表达式获取map中的值(以key的形式获取)&lt;/h1&gt;</span><br><span class="line">&gt;    $&#123;map.aa&#125;&lt;br&gt;</span><br><span class="line">&gt;    $&#123;map.bb&#125;&lt;br&gt;</span><br><span class="line">&gt;    $&#123;map.cc&#125;&lt;br&gt;</span><br><span class="line">&gt;    &lt;h1&gt;4.使用El表达式获取map中的值&lt;/h1&gt;</span><br><span class="line">&gt;    $&#123;map[<span class="string">'aa'</span>]&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><h5 id="4-使用EL表达式的empty关键"><a href="#4-使用EL表达式的empty关键" class="headerlink" title="4. 使用EL表达式的empty关键"></a>4. 使用EL表达式的empty关键</h5><blockquote>   <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;    &lt;% String s1=<span class="string">""</span>;</span><br><span class="line">&gt;    pageContext.setAttribute(<span class="string">"s1"</span>, s1);</span><br><span class="line">&gt;    String s2=<span class="keyword">null</span>;</span><br><span class="line">&gt;    pageContext.setAttribute(<span class="string">"s2"</span>, s2);</span><br><span class="line">&gt;    String s3=<span class="string">"122222"</span>;</span><br><span class="line">&gt;    pageContext.setAttribute(<span class="string">"s3"</span>, s3);</span><br><span class="line">&gt;    List list1 =<span class="keyword">new</span> ArrayList();</span><br><span class="line">&gt;    pageContext.setAttribute(<span class="string">"list1"</span>, list1);</span><br><span class="line">&gt;    %&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt;    &lt;!-- empty关键只要内容是空<span class="keyword">true</span> --&gt;</span><br><span class="line">&gt;    $&#123;empty s1&#125;&lt;br&gt;</span><br><span class="line">&gt;    $&#123;empty s2&#125;&lt;br&gt;</span><br><span class="line">&gt;    $&#123;empty  s3&#125;&lt;br&gt;</span><br><span class="line">&gt;    $&#123;empty  list1&#125;&lt;br&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="三-JSTL"><a href="#三-JSTL" class="headerlink" title="三. JSTL"></a>三. JSTL</h4><h5 id="1-什么是JSTL"><a href="#1-什么是JSTL" class="headerlink" title="1. 什么是JSTL"></a>1. 什么是JSTL</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSL:全称JavaServerPages Standard TagLibrary,JSP标准标签库</span><br></pre></td></tr></table></figure><h5 id="2-JSTL的作用"><a href="#2-JSTL的作用" class="headerlink" title="2. JSTL的作用"></a>2. JSTL的作用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实现JSP页面中逻辑处理。如判断， 循环等；</span><br></pre></td></tr></table></figure><h5 id="3-使用JSTL"><a href="#3-使用JSTL" class="headerlink" title="3.使用JSTL"></a>3.使用JSTL</h5><p>必须在JSP页面添加tablib指令库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% @  tagliburi=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;&gt;</span><br></pre></td></tr></table></figure><h5 id="4-常用标签介绍"><a href="#4-常用标签介绍" class="headerlink" title="4. 常用标签介绍"></a>4. 常用标签介绍</h5><p>通用标签set,out,remove</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 基础标签:声明变量，输出变量，移除变量，变量默认值 --&gt;</span><br><span class="line">&lt;h3&gt;基础标签:声明变量，输出变量，移除变量，变量默认值&lt;/h3&gt;</span><br><span class="line">&lt;!--1. var：是变量名  value:变量的值(必须是EL表达式)--&gt;</span><br><span class="line">&lt;p:set var=&quot;k&quot; value=&quot;$&#123;1+1&#125;&quot;&gt;&lt;/p:set&gt;</span><br><span class="line">&lt;!--2. 输出变量k   value:使用EL表示表示变量--&gt;</span><br><span class="line">移除前输出的内容：&lt;p:out value=&quot;$&#123;k&#125;&quot;&gt;&lt;/p:out&gt;&lt;br&gt;</span><br><span class="line">&lt;!--3.移除指定变量  --&gt;</span><br><span class="line">&lt;p:remove var=&quot;k&quot;/&gt;</span><br><span class="line">移除后输出的内容：&lt;p:out value=&quot;$&#123;k&#125;&quot;&gt;&lt;/p:out&gt;&lt;br&gt;</span><br><span class="line">&lt;!--4.给指定变量赋默认值  --&gt;</span><br><span class="line">默认值：&lt;p:out value=&quot;$&#123;m&#125;&quot; default=&quot;123456&quot;&gt;&lt;/p:out&gt;</span><br></pre></td></tr></table></figure><p> 条件标签if,choose</p><p>&lt;c:if&gt;</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 条件标签：<span class="keyword">if</span>  choose --&gt;</span><br><span class="line">&lt;!-- test属性中是条件，但是条件需要使用EL表达式来书写 --&gt;</span><br><span class="line">&lt;h3&gt;条件标签：if&lt;/h3&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;8&gt;2 &#125;"</span>&gt;</span><br><span class="line">    <span class="number">8</span>大于<span class="number">2</span>是成立的</span><br><span class="line">     &lt;/c:if&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;8&lt;2 &#125;"</span>&gt;</span><br><span class="line">    <span class="number">8</span>小于<span class="number">2</span>是成立的</span><br><span class="line">    &lt;/c:if&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;%--  如果只是一个基本数据类型直接书写不需要$&#123;&#125; --%&gt;</span><br><span class="line">&lt;c:set var="m" value="$&#123;5&#125;"&gt;&lt;/c:set&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;m&gt;3&#125;"</span>&gt;</span><br><span class="line">     <span class="number">5</span>大于<span class="number">3</span>是成立的</span><br><span class="line">  &lt;/c:if&gt;</span><br></pre></td></tr></table></figure><p>&lt;c:choose&gt;</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;条件标签：choose(等价于java中switch)&lt;/h3&gt;</span><br><span class="line">&lt;%-- 测试成绩等级 &gt;<span class="number">90</span> 优秀   &gt;<span class="number">80</span>  良好    &gt;<span class="number">70</span> 中等   &gt;<span class="number">60</span>及格--%&gt;</span><br><span class="line">&lt;c:set var="score" value="$&#123;80&#125;"&gt;&lt;/c:set&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">&lt;c:when test="$&#123;score&gt;=90 &#125;"&gt;优秀&lt;/c:when&gt;</span><br><span class="line">&lt;c:when test="$&#123;score&gt;=80 &#125;"&gt;良好&lt;/c:when&gt;</span><br><span class="line">&lt;c:when test="$&#123;score&gt;=70 &#125;"&gt;中等&lt;/c:when&gt;</span><br><span class="line">&lt;c:when test="$&#123;score&gt;=60 &#125;"&gt;及格&lt;/c:when&gt;</span><br><span class="line">&lt;c:otherwise&gt;不及格&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><p>迭代标签foreach</p><p>for基础遍历</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 遍历<span class="keyword">for</span>:输出<span class="number">1</span>到<span class="number">10</span> 的值 --&gt;</span><br><span class="line">&lt;!--var: 变量，把遍历的每一个值都存储在变量中进行输出</span><br><span class="line">    begin：开始   如果是变量使用EL表达式表示</span><br><span class="line">    end:结束    如果是变量使用EL表达式表示</span><br><span class="line">    step:间隔的长度</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">     System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">     --&gt;</span><br><span class="line">示例代码：</span><br><span class="line">&lt;c:forEach var=<span class="string">"i"</span> begin=<span class="string">"1"</span> end=<span class="string">"10"</span> step=<span class="string">"2"</span>&gt;</span><br><span class="line"> $&#123;i&#125;&lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><p>foreach遍历</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;测试list集合遍历获取学生列表&lt;/h3&gt;</span><br><span class="line">    &lt;table border=<span class="string">"1"</span> width=<span class="string">"80%"</span> bordercolor=<span class="string">"red"</span> cellspacing=<span class="string">"0"</span></span><br><span class="line">        align=<span class="string">"center"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;学号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;成绩&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;班级&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;是否是第一个&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;是否是最后一个&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;计数count&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;索引index&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line"> &lt;!-- varStatus:变量状态：遍历出的每一项内容的状态：</span><br><span class="line">    isFirst()      first</span><br><span class="line">    isLast()       last</span><br><span class="line">    getCount()     count  计数  重要的</span><br><span class="line">    getIndex()     index</span><br><span class="line">     --&gt;</span><br><span class="line">     &lt;!-- var :遍历出的每一项使用变量先存储</span><br><span class="line">          items：集合(使用El表达式)</span><br><span class="line">          --&gt;</span><br><span class="line">        &lt;c:forEach var=<span class="string">"stu"</span> items=<span class="string">"$&#123;students&#125;"</span> varStatus=<span class="string">"vs"</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;$&#123;stu.id&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;stu.name&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;stu.score&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;stu.classes&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;vs.first&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;vs.last&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;vs.count&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;vs.index&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line"> &lt;/table&gt;</span><br></pre></td></tr></table></figure><h4 id="作业题"><a href="#作业题" class="headerlink" title="作业题"></a>作业题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、使用JSP实现登录注册和图书后台管理系统</span><br><span class="line">用户注册</span><br><span class="line">用户登录（欢迎XXX登录）</span><br><span class="line">查看所有图书信息（id,bookname,price,author,type,img(可有可无)）</span><br><span class="line">新增图书</span><br><span class="line">修改图书（bookname,price,author,type其中属性一个或多个）</span><br><span class="line">删除指定图书</span><br><span class="line">退出登录</span><br></pre></td></tr></table></figure><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、Jsp和Servlet的区别</span><br><span class="line">2、Jsp的执行原理</span><br><span class="line">3、说说Jsp的隐藏对象有哪些</span><br><span class="line">4、说出Jsp内置对象以及方法</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JSP&quot;&gt;&lt;a href=&quot;#JSP&quot; class=&quot;headerlink&quot; title=&quot;JSP&quot;&gt;&lt;/a&gt;JSP&lt;/h3&gt;&lt;h4 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今日内容&quot; class=&quot;headerlink&quot; title=&quot;今日内容&quot;&gt;&lt;/a&gt;今日内
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/Web%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/"/>
    <id>http://kongxianghe.top/2018/10/23/Web之文件上传和下载/</id>
    <published>2018-10-23T14:06:03.436Z</published>
    <updated>2018-07-09T06:15:57.080Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h3><h4 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、文件上传</span><br><span class="line">   一般文件上传</span><br><span class="line">   有缓冲区文件上传</span><br><span class="line">2、文件下载</span><br><span class="line">3、在数据库中链接存取</span><br><span class="line">4、作业</span><br></pre></td></tr></table></figure><h4 id="一-文件上传"><a href="#一-文件上传" class="headerlink" title="一. 文件上传"></a>一. 文件上传</h4><h5 id="1-文件上传三要素"><a href="#1-文件上传三要素" class="headerlink" title="1. 文件上传三要素"></a>1. 文件上传三要素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 提供form表单,method必须是post!</span><br><span class="line">2. form表单的enctype必须是multipart/form-data</span><br><span class="line">3. 提供 input type=&quot;file&quot; 类型表单输入</span><br></pre></td></tr></table></figure><h5 id="2-实现文件上传"><a href="#2-实现文件上传" class="headerlink" title="2.实现文件上传"></a>2.实现文件上传</h5><p> <strong>项目准备</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">导入: commons-fileupload的jar包</span><br><span class="line"> commons-io的jar包</span><br></pre></td></tr></table></figure><p><strong>编写上传页面</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"url"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        上传用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        上传文件1：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file1"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        上传文件2：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file2"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>编写处理代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.gacl.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItem;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadHandleServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">      <span class="comment">//得到上传文件的保存目录，将上传的文件存放于WEB-INF目录下，不允许外界直接访问，保证上传文件的安全</span></span><br><span class="line">       String savePath = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">"/WEB-INF/upload"</span>);</span><br><span class="line">       File file = <span class="keyword">new</span> File(savePath);</span><br><span class="line">       <span class="comment">//判断上传文件的保存目录是否存在</span></span><br><span class="line">       <span class="keyword">if</span> (!file.exists() &amp;&amp; !file.isDirectory()) &#123;</span><br><span class="line">           System.out.println(savePath+<span class="string">"目录不存在，需要创建"</span>);</span><br><span class="line">            <span class="comment">//创建目录</span></span><br><span class="line">             file.mkdir();</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="comment">//消息提示</span></span><br><span class="line">        String message = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//使用Apache文件上传组件处理文件上传步骤：</span></span><br><span class="line">            <span class="comment">//1、创建一个DiskFileItemFactory工厂</span></span><br><span class="line">            DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">            <span class="comment">//2、创建一个文件上传解析器</span></span><br><span class="line">            ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">            <span class="comment">//解决上传文件名的中文乱码</span></span><br><span class="line">            upload.setHeaderEncoding(<span class="string">"UTF-8"</span>); </span><br><span class="line">            <span class="comment">//3、判断提交上来的数据是否是上传表单的数据</span></span><br><span class="line">            <span class="keyword">if</span>(!ServletFileUpload.isMultipartContent(request))&#123;</span><br><span class="line">               <span class="comment">//按照传统方式获取数据</span></span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="comment">//4、使用ServletFileUpload解析器解析上传数据，解析结果返回的是一个List&lt;FileItem&gt;集合，每一个FileItem对应一个Form表单的输入项</span></span><br><span class="line">            List&lt;FileItem&gt; list = upload.parseRequest(request);</span><br><span class="line">            <span class="keyword">for</span>(FileItem item : list)&#123;</span><br><span class="line">                <span class="comment">//如果fileitem中封装的是普通输入项的数据</span></span><br><span class="line">                <span class="keyword">if</span>(item.isFormField())&#123;</span><br><span class="line">                   String name = item.getFieldName();</span><br><span class="line">                   <span class="comment">//解决普通输入项的数据的中文乱码问题</span></span><br><span class="line">                   String value = item.getString(<span class="string">"UTF-8"</span>);</span><br><span class="line">                   <span class="comment">//value = new String(value.getBytes("iso8859-1"),"UTF-8");</span></span><br><span class="line">                   System.out.println(name + <span class="string">"="</span> + value);</span><br><span class="line">                 &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//如果fileitem中封装的是上传文件</span></span><br><span class="line">                    <span class="comment">//得到上传的文件名称，</span></span><br><span class="line">                    String filename = item.getName();</span><br><span class="line">                    <span class="keyword">if</span>(filename==<span class="keyword">null</span> || filename.trim().equals(<span class="string">""</span>))&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">              <span class="comment">//注意：不同的浏览器提交的文件名是不一样的，有些浏览器提交上来的文件名是带有路径的，如：  c:\a\b\1.txt，而有些只是单纯的文件名，如：1.txt</span></span><br><span class="line">                    <span class="comment">//处理获取到的上传文件的文件名的路径部分，只保留文件名部分</span></span><br><span class="line">                  filename = filename.substring(filename.lastIndexOf(<span class="string">"\\"</span>)+<span class="number">1</span>);</span><br><span class="line">                  <span class="comment">//获取item中的上传文件的输入流</span></span><br><span class="line">                  InputStream in = item.getInputStream();</span><br><span class="line">                  <span class="comment">//创建一个文件输出流</span></span><br><span class="line">                  FileOutputStream out = <span class="keyword">new</span> FileOutputStream(savePath + <span class="string">"\\"</span> + filename);</span><br><span class="line">                  <span class="comment">//创建一个缓冲区</span></span><br><span class="line">                  <span class="keyword">byte</span> buffer[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                  <span class="comment">//判断输入流中的数据是否已经读完的标识</span></span><br><span class="line">                  <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                  <span class="comment">//循环将输入流读入到缓冲区当中，(len=in.read(buffer))&gt;0就表示in里面还有数据</span></span><br><span class="line">                  <span class="keyword">while</span>((len=in.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                  <span class="comment">//使用FileOutputStream输出流将缓冲区的数据写入到指定的目录(savePath + "\\" + filename)当中</span></span><br><span class="line">                       out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">//关闭流</span></span><br><span class="line">                   in.close();</span><br><span class="line">                   out.close();</span><br><span class="line">                  <span class="comment">//删除处理文件上传时生成的临时文件</span></span><br><span class="line">                   item.delete();</span><br><span class="line">                   message = <span class="string">"文件上传成功！"</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">               &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    message= <span class="string">"文件上传失败！"</span>;</span><br><span class="line">                    e.printStackTrace();   </span><br><span class="line">                &#125;</span><br><span class="line">                request.setAttribute(<span class="string">"message"</span>,message);</span><br><span class="line">                request.getRequestDispatcher(<span class="string">"/message.jsp"</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UploadHandleServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>me.gacl.web.controller.UploadHandleServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UploadHandleServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/UploadHandleServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-文件上传细节注意"><a href="#3-文件上传细节注意" class="headerlink" title="3 .文件上传细节注意"></a>3 .文件上传细节注意</h5><p>上述的代码虽然可以成功将文件上传到服务器上面的指定目录当中，但是文件上传功能有许多需要注意的小细节问题，以下列出的几点需要特别注意的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、为保证服务器安全，上传文件应该放在外界无法直接访问的目录下，比如放于WEB-INF目录下。</span><br><span class="line">2、为防止文件覆盖的现象发生，要为上传文件产生一个唯一的文件名。</span><br><span class="line">3、为防止一个目录下面出现太多文件，要使用hash算法打散存储.</span><br><span class="line">4、要限制上传文件的最大值。</span><br><span class="line">5、要限制上传文件的类型，在收到上传文件名时，判断后缀名是否合法。</span><br></pre></td></tr></table></figure><p>最终处理代码改进为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadHandleServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">                <span class="comment">//得到上传文件的保存目录，将上传的文件存放于WEB-INF目录下，不允许外界直接访问，保证上传文件的安全</span></span><br><span class="line">                String savePath = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">"/WEB-INF/upload"</span>);</span><br><span class="line">                <span class="comment">//上传时生成的临时文件保存目录</span></span><br><span class="line">                String tempPath = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">"/WEB-INF/temp"</span>);</span><br><span class="line">                File tmpFile = <span class="keyword">new</span> File(tempPath);</span><br><span class="line">                <span class="keyword">if</span> (!tmpFile.exists()) &#123;</span><br><span class="line">                    <span class="comment">//创建临时目录</span></span><br><span class="line">                    tmpFile.mkdir();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//消息提示</span></span><br><span class="line">                String message = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">//使用Apache文件上传组件处理文件上传步骤：</span></span><br><span class="line">                    <span class="comment">//1、创建一个DiskFileItemFactory工厂</span></span><br><span class="line">                    DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">                    <span class="comment">//设置工厂的缓冲区的大小，当上传的文件大小超过缓冲区的大小时，就会生成一个临时文件存放到指定的临时目录当中。</span></span><br><span class="line">                    factory.setSizeThreshold(<span class="number">1024</span>*<span class="number">100</span>);<span class="comment">//设置缓冲区的大小为100KB，如果不指定，那么缓冲区的大小默认是10KB</span></span><br><span class="line">                    <span class="comment">//设置上传时生成的临时文件的保存目录</span></span><br><span class="line">                    factory.setRepository(tmpFile);</span><br><span class="line">                    <span class="comment">//2、创建一个文件上传解析器</span></span><br><span class="line">                    ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">                    <span class="comment">//监听文件上传进度</span></span><br><span class="line">                    upload.setProgressListener(<span class="keyword">new</span> ProgressListener()&#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">long</span> pBytesRead, <span class="keyword">long</span> pContentLength, <span class="keyword">int</span> arg2)</span> </span>&#123;</span><br><span class="line">                            System.out.println(<span class="string">"文件大小为："</span> + pContentLength + <span class="string">",当前已处理："</span> + pBytesRead);</span><br><span class="line">                            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                             * 文件大小为：14608,当前已处理：4096</span></span><br><span class="line"><span class="comment">                                文件大小为：14608,当前已处理：7367</span></span><br><span class="line"><span class="comment">                                文件大小为：14608,当前已处理：11419</span></span><br><span class="line"><span class="comment">                                文件大小为：14608,当前已处理：14608</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                     <span class="comment">//解决上传文件名的中文乱码</span></span><br><span class="line">                    upload.setHeaderEncoding(<span class="string">"UTF-8"</span>); </span><br><span class="line">                    <span class="comment">//3、判断提交上来的数据是否是上传表单的数据</span></span><br><span class="line">                    <span class="keyword">if</span>(!ServletFileUpload.isMultipartContent(request))&#123;</span><br><span class="line">                        <span class="comment">//按照传统方式获取数据</span></span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//设置上传单个文件的大小的最大值，目前是设置为1024*1024字节，也就是1MB</span></span><br><span class="line">                    upload.setFileSizeMax(<span class="number">1024</span>*<span class="number">1024</span>);</span><br><span class="line">                    <span class="comment">//设置上传文件总量的最大值，最大值=同时上传的多个文件的大小的最大值的和，目前设置为10MB</span></span><br><span class="line">                    upload.setSizeMax(<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10</span>);</span><br><span class="line">                    <span class="comment">//4、使用ServletFileUpload解析器解析上传数据，解析结果返回的是一个List&lt;FileItem&gt;集合，每一个FileItem对应一个Form表单的输入项</span></span><br><span class="line">                    List&lt;FileItem&gt; list = upload.parseRequest(request);</span><br><span class="line">                    <span class="keyword">for</span>(FileItem item : list)&#123;</span><br><span class="line">                        <span class="comment">//如果fileitem中封装的是普通输入项的数据</span></span><br><span class="line">                        <span class="keyword">if</span>(item.isFormField())&#123;</span><br><span class="line">                            String name = item.getFieldName();</span><br><span class="line">                            <span class="comment">//解决普通输入项的数据的中文乱码问题</span></span><br><span class="line">                            String value = item.getString(<span class="string">"UTF-8"</span>);</span><br><span class="line">                            <span class="comment">//value = new String(value.getBytes("iso8859-1"),"UTF-8");</span></span><br><span class="line">                            System.out.println(name + <span class="string">"="</span> + value);</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;<span class="comment">//如果fileitem中封装的是上传文件</span></span><br><span class="line">                            <span class="comment">//得到上传的文件名称，</span></span><br><span class="line">                            String filename = item.getName();</span><br><span class="line">                            System.out.println(filename);</span><br><span class="line">                            <span class="keyword">if</span>(filename==<span class="keyword">null</span> || filename.trim().equals(<span class="string">""</span>))&#123;</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//注意：不同的浏览器提交的文件名是不一样的，有些浏览器提交上来的文件名是带有路径的，如：  c:\a\b\1.txt，而有些只是单纯的文件名，如：1.txt</span></span><br><span class="line">                            <span class="comment">//处理获取到的上传文件的文件名的路径部分，只保留文件名部分</span></span><br><span class="line">                            filename = filename.substring(filename.lastIndexOf(<span class="string">"\\"</span>)+<span class="number">1</span>);</span><br><span class="line">                            <span class="comment">//得到上传文件的扩展名</span></span><br><span class="line">                            String fileExtName = filename.substring(filename.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">                            <span class="comment">//如果需要限制上传的文件类型，那么可以通过文件的扩展名来判断上传的文件类型是否合法</span></span><br><span class="line">                            System.out.println(<span class="string">"上传的文件的扩展名是："</span>+fileExtName);</span><br><span class="line">                            <span class="comment">//获取item中的上传文件的输入流</span></span><br><span class="line">                            InputStream in = item.getInputStream();</span><br><span class="line">                            <span class="comment">//得到文件保存的名称</span></span><br><span class="line">                            String saveFilename = makeFileName(filename);</span><br><span class="line">                            <span class="comment">//得到文件的保存目录</span></span><br><span class="line">                            String realSavePath = makePath(saveFilename, savePath);</span><br><span class="line">                            <span class="comment">//创建一个文件输出流</span></span><br><span class="line">                            FileOutputStream out = <span class="keyword">new</span> FileOutputStream(realSavePath + <span class="string">"\\"</span> + saveFilename);</span><br><span class="line">                            <span class="comment">//创建一个缓冲区</span></span><br><span class="line">                            <span class="keyword">byte</span> buffer[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                            <span class="comment">//判断输入流中的数据是否已经读完的标识</span></span><br><span class="line">                            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                            <span class="comment">//循环将输入流读入到缓冲区当中，(len=in.read(buffer))&gt;0就表示in里面还有数据</span></span><br><span class="line">                            <span class="keyword">while</span>((len=in.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                                <span class="comment">//使用FileOutputStream输出流将缓冲区的数据写入到指定的目录(savePath + "\\" + filename)当中</span></span><br><span class="line">                                out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//关闭输入流</span></span><br><span class="line">                            in.close();</span><br><span class="line">                            <span class="comment">//关闭输出流</span></span><br><span class="line">                            out.close();</span><br><span class="line">                            <span class="comment">//删除处理文件上传时生成的临时文件</span></span><br><span class="line">                            <span class="comment">//item.delete();</span></span><br><span class="line">                            message = <span class="string">"文件上传成功！"</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (FileUploadBase.FileSizeLimitExceededException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    request.setAttribute(<span class="string">"message"</span>, <span class="string">"单个文件超出最大值！！！"</span>);</span><br><span class="line">                    request.getRequestDispatcher(<span class="string">"/message.jsp"</span>).forward(request, response);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (FileUploadBase.SizeLimitExceededException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    request.setAttribute(<span class="string">"message"</span>, <span class="string">"上传文件的总的大小超出限制的最大值！！！"</span>);</span><br><span class="line">                    request.getRequestDispatcher(<span class="string">"/message.jsp"</span>).forward(request, response);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    message= <span class="string">"文件上传失败！"</span>;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                request.setAttribute(<span class="string">"message"</span>,message);</span><br><span class="line">                request.getRequestDispatcher(<span class="string">"/message.jsp"</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Method</span>: makeFileName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 生成上传文件的文件名，文件名以：uuid+"_"+文件的原始名称</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Anthor</span>:孤傲苍狼</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> filename 文件的原始名称</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> uuid+"_"+文件的原始名称</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">makeFileName</span><span class="params">(String filename)</span></span>&#123;  <span class="comment">//2.jpg</span></span><br><span class="line">        <span class="comment">//为防止文件覆盖的现象发生，要为上传文件产生一个唯一的文件名</span></span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString() + <span class="string">"_"</span> + filename;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为防止一个目录下面出现太多文件，要使用hash算法打散存储</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> filename 文件名，要根据文件名生成存储目录</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> savePath 文件存储路径</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 新的存储目录</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">makePath</span><span class="params">(String filename,String savePath)</span></span>&#123;</span><br><span class="line">        <span class="comment">//得到文件名的hashCode的值，得到的就是filename这个字符串对象在内存中的地址</span></span><br><span class="line">        <span class="keyword">int</span> hashcode = filename.hashCode();</span><br><span class="line">        <span class="keyword">int</span> dir1 = hashcode&amp;<span class="number">0xf</span>;  <span class="comment">//0--15</span></span><br><span class="line">        <span class="keyword">int</span> dir2 = (hashcode&amp;<span class="number">0xf0</span>)&gt;&gt;<span class="number">4</span>;  <span class="comment">//0-15</span></span><br><span class="line">        <span class="comment">//构造新的保存目录</span></span><br><span class="line">        String dir = savePath + <span class="string">"\\"</span> + dir1 + <span class="string">"\\"</span> + dir2;  <span class="comment">//upload\2\3  upload\3\5</span></span><br><span class="line">        <span class="comment">//File既可以代表文件也可以代表目录</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(dir);</span><br><span class="line">        <span class="comment">//如果目录不存在</span></span><br><span class="line">        <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">            <span class="comment">//创建目录</span></span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dir;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-文件下载"><a href="#二-文件下载" class="headerlink" title="二. 文件下载"></a>二. 文件下载</h4><blockquote><p>我们要将Web应用系统中的文件资源提供给用户进行下载，首先我们要有一个页面列出上传文件目录下的所有文件，当用户点击文件下载超链接时就进行下载操作，编写一个ListFileServlet，用于列出Web应用系统中所有下载文件</p></blockquote><h5 id="1-获取文件列表"><a href="#1-获取文件列表" class="headerlink" title="1 .获取文件列表"></a>1 .获取文件列表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.gacl.web.controller;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListFileServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取上传文件的目录</span></span><br><span class="line">        String uploadFilePath = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">"/WEB-INF/upload"</span>);</span><br><span class="line">        <span class="comment">//存储要下载的文件名</span></span><br><span class="line">        Map&lt;String,String&gt; fileNameMap = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">        <span class="comment">//递归遍历filepath目录下的所有文件和目录，将文件的文件名存储到map集合中</span></span><br><span class="line">        listfile(<span class="keyword">new</span> File(uploadFilePath),fileNameMap);<span class="comment">//File既可以代表一个文件也可以代表一个目录</span></span><br><span class="line">        <span class="comment">//将Map集合发送到listfile.jsp页面进行显示</span></span><br><span class="line">        request.setAttribute(<span class="string">"fileNameMap"</span>, fileNameMap);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/listfile.jsp"</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listfile</span><span class="params">(File file,Map&lt;String,String&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果file代表的不是一个文件，而是一个目录</span></span><br><span class="line">        <span class="keyword">if</span>(!file.isFile())&#123;</span><br><span class="line">            <span class="comment">//列出该目录下的所有文件和目录</span></span><br><span class="line">            File files[] = file.listFiles();</span><br><span class="line">            <span class="comment">//遍历files[]数组</span></span><br><span class="line">            <span class="keyword">for</span>(File f : files)&#123;</span><br><span class="line">                <span class="comment">//递归</span></span><br><span class="line">                listfile(f,map);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 处理文件名，上传后的文件是以uuid_文件名的形式去重新命名的，去除文件名的uuid_部分</span></span><br><span class="line"><span class="comment">                file.getName().indexOf("_")检索字符串中第一次出现"_"字符的位置，如果文件名类似于：9349249849-88343-8344_阿_凡_达.avi</span></span><br><span class="line"><span class="comment">                那么file.getName().substring(file.getName().indexOf("_")+1)处理之后就可以得到阿_凡_达.avi部分</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            String realName = file.getName().substring(file.getName().indexOf(<span class="string">"_"</span>)+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//file.getName()得到的是文件的原始名称，这个名称是唯一的，因此可以作为key，realName是处理过后的名称，有可能会重复</span></span><br><span class="line">            map.put(file.getName(), realName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里简单说一下ListFileServlet中listfile方法，listfile方法是用来列出目录下的所有文件的，listfile方法内部用到了递归，在实际开发当中，我们肯定会在数据库创建一张表，里面会存储上传的文件名以及文件的具体存放目录，我们通过查询表就可以知道文件的具体存放目录，是不需要用到递归操作的，这个例子是因为没有使用数据库存储上传的文件名和文件的具体存放位置，而上传文件的存放位置又使用了散列算法打散存放，所以需要用到递归，在递归时，将获取到的文件名存放到从外面传递到listfile方法里面的Map集合当中，这样就可以保证所有的文件都存放在同一个Map集合当中。</p><h5 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h5><p>在Web.xml文件中配置ListFileServlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ListFileServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>me.gacl.web.controller.ListFileServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ListFileServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/ListFileServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-下载页面"><a href="#3-下载页面" class="headerlink" title="3 .下载页面"></a>3 .下载页面</h5><p>展示下载文件的listfile.jsp页面如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;下载文件显示页面&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">      &lt;!-- 遍历Map集合 --&gt;</span><br><span class="line">    &lt;c:forEach var=<span class="string">"me"</span> items=<span class="string">"$&#123;fileNameMap&#125;"</span>&gt;</span><br><span class="line">        &lt;c:url value=<span class="string">"/servlet/DownLoadServlet"</span> var=<span class="string">"downurl"</span>&gt;</span><br><span class="line">            &lt;c:param name="filename" value="$&#123;me.key&#125;"&gt;&lt;/c:param&gt;</span><br><span class="line">        &lt;/c:url&gt;</span><br><span class="line">        $&#123;me.value&#125;&lt;a href="$&#123;downurl&#125;"&gt;下载&lt;/a&gt;</span><br><span class="line">        &lt;br/&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="4-实现文件下载"><a href="#4-实现文件下载" class="headerlink" title="4. 实现文件下载"></a>4. 实现文件下载</h5><p>编写一个用于处理文件下载的Servlet，DownLoadServlet的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//得到要下载的文件名</span></span><br><span class="line">        String fileName = request.getParameter(<span class="string">"filename"</span>);  <span class="comment">//23239283-92489-阿凡达.avi</span></span><br><span class="line">        fileName = <span class="keyword">new</span> String(fileName.getBytes(<span class="string">"iso8859-1"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">//上传的文件都是保存在/WEB-INF/upload目录下的子目录当中</span></span><br><span class="line">        String fileSaveRootPath=<span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">"/WEB-INF/upload"</span>);</span><br><span class="line">        <span class="comment">//通过文件名找出文件的所在目录</span></span><br><span class="line">        String path = findFileSavePathByFileName(fileName,fileSaveRootPath);</span><br><span class="line">        <span class="comment">//得到要下载的文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(path + <span class="string">"\\"</span> + fileName);</span><br><span class="line">        <span class="comment">//如果文件不存在</span></span><br><span class="line">        <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">            request.setAttribute(<span class="string">"message"</span>, <span class="string">"您要下载的资源已被删除！！"</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/message.jsp"</span>).forward(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理文件名</span></span><br><span class="line">        String realname = fileName.substring(fileName.indexOf(<span class="string">"_"</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//设置响应头，控制浏览器下载该文件</span></span><br><span class="line">        response.setHeader(<span class="string">"content-disposition"</span>, <span class="string">"attachment;filename="</span> + URLEncoder.encode(realname, <span class="string">"UTF-8"</span>));</span><br><span class="line">        <span class="comment">//读取要下载的文件，保存到文件输入流</span></span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(path + <span class="string">"\\"</span> + fileName);</span><br><span class="line">        <span class="comment">//创建输出流</span></span><br><span class="line">        OutputStream out = response.getOutputStream();</span><br><span class="line">        <span class="comment">//创建缓冲区</span></span><br><span class="line">        <span class="keyword">byte</span> buffer[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//循环将输入流中的内容读取到缓冲区当中</span></span><br><span class="line">        <span class="keyword">while</span>((len=in.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//输出缓冲区的内容到浏览器，实现文件下载</span></span><br><span class="line">            out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭文件输入流</span></span><br><span class="line">        in.close();</span><br><span class="line">        <span class="comment">//关闭输出流</span></span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findFileSavePathByFileName</span><span class="params">(String filename,String saveRootPath)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hashcode = filename.hashCode();</span><br><span class="line">        <span class="keyword">int</span> dir1 = hashcode&amp;<span class="number">0xf</span>;  <span class="comment">//0--15</span></span><br><span class="line">        <span class="keyword">int</span> dir2 = (hashcode&amp;<span class="number">0xf0</span>)&gt;&gt;<span class="number">4</span>;  <span class="comment">//0-15</span></span><br><span class="line">        String dir = saveRootPath + <span class="string">"\\"</span> + dir1 + <span class="string">"\\"</span> + dir2;  <span class="comment">//upload\2\3  upload\3\5</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(dir);</span><br><span class="line">        <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">            <span class="comment">//创建目录</span></span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dir;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-配置"><a href="#5-配置" class="headerlink" title="5. 配置"></a>5. 配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DownLoadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>me.gacl.web.controller.DownLoadServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DownLoadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/DownLoadServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="作业题"><a href="#作业题" class="headerlink" title="作业题"></a>作业题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1、完善图书图片的上传和下载功能</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;文件上传和下载&quot;&gt;&lt;a href=&quot;#文件上传和下载&quot; class=&quot;headerlink&quot; title=&quot;文件上传和下载&quot;&gt;&lt;/a&gt;文件上传和下载&lt;/h3&gt;&lt;h4 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今日内容&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%92%8CDBUtils%E4%BD%BF%E7%94%A8/"/>
    <id>http://kongxianghe.top/2018/10/23/数据库连接池和DBUtils使用/</id>
    <published>2018-10-23T14:06:03.418Z</published>
    <updated>2018-07-09T06:15:57.282Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库连接池和DBUtils使用"><a href="#数据库连接池和DBUtils使用" class="headerlink" title="数据库连接池和DBUtils使用"></a>数据库连接池和DBUtils使用</h3><h4 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、自定义数据库连接池</span><br><span class="line">2、使用DBCP连接池</span><br><span class="line">3、使用C3P0连接池</span><br><span class="line">4、使用Druid连接池</span><br><span class="line">5、DbUtils的使用</span><br><span class="line">6、作业</span><br></pre></td></tr></table></figure><h4 id="一-自定义连接池"><a href="#一-自定义连接池" class="headerlink" title="一. 自定义连接池"></a>一. 自定义连接池</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用JDBC操作数据库,需要建立Connection,使用传统的JDBC操作需要每次创建Connection,创建Connection是一个非常性能和消耗时间的过程,我们需要在提高程序性能,那么就需要减少每次创建创建连接带来的负面影响,解决这个问题我们将利用池子概念,预先创建一些链接放入池子中,如果需要操作数据,不用创建新的Connection,只需要在池子中获取即可,使用完毕放入池子!这样就形成了复用!</span><br></pre></td></tr></table></figure><h5 id="1-自定义连接池"><a href="#1-自定义连接池" class="headerlink" title="1.自定义连接池"></a>1.自定义连接池</h5><p>我们可以通过自定义的方式实现连接池!分析连接池类应该包含特定的属性和方法!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">属性: 集合 放置Connection</span><br><span class="line"></span><br><span class="line">方法:  获取连接方法</span><br><span class="line"></span><br><span class="line">回收连接方法</span><br></pre></td></tr></table></figure><p>具体实现代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pool</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> LinkedList&lt;Connection&gt; list  = <span class="keyword">new</span> LinkedList&lt;Connection&gt;();</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">Connection connection = JDBCUtils.findConnection();</span><br><span class="line">list.add(connection);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从连接池子中获取连接的方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (list.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">Connection connection = JDBCUtils.findConnection();</span><br><span class="line"></span><br><span class="line">list.addLast(connection);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Connection conn = list.removeFirst();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回到连接池子中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addBack</span><span class="params">(Connection conn)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (list.size() &gt;= <span class="number">10</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">list.addLast(conn);  <span class="comment">//10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取连接池子中连接数量的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> list.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-通过实现java规范实现连接池"><a href="#2-通过实现java规范实现连接池" class="headerlink" title="2. 通过实现java规范实现连接池"></a>2. 通过实现java规范实现连接池</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Java为连接池实现提供了一个规范(接口),规范的写法,我们需要实现DataSource接口!</span><br><span class="line">但是实现DataSource接口有一个弊端,没有提供回收链接方法!这里我们将使用装饰者模式!</span><br></pre></td></tr></table></figure><p>装饰Connection!具体实现代码如下:</p><ol><li>创建装饰Connection</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConnection</span>   <span class="keyword">implements</span> <span class="title">Connection</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将被装饰者导入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Connection conn;</span><br><span class="line"><span class="keyword">private</span> LinkedList&lt;Connection&gt; list;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyConnection</span><span class="params">(Connection conn, LinkedList&lt;Connection&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.conn = conn;</span><br><span class="line"><span class="keyword">this</span>.list = list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">unwrap</span><span class="params">(Class&lt;T&gt; iface)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> conn.unwrap(iface);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isWrapperFor</span><span class="params">(Class&lt;?&gt; iface)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> conn.isWrapperFor(iface);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Statement <span class="title">createStatement</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> conn.createStatement();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PreparedStatement <span class="title">prepareStatement</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> conn.prepareStatement(sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CallableStatement <span class="title">prepareCall</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">nativeSQL</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAutoCommit</span><span class="params">(<span class="keyword">boolean</span> autoCommit)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getAutoCommit</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">conn.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">conn.rollback();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接对像的关闭或归还</span></span><br><span class="line"><span class="keyword">if</span>(list.size()&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">conn.close();</span><br><span class="line">System.out.println(<span class="string">"池中连接对像已满，直接关闭"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">list.addLast(conn);</span><br><span class="line">System.out.println(<span class="string">"池中连接对像未满，归还连接对像"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于规范实现的连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个规范的连接池子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourcePool</span> <span class="keyword">implements</span> <span class="title">DataSource</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> LinkedList&lt;Connection&gt; list  = <span class="keyword">new</span> LinkedList&lt;Connection&gt;();</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">Connection connection = JDBCUtils.newInstance().getConnection();</span><br><span class="line">list.add(connection);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> list.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">//池中对像是否为空</span></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(list.isEmpty())&#123;</span><br><span class="line">conn = JdbcUtil.findConnection();</span><br><span class="line">System.out.println(<span class="string">"池中对像为空，创建新的连接对像"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">conn = list.removeFirst();</span><br><span class="line">System.out.println(<span class="string">"池中对像不为空，返回给使用者"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回装饰者对像</span></span><br><span class="line">MyConnection myconn = <span class="keyword">new</span> MyConnection(list,conn);</span><br><span class="line"><span class="keyword">return</span> myconn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PrintWriter <span class="title">getLogWriter</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLogWriter</span><span class="params">(PrintWriter out)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoginTimeout</span><span class="params">(<span class="keyword">int</span> seconds)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLoginTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Logger <span class="title">getParentLogger</span><span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">unwrap</span><span class="params">(Class&lt;T&gt; iface)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isWrapperFor</span><span class="params">(Class&lt;?&gt; iface)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-使用DBCP连接池"><a href="#二-使用DBCP连接池" class="headerlink" title="二. 使用DBCP连接池"></a>二. 使用DBCP连接池</h4><blockquote><p> DBCP(DataBase connection pool),<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0" target="_blank" rel="noopener">数据库连接池</a>。是 apache 上的一个 java 连接池项目，也是 tomcat 使用的连接池组件。单独使用dbcp需要2个包：commons-dbcp.jar,commons-pool.jar由于建立数据库连接是一个非常耗时<a href="https://baike.baidu.com/item/%E8%80%97%E8%B5%84%E6%BA%90" target="_blank" rel="noopener">耗资源</a>的行为，所以通过连接池预先同数据库建立一些连接，放在内存中，应用程序需要建立数据库连接时直接到连接池中申请一个就行，用完后再放回去。</p></blockquote><p>#####1 .DBCP连接池的使用</p><p><strong>创建项目</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建JavaWeb项目</span><br></pre></td></tr></table></figure><p> <strong>导入相应jar包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql-jdbc.jar</span><br><span class="line">commons-dbcp.jar</span><br><span class="line">commons-pool.jar</span><br></pre></td></tr></table></figure><p> <strong>硬编码方式使用DBCP连接池</strong></p><blockquote><p>所谓的硬编码方式就是在代码中添加配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHard</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"><span class="comment">//TODO 硬编码 使用DBCP连接池子</span></span><br><span class="line">BasicDataSource source = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line"><span class="comment">//设置连接的信息  </span></span><br><span class="line">source.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">source.setUrl(<span class="string">"jdbc:mysql://localhost:3306/day2"</span>);</span><br><span class="line">source.setUsername(<span class="string">"root"</span>);</span><br><span class="line">source.setPassword(<span class="string">"111"</span>);</span><br><span class="line"></span><br><span class="line">Connection connection = source.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"select * from student"</span>;</span><br><span class="line"></span><br><span class="line">Statement createStatement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">ResultSet executeQuery = createStatement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (executeQuery.next()) &#123;</span><br><span class="line"> </span><br><span class="line">System.out.println(executeQuery.getString(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line">connection.close(); <span class="comment">//回收</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#####2.软编码方式使用DBCP连接池</p><blockquote><p>所谓的软编码,就是在项目中添加配置文件,这样就不需要每次代码中添加配合!</p></blockquote><p><strong>项目中添加配置</strong></p><p>​       文件名称: info.properties</p><p>​       文件位置: src下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#连接设置</span><br><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/day2</span><br><span class="line">username=root</span><br><span class="line">password=111</span><br><span class="line">#&lt;!-- 初始化连接 --&gt;</span><br><span class="line">initialSize=10</span><br><span class="line">#最大连接数量</span><br><span class="line">maxActive=50</span><br><span class="line">#&lt;!-- 最大空闲连接 --&gt;</span><br><span class="line">maxIdle=20</span><br><span class="line">#&lt;!-- 最小空闲连接 --&gt;</span><br><span class="line">minIdle=5</span><br><span class="line">#&lt;!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 --&gt;</span><br><span class="line">maxWait=6000</span><br></pre></td></tr></table></figure><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSoft</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//TODO DBCP软编码连接池子使用</span></span><br><span class="line">BasicDataSourceFactory factory = <span class="keyword">new</span> BasicDataSourceFactory();</span><br><span class="line">Properties properties = <span class="keyword">new</span>  Properties();</span><br><span class="line"><span class="comment">//配置文件添加到properties对象中  javase</span></span><br><span class="line">properties.load(<span class="keyword">new</span> FileInputStream(<span class="string">"src/info.properties"</span>));</span><br><span class="line"><span class="comment">//生成连接池子  需要配置文件</span></span><br><span class="line">DataSource source = factory.createDataSource(properties);</span><br><span class="line">       Connection connection = source.getConnection();</span><br><span class="line">String sql = <span class="string">"select * from student"</span>;</span><br><span class="line">Statement createStatement = connection.createStatement();</span><br><span class="line">ResultSet executeQuery = createStatement.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span> (executeQuery.next()) &#123;</span><br><span class="line">System.out.println(executeQuery.getString(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line">connection.close(); <span class="comment">//回收</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三-使用C3P0连接池"><a href="#三-使用C3P0连接池" class="headerlink" title="三.使用C3P0连接池"></a>三.使用C3P0连接池</h4><blockquote><p>   C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。目前使用它的开源项目有Hibernate，Spring等。</p></blockquote><pre><code>c3p0与dbcp区别     1.        dbcp没有自动回收空闲连接的功能        c3p0有自动回收空闲连接功能     2.          dbcp需要手动设置配置文件        c3p0不需要手动设置</code></pre><h5 id="1-使用步骤"><a href="#1-使用步骤" class="headerlink" title="1. 使用步骤"></a>1. 使用步骤</h5><p><strong>创建项目</strong></p><p><strong>导入jar包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c3p0-0.9.1.2.jar</span><br><span class="line">mysql-connector-java-5.0.8.jar</span><br></pre></td></tr></table></figure><p><strong>添加配置文件</strong></p><blockquote><p>c3p0是在外部添加配置文件,工具直接进行应用,因为直接引用,所以要求固定的命名和文件位置</p></blockquote><p>文件位置: src </p><p>文件命名:c3p0-config.xml/c3p0-config.properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认配置，如果没有指定则使用这个配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 基本配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://localhost:3306/day2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>111<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--扩展配置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 连接超过30秒报错--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--30秒检查空闲连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--初始化连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 30秒不适用丢弃--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接池最大连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接池最小连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最大会话数量--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>200<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">default-config</span>&gt;</span> </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 命名的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">"mypool"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://localhost:3306/day2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>111<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果池中数据连接不够时一次增长多少个 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>40<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意: c3p0的配置文件内部可以包含命名配置文件和默认配置文件!默认是选择默认配置!如果需要切换命名配置可以在创建c3p0连接池的时候填入命名即可!</p><p> <strong>使用c3p0进行数据库操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestC3p0</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建C3P0连接池子</span></span><br><span class="line">Connection connection = DataSourceUtils.getConnection();</span><br><span class="line"></span><br><span class="line">Statement createStatement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"select * from student;"</span>;</span><br><span class="line"></span><br><span class="line">ResultSet resultSet = createStatement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(resultSet.getString(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">DataSourceUtils.close(connection, createStatement, resultSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>使用c3p0连接池编写工具类</strong></p><p>基于c3p0连接池编写数据库操作工具类!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从连接池子中获取连接！</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  C3P0的连接池子</span></span><br><span class="line"><span class="comment"> *  0.获取连接池子对象  DBUtils</span></span><br><span class="line"><span class="comment"> *  1.获取连接</span></span><br><span class="line"><span class="comment"> *  2.关闭资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span>  ComboPooledDataSource  dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回连接池对象方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> c3p0连接池子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  ComboPooledDataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接池中获取连接的方法 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Connection conn  = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = dataSource.getConnection();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement st)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (st != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">st.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet  set)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (set != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">set.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn,Statement st)</span></span>&#123;</span><br><span class="line">close(conn);</span><br><span class="line">close(st);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn,Statement st,ResultSet rt)</span></span>&#123;</span><br><span class="line">close(conn);</span><br><span class="line">close(st);</span><br><span class="line">close(rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四-使用Druid数据库连接池"><a href="#四-使用Druid数据库连接池" class="headerlink" title="四.使用Druid数据库连接池"></a>四.使用Druid数据库连接池</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Druid 是目前比较流行的高性能的，分布式列存储的OLAP框架(具体来说是MOLAP)。它有如下几个特点：</span><br><span class="line">一. 亚秒级查询</span><br><span class="line">     druid提供了快速的聚合能力以及亚秒级的OLAP查询能力，多租户的设计，是面向用户分析应用的理想方式。</span><br><span class="line">二.实时数据注入</span><br><span class="line">     druid支持流数据的注入，并提供了数据的事件驱动，保证在实时和离线环境下事件的实效性和统一性</span><br><span class="line">三.可扩展的PB级存储</span><br><span class="line">     druid集群可以很方便的扩容到PB的数据量，每秒百万级别的数据注入。即便在加大数据规模的情况下，也能保证时其效性</span><br><span class="line">四.多环境部署</span><br><span class="line">     druid既可以运行在商业的硬件上，也可以运行在云上。它可以从多种数据系统中注入数据，包括hadoop，spark，kafka，storm和samza等</span><br><span class="line">五.丰富的社区</span><br><span class="line">     druid拥有丰富的社区，供大家学习</span><br></pre></td></tr></table></figure><h5 id="1-使用步骤-1"><a href="#1-使用步骤-1" class="headerlink" title="1. 使用步骤"></a>1. 使用步骤</h5><p> <strong>导入jar包</strong></p><p> <strong>编写工具类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里的数据库连接池</span></span><br><span class="line"><span class="comment"> * 性能最好的</span></span><br><span class="line"><span class="comment"> * Druid</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidUtils</span> </span>&#123;</span><br><span class="line"><span class="comment">//声明连接池对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DruidDataSource ds;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"><span class="comment">///实例化数据库连接池对象</span></span><br><span class="line">ds=<span class="keyword">new</span> DruidDataSource();</span><br><span class="line"><span class="comment">//实例化配置对象</span></span><br><span class="line">Properties properties=<span class="keyword">new</span> Properties();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//加载配置文件内容</span></span><br><span class="line">properties.load(DruidUtils.class.getResourceAsStream(<span class="string">"dbcpconfig.properties"</span>));</span><br><span class="line"><span class="comment">//设置驱动类全称</span></span><br><span class="line">ds.setDriverClassName(properties.getProperty(<span class="string">"driverClassName"</span>));</span><br><span class="line"><span class="comment">//设置连接的数据库</span></span><br><span class="line">ds.setUrl(properties.getProperty(<span class="string">"url"</span>));</span><br><span class="line"><span class="comment">//设置用户名</span></span><br><span class="line">ds.setUsername(properties.getProperty(<span class="string">"username"</span>));</span><br><span class="line"><span class="comment">//设置密码</span></span><br><span class="line">ds.setPassword(properties.getProperty(<span class="string">"password"</span>));</span><br><span class="line"><span class="comment">//设置最大连接数量</span></span><br><span class="line">ds.setMaxActive(Integer.parseInt(properties.getProperty(<span class="string">"maxActive"</span>)));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取连接对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ds.getConnection();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Druid_Test</span></span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  findAll();</span><br><span class="line">  find(<span class="string">"小千千"</span>,<span class="string">"47983"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Master&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Connection conn=<span class="keyword">null</span>;</span><br><span class="line">PreparedStatement pstat=<span class="keyword">null</span>;</span><br><span class="line">ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line">List&lt;Master&gt; masters=<span class="keyword">new</span> ArrayList&lt;Master&gt;();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">conn=DruidUtils.getConnection();</span><br><span class="line">pstat=conn.prepareStatement(<span class="string">"select * from master"</span>);</span><br><span class="line">rs=pstat.executeQuery();</span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line"><span class="keyword">int</span> id=rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">String name=rs.getString(<span class="string">"name"</span>);</span><br><span class="line">String password=rs.getString(<span class="string">"password"</span>);</span><br><span class="line"><span class="keyword">int</span> money=rs.getInt(<span class="string">"money"</span>);</span><br><span class="line">masters.add(<span class="keyword">new</span> Master(id, name, password, money));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> masters;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">DbUtils.release(rs, pstat, conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Master <span class="title">find</span><span class="params">(String name, String password)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Connection conn=<span class="keyword">null</span>;</span><br><span class="line">PreparedStatement pstat=<span class="keyword">null</span>;</span><br><span class="line">ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line">Master master=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">conn=DbUtils.getConnection();</span><br><span class="line">pstat=conn.prepareStatement(<span class="string">"select * from master where name=? and password=?"</span>);</span><br><span class="line">pstat.setString(<span class="number">1</span>, name);</span><br><span class="line">pstat.setString(<span class="number">2</span>, password);</span><br><span class="line">rs=pstat.executeQuery();</span><br><span class="line"><span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line"><span class="keyword">int</span> id=rs.getInt(<span class="string">"id"</span>);</span><br><span class="line"><span class="keyword">int</span> money=rs.getInt(<span class="string">"money"</span>);</span><br><span class="line">master=<span class="keyword">new</span> Master(id, name, password, money);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> master;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">DbUtils.release(rs, pstat, conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五-DBUtils工具类使用"><a href="#五-DBUtils工具类使用" class="headerlink" title="五 .DBUtils工具类使用"></a>五 .DBUtils工具类使用</h4><blockquote><p>Commons DbUtils是<a href="https://baike.baidu.com/item/Apache/8512995" target="_blank" rel="noopener">Apache</a>组织提供的一个对<a href="https://baike.baidu.com/item/JDBC" target="_blank" rel="noopener">JDBC</a>进行简单封装的开源工具类库，使用它能够简化<a href="https://baike.baidu.com/item/JDBC" target="_blank" rel="noopener">JDBC</a>应用程序的开发，同时也不会影响程序的性能。</p></blockquote><h5 id="1-DBUtils简介"><a href="#1-DBUtils简介" class="headerlink" title="1. DBUtils简介"></a>1. DBUtils简介</h5><p>DBUtils是java编程中的数据库操作实用工具，小巧简单实用，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.对于数据表的读操作，他可以把结果转换成List，Array，Set等java集合，便于程序员操作；</span><br><span class="line">2.对于数据表的写操作，也变得很简单（只需写sql语句）</span><br><span class="line">3.可以使用数据源，使用[JNDI](https://baike.baidu.com/item/JNDI)，[数据库连接池](https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0)等技术来优化性能--重用已经构建好的数据库连接对象，而不像php，asp那样，费时费力的不断重复的构建和析构这样的对象</span><br></pre></td></tr></table></figure><p>DBUtils包括3个包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.apache.commons.dbutils</span><br><span class="line">org.apache.commons.dbutils.handlers</span><br><span class="line">org.apache.commons.dbutils.wrappers</span><br></pre></td></tr></table></figure><p>DBUtils封装了对JDBC的操作，简化了JDBC操作，可以少写代码。</p><p>org.apache.commons.dbutils</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DbUtils 关闭链接等操作</span><br><span class="line">QueryRunner 进行查询的操作</span><br><span class="line">org.apache.commons.dbutils.handlers</span><br><span class="line">ArrayHandler ：将ResultSet中第一行的数据转化成[对象数组]</span><br><span class="line">ArrayListHandler将ResultSet中所有的数据转化成List，List中存放的是Object[]</span><br><span class="line">BeanHandler ：将ResultSet中第一行的数据转化成类对象</span><br><span class="line">BeanListHandler ：将ResultSet中所有的数据转化成List，List中存放的是类对象</span><br><span class="line">ColumnListHandler ：将ResultSet中某一列的数据存成List，List中存放的是Object对象</span><br><span class="line">KeyedHandler ：将ResultSet中存成映射，key为某一列对应为Map。Map中存放的是数据</span><br><span class="line">MapHandler ：将ResultSet中第一行的数据存成Map映射</span><br><span class="line">MapListHandler ：将ResultSet中所有的数据存成List。List中存放的是Map</span><br><span class="line">ScalarHandler ：将ResultSet中一条记录的其中某一列的数据存成Object</span><br><span class="line">org.apache.commons.dbutils.wrappers</span><br><span class="line">SqlNullCheckedResultSet ：对ResultSet进行操作，改变里面的值</span><br><span class="line">StringTrimmedResultSet ：去除ResultSet中中字段的左右空格。Trim()</span><br></pre></td></tr></table></figure><p>主要方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DbUtils类：启动类</span><br><span class="line">ResultSetHandler接口：转换类型接口</span><br><span class="line">MapListHandler类：实现类，把记录转化成List</span><br><span class="line">BeanListHandler类：实现类，把记录转化成List，使记录为JavaBean类型的对象</span><br><span class="line">Query Runner类：执行SQL语句的类</span><br></pre></td></tr></table></figure><h5 id="2-DBUtils-C3P0工具类实现"><a href="#2-DBUtils-C3P0工具类实现" class="headerlink" title="2. DBUtils+C3P0工具类实现"></a>2. DBUtils+C3P0工具类实现</h5><p> <strong>项目准备</strong></p><ul><li>创建项目</li><li>导入jar包 工具类 配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dbutils.jar</span><br><span class="line">c3p0.jar</span><br><span class="line">jdbc.jar</span><br><span class="line">之前项目的info.properties</span><br><span class="line">c3p0工具类</span><br></pre></td></tr></table></figure><p><strong>实现代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbutilDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *取了1条记录，并把数据封装成数组 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testArrayHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Util.getDataSource());</span><br><span class="line"></span><br><span class="line">Object[] res = qr.query(<span class="string">"select * from emp where empno=?"</span>, <span class="keyword">new</span> ArrayHandler(), <span class="number">7369</span>);</span><br><span class="line"><span class="keyword">for</span>(Object ob:res)&#123;</span><br><span class="line">System.out.println(ob);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 取1条记录。把当前记录的列名和列值放到一个Map中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Util.getDataSource());</span><br><span class="line"></span><br><span class="line">Map&lt;String,Object&gt; map= qr.query(<span class="string">"select * from emp where empno = ?"</span>, <span class="keyword">new</span> MapHandler(),<span class="number">7499</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Object key:map.keySet())&#123;</span><br><span class="line">System.out.println(key+<span class="string">"===&gt;"</span>+map.get(key));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 取1条记录，封装成POJO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBeanHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Util.getDataSource());</span><br><span class="line"></span><br><span class="line">Emp emp= qr.query(<span class="string">"select * from emp where empno = ?"</span>, <span class="keyword">new</span> BeanHandler&lt;&gt;(Emp.class),<span class="number">7369</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(emp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 取单行单列数据,即单个数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testScalarHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Util.getDataSource());</span><br><span class="line"></span><br><span class="line">String str= qr.query(<span class="string">"select * from emp where empno = ?"</span>, <span class="keyword">new</span> ScalarHandler&lt;&gt;(<span class="string">"ename"</span>),<span class="number">7499</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 取某一列数据封装到List中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testColumnListHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Util.getDataSource());</span><br><span class="line"></span><br><span class="line">List&lt;Object&gt; res = qr.query(<span class="string">"select * from emp"</span>, <span class="keyword">new</span> ColumnListHandler&lt;&gt;(<span class="string">"ename"</span>));</span><br><span class="line"><span class="keyword">for</span>(Object ob:res)&#123;</span><br><span class="line">System.out.println(ob);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 取多条记录，把每条记录封装成数组，再把多个数组封装成List集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testArrayListHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Util.getDataSource());</span><br><span class="line"></span><br><span class="line">List&lt;Object[]&gt; res = qr.query(<span class="string">"select * from emp"</span>, <span class="keyword">new</span> ArrayListHandler());</span><br><span class="line"><span class="keyword">for</span>(Object[] ob:res)&#123;</span><br><span class="line">System.out.println(ob[<span class="number">0</span>]+<span class="string">","</span>+ob[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 取多条记录，每一条记录封装到一个Map中，再把这个Map封装到另外一个Map中，key为指定的字段值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testKeyedHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Util.getDataSource());</span><br><span class="line"></span><br><span class="line">Map&lt;Object,Map&lt;String,Object&gt;&gt; map= qr.query(<span class="string">"select * from emp"</span>, <span class="keyword">new</span> KeyedHandler&lt;&gt;(<span class="string">"empno"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Object key:map.keySet())&#123;</span><br><span class="line">System.out.println(key+<span class="string">"===&gt;"</span>+map.get(key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 取多条记录。把每条记录封装到一个Map中，再把Map封装到List中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapListHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Util.getDataSource());</span><br><span class="line"></span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; list= qr.query(<span class="string">"select * from emp"</span>, <span class="keyword">new</span> MapListHandler());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Map&lt;String,Object&gt; map:list)&#123;</span><br><span class="line">System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 查找多条记录，把每条记录封装成POJO,然后放入list集合中</span></span><br><span class="line"><span class="comment"> * [jdbc.Emp@69d9c55, jdbc.Emp@13a57a3b]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBeanListHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3p0Util.findDataSource());</span><br><span class="line"></span><br><span class="line">List&lt;Emp&gt; list = qr.query(<span class="string">"select * from emp where empno = ?"</span>, <span class="keyword">new</span> BeanListHandler&lt;&gt;(Emp.class),<span class="number">7369</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 需支持主键自增，一般使用ScalarHandler处理</span></span><br><span class="line"><span class="comment"> * @throws SQLException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3p0Util.findDataSource());</span><br><span class="line"></span><br><span class="line">Long id = qr.insert(<span class="string">"insert into emp (ename,job) values(?,?)"</span>,<span class="keyword">new</span> ScalarHandler&lt;Long&gt;(),<span class="string">"张三"</span>,<span class="string">"CLERK"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * update</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3p0Util.findDataSource());</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = qr.update(<span class="string">"update emp set ename=?,job=? where empno=?"</span>, <span class="string">"王五"</span>,<span class="string">"CLERK"</span>,<span class="number">8001</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(num);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * delete</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3p0Util.findDataSource());</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = qr.update(<span class="string">"delete from emp where empno = ?"</span>,<span class="number">8001</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 通用方法execute</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line"></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3p0Util.findDataSource());</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = qr.execute(<span class="string">"insert into emp (ename,job) values(?,?)"</span>, <span class="string">"李四"</span>,<span class="string">"CLERK"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(num);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="作业题"><a href="#作业题" class="headerlink" title="作业题"></a>作业题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1、书的增删改查，使用数据库连接池C3p0和DbUtils改造之前的项目</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据库连接池和DBUtils使用&quot;&gt;&lt;a href=&quot;#数据库连接池和DBUtils使用&quot; class=&quot;headerlink&quot; title=&quot;数据库连接池和DBUtils使用&quot;&gt;&lt;/a&gt;数据库连接池和DBUtils使用&lt;/h3&gt;&lt;h4 id=&quot;今日内容&quot;&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/Ajax%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/"/>
    <id>http://kongxianghe.top/2018/10/23/Ajax技术应用/</id>
    <published>2018-10-23T14:06:03.400Z</published>
    <updated>2018-07-09T06:15:57.354Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><h4 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、什么是Ajax</span><br><span class="line">2、Ajax工作原理</span><br><span class="line">3、Ajax的使用</span><br><span class="line">4、Ajax的综合练习</span><br></pre></td></tr></table></figure><p>#### </p><h4 id="一-JSON概述"><a href="#一-JSON概述" class="headerlink" title="一. JSON概述"></a>一. JSON概述</h4><h5 id="1-1-什么是json"><a href="#1-1-什么是json" class="headerlink" title="1.1 什么是json"></a>1.1 什么是json</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript (w3c制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</span><br></pre></td></tr></table></figure><h5 id="1-2-json语法"><a href="#1-2-json语法" class="headerlink" title="1.2 json语法"></a>1.2 json语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[]  表示数组</span><br><span class="line"></span><br><span class="line">&#123;&#125;  表示对象</span><br><span class="line"></span><br><span class="line">&quot;&quot;  表示是属性名或字符串类型的值</span><br><span class="line"></span><br><span class="line">:   表示属性和值之间的间隔符</span><br><span class="line"></span><br><span class="line">,   表示多个属性的间隔符或者是多个元素的间隔符</span><br></pre></td></tr></table></figure><h4 id="二-JSON解析"><a href="#二-JSON解析" class="headerlink" title="二. JSON解析"></a>二. JSON解析</h4><p>要解析的字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象嵌套数组嵌套对象</span></span><br><span class="line">String json1=<span class="string">"&#123;'id':1,'name':'JAVAEE-1703','stus':[&#123;'id':101,'name':'刘一','age':16&#125;]&#125;"</span>;</span><br><span class="line"><span class="comment">//数组</span></span><br><span class="line">String json2=<span class="string">"['北京','天津','杭州']"</span>;</span><br></pre></td></tr></table></figure><p>初始的类：</p><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Grade.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Grade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Student&gt; stus;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Grade</span><span class="params">(<span class="keyword">int</span> id, String name, ArrayList&lt;Student&gt; stus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.stus = stus;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Grade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Grade [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", stus="</span> + stus + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Student&gt; <span class="title">getStus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stus;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStus</span><span class="params">(ArrayList&lt;Student&gt; stus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stus = stus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-1-原生解析"><a href="#2-1-原生解析" class="headerlink" title="2.1 原生解析"></a>2.1 原生解析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析JSON</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> JSONException</span>&#123;</span><br><span class="line">        <span class="comment">//对象嵌套数组嵌套对象</span></span><br><span class="line">        String json1=<span class="string">"&#123;'id':1,'name':'JAVAEE-1703','stus':[&#123;'id':101,'name':'刘一','age':16&#125;]&#125;"</span>;</span><br><span class="line">        <span class="comment">//数组</span></span><br><span class="line">        String json2=<span class="string">"['北京','天津','杭州']"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、</span></span><br><span class="line">        <span class="comment">//解析第一层---对象</span></span><br><span class="line">        JSONObject jObject1=<span class="keyword">new</span> JSONObject(json1);</span><br><span class="line">        </span><br><span class="line">        Grade grade=<span class="keyword">new</span> Grade();</span><br><span class="line">        grade.setId(jObject1.getInt(<span class="string">"id"</span>));</span><br><span class="line">        grade.setName(jObject1.getString(<span class="string">"name"</span>));</span><br><span class="line">        ArrayList&lt;Student&gt; stus=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        grade.setStus(stus);</span><br><span class="line">        <span class="comment">//解析第二层----数组</span></span><br><span class="line">        JSONArray jsonArray2=jObject1.getJSONArray(<span class="string">"stus"</span>);</span><br><span class="line">        <span class="comment">//遍历数组获取元素----对象</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;jsonArray2.length();i++)&#123;</span><br><span class="line">            <span class="comment">//解析第三层----对象</span></span><br><span class="line">            JSONObject jObject3=jsonArray2.getJSONObject(i);</span><br><span class="line">            Student student=<span class="keyword">new</span> Student(jObject3.getInt(<span class="string">"id"</span>), jObject3.getString(<span class="string">"name"</span>), jObject3.getInt(<span class="string">"age"</span>));</span><br><span class="line">            grade.getStus().add(student);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(grade);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、</span></span><br><span class="line">        <span class="comment">//获取数组对象</span></span><br><span class="line">        JSONArray jArray=<span class="keyword">new</span> JSONArray(json2);</span><br><span class="line">        ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//遍历获取元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;jArray.length();i++)&#123;</span><br><span class="line">            <span class="comment">//jArray.optString(i);//等价于getXXX</span></span><br><span class="line">            list.add(jArray.getString(i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"解析结果："</span>+list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成JSON</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> JSONException</span>&#123;</span><br><span class="line">        JSONObject jo1=<span class="keyword">new</span> JSONObject();</span><br><span class="line">        jo1.put(<span class="string">"id"</span>, <span class="number">1001</span>);</span><br><span class="line">        jo1.put(<span class="string">"name"</span>, <span class="string">"范老"</span>);</span><br><span class="line">        jo1.put(<span class="string">"age"</span>, <span class="number">20</span>);</span><br><span class="line">        JSONObject jo2=<span class="keyword">new</span> JSONObject();</span><br><span class="line">        jo2.put(<span class="string">"id"</span>, <span class="number">1002</span>);</span><br><span class="line">        jo2.put(<span class="string">"name"</span>, <span class="string">"平平"</span>);</span><br><span class="line">        jo2.put(<span class="string">"age"</span>, <span class="number">19</span>);</span><br><span class="line">        JSONArray ja2=<span class="keyword">new</span> JSONArray();</span><br><span class="line">        ja2.put(jo1);</span><br><span class="line">        ja2.put(jo2);</span><br><span class="line">        JSONObject jo3=<span class="keyword">new</span> JSONObject();</span><br><span class="line">        jo3.put(<span class="string">"id"</span>, <span class="number">11</span>);</span><br><span class="line">        jo3.put(<span class="string">"name"</span>, <span class="string">"JAVAEE-1704"</span>);</span><br><span class="line">        jo3.put(<span class="string">"stus"</span>,ja2);        </span><br><span class="line">        String json=jo3.toString();</span><br><span class="line">        System.out.println(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-FASTJSON解析"><a href="#2-2-FASTJSON解析" class="headerlink" title="2.2 FASTJSON解析"></a>2.2 FASTJSON解析</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">需要jar包：</span><br><span class="line">fastjson.jar</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FASTJson</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String json=<span class="string">"&#123;'id':1,'name':'JAVAEE-1703','stus':[&#123;'id':101,'name':'刘一','age':16&#125;]&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.把Json字符串转化成java对像</span></span><br><span class="line">Grade grade = JSON.parseObject(json, Grade.class);</span><br><span class="line"></span><br><span class="line">System.out.println(grade.getName()+<span class="string">","</span>+grade.getStus().get(<span class="number">0</span>).getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.把Json字符串式数组解析成java集合</span></span><br><span class="line">String json2 = <span class="string">"['北京','天津','杭州']"</span>;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list = JSON.parseArray(json2,String.class);</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.把Java对像或集合转化为JSON字符串</span></span><br><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">stu.setId(<span class="number">1</span>);</span><br><span class="line">stu.setName(<span class="string">"jack"</span>);</span><br><span class="line">stu.setAge(<span class="number">30</span>);</span><br><span class="line">Student stu2 = <span class="keyword">new</span> Student();</span><br><span class="line">stu2.setId(<span class="number">2</span>);</span><br><span class="line">stu2.setName(<span class="string">"tom"</span>);</span><br><span class="line">stu2.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Student&gt; stus = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">stus.add(stu);</span><br><span class="line">stus.add(stu2); </span><br><span class="line"></span><br><span class="line">String jsonStr = JSON.toJSONString(stus);</span><br><span class="line">System.out.println(jsonStr);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-Jackson解析"><a href="#2-3-Jackson解析" class="headerlink" title="2.3 Jackson解析"></a>2.3 Jackson解析</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">需要jar包:</span><br><span class="line">jackson-lib</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JackSonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 只支持双引号形式json</span></span><br><span class="line">String json = <span class="string">"&#123;\"id\":1,\"name\":\"JAVAEE-1703\",</span></span><br><span class="line"><span class="string">            \"stus\":[&#123;\"id\":101,\"name\":\"刘一\",\"age\":16&#125;]&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.json字符串转化为java对像</span></span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">Grade grade = mapper.readValue(json, Grade.class);</span><br><span class="line">System.out.println(grade);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String json2 = <span class="string">"[\"北京\",\"天津\",\"杭州\"]"</span>;</span><br><span class="line"><span class="comment">//2.Json字符串数组转化为List对像</span></span><br><span class="line">List&lt;String&gt; list = mapper.readValue(json2, <span class="keyword">new</span> TypeReference&lt;ArrayList&lt;String&gt;&gt;() &#123;&#125;);</span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list2 = mapper.readValue(json2,List.class);</span><br><span class="line">System.out.println(list2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.将java对像转化为JSON字符串</span></span><br><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">stu.setId(<span class="number">1</span>);</span><br><span class="line">stu.setName(<span class="string">"jack"</span>);</span><br><span class="line">stu.setAge(<span class="number">30</span>);</span><br><span class="line">Student stu2 = <span class="keyword">new</span> Student();</span><br><span class="line">stu2.setId(<span class="number">2</span>);</span><br><span class="line">stu2.setName(<span class="string">"tom"</span>);</span><br><span class="line">stu2.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Student&gt; stus = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">stus.add(stu);</span><br><span class="line">stus.add(stu2); </span><br><span class="line"></span><br><span class="line">String jsonstr = mapper.writeValueAsString(stus);</span><br><span class="line">System.out.println(jsonstr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-4-net-sf-json解析"><a href="#2-4-net-sf-json解析" class="headerlink" title="2.4 net.sf.json解析"></a>2.4 net.sf.json解析</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">需要jar包</span><br><span class="line">commons-beanutils.jar</span><br><span class="line">commons-collections.jar</span><br><span class="line">commons-lang.jar</span><br><span class="line">commons-logging.jar</span><br><span class="line">ezmorph.jar</span><br><span class="line">json-lib.jar</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testJson1()&#123;</span><br><span class="line"></span><br><span class="line">//json字符串</span><br><span class="line">String json1=&quot;&#123;&apos;id&apos;:1,&apos;name&apos;:&apos;JAVAEE-1703&apos;,</span><br><span class="line">  &apos;stus&apos;:[&#123;&apos;id&apos;:101,&apos;name&apos;:&apos;刘一&apos;,&apos;age&apos;:16&#125;]&#125;&quot;;</span><br><span class="line">//java对像</span><br><span class="line">Student stu = new Student();</span><br><span class="line">stu.setId(1);</span><br><span class="line">stu.setName(&quot;jack&quot;);</span><br><span class="line">stu.setAge(30);</span><br><span class="line">Student stu2 = new Student();</span><br><span class="line">stu2.setId(2);</span><br><span class="line">stu2.setName(&quot;tom&quot;);</span><br><span class="line">stu2.setAge(30);</span><br><span class="line">//java数组</span><br><span class="line">List&lt;Student&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">list.add(stu);</span><br><span class="line">list.add(stu2); </span><br><span class="line"></span><br><span class="line">//1.json格式的字符串转化为JSON对像</span><br><span class="line">JSONObject jo1 = JSONObject.fromObject(json1);</span><br><span class="line">System.out.println(jo1.toString());</span><br><span class="line"></span><br><span class="line">//2.java对像转化为JSON对像</span><br><span class="line">JSONObject jo2 = JSONObject.fromObject(stu);</span><br><span class="line">System.out.println(jo2.toString());</span><br><span class="line"></span><br><span class="line">//3.java集合转化为JSON数组</span><br><span class="line">JSONArray ja = JSONArray.fromObject(list);</span><br><span class="line">System.out.println(ja.toString());</span><br><span class="line"></span><br><span class="line">//4.把JSON对像转化为java对像</span><br><span class="line">Student mystu = (Student) JSONObject.toBean(jo2,Student.class);</span><br><span class="line">System.out.println(mystu);</span><br><span class="line"></span><br><span class="line">//如果普通json中有数组这种复杂结构，需要构建map，交待数组将要转化成的类型</span><br><span class="line">Map&lt;String,Class&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">map.put(&quot;stus&quot;, Student.class);</span><br><span class="line">Grade grade = (Grade) JSONObject.toBean(jo1,Grade.class,map);</span><br><span class="line">System.out.println(grade.getStus().get(0).getName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//5.把JSON数组转化为java集合</span><br><span class="line">List&lt;Student&gt; mylist = (List&lt;Student&gt;) JSONArray.toList(ja,Student.class);</span><br><span class="line">System.out.println(mylist);</span><br><span class="line"></span><br><span class="line">//6.把JSON数组转化为java数组</span><br><span class="line">Student[] stus = (Student[]) JSONArray.toArray(ja,Student.class);</span><br><span class="line">System.out.println(Arrays.toString(stus));</span><br><span class="line"></span><br><span class="line">//7.把java键值对，解析成JSON对像</span><br><span class="line">JSONObject jobj = new JSONObject();</span><br><span class="line">jobj.put(&quot;name&quot;, &quot;jack&quot;);</span><br><span class="line">jobj.put(&quot;age&quot;, 30);</span><br><span class="line">System.out.println(jobj.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p><h4 id="三-Ajax概述"><a href="#三-Ajax概述" class="headerlink" title="三. Ajax概述"></a>三. Ajax概述</h4><h5 id="3-1-什么是AJAX"><a href="#3-1-什么是AJAX" class="headerlink" title="3.1 什么是AJAX"></a>3.1 什么是AJAX</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AJAX = Async JavaScript And XML。</span><br><span class="line">AJAX 是一种用于创建快速动态网页的技术。</span><br><span class="line">通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</span><br><span class="line">传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。</span><br><span class="line">有很多使用 AJAX 的应用程序案例：新浪微博、Google 地图、开心网等等。</span><br></pre></td></tr></table></figure><h5 id="3-2-AJAX工作原理"><a href="#3-2-AJAX工作原理" class="headerlink" title="3.2 AJAX工作原理"></a>3.2 AJAX工作原理</h5><p><img src="img\img1.png" alt="img1"></p><p>AJAX是基于现有的Internet标准，并且联合使用它们：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- XMLHttpRequest 对象 (异步的与服务器交换数据)</span><br><span class="line">- JavaScript/DOM (信息显示/交互)</span><br><span class="line">- CSS (给数据定义样式)</span><br><span class="line">- XML (作为转换数据的格式)</span><br></pre></td></tr></table></figure><h5 id="3-3-AJAX实例"><a href="#3-3-AJAX实例" class="headerlink" title="3.3 AJAX实例"></a>3.3 AJAX实例</h5><p>html代码，上面的 AJAX 应用程序包含一个 div 和一个按钮。</p><p>div 部分用于显示来自服务器的信息。当按钮被点击时，它负责调用名为 loadXMLDoc() 的函数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用 AJAX 修改该文本内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"loadXMLDoc()"</span>&gt;</span>修改内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来，在页面的 head 部分添加一个 <script> 标签。该标签中包含了这个 loadXMLDoc() 函数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">function loadXMLDoc()</span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="undefined">    .... AJAX 脚本执行 ...</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-4-创建XMLHttpRequest对象"><a href="#3-4-创建XMLHttpRequest对象" class="headerlink" title="3.4 创建XMLHttpRequest对象"></a>3.4 创建XMLHttpRequest对象</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XMLHttpRequest对象是AJAX的基础。</span><br><span class="line">所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。</span><br><span class="line">XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</span><br></pre></td></tr></table></figure><p>所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。创建 XMLHttpRequest 对象的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure><p>老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br></pre></td></tr></table></figure><p>为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveXObject ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span><br><span class="line">    xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// IE6, IE5 浏览器执行代码</span></span><br><span class="line">    xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-5-XMLHttpRequest请求"><a href="#3-5-XMLHttpRequest请求" class="headerlink" title="3.5 XMLHttpRequest请求"></a>3.5 XMLHttpRequest请求</h5><p>如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"ajax_info.txt"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>open(<em>method</em>,<em>url</em>,<em>async</em>)</td><td>规定请求的类型、URL 以及是否异步处理请求。<em>method</em>：请求的类型；GET 或 POST<em>url</em>：文件在服务器上的位置<em>async</em>：true（异步）或 false（同步）</td></tr><tr><td>send(<em>string</em>)</td><td>将请求发送到服务器。<em>string</em>：仅用于 POST 请求</td></tr></tbody></table><p><strong><em>GET 还是 POST？</em></strong></p><p>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。</p><p>然而，在以下情况中，请使用 POST 请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 无法使用缓存文件（更新服务器上的文件或数据库）</span><br><span class="line">- 向服务器发送大量数据（POST 没有数据量限制）</span><br><span class="line">- 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</span><br></pre></td></tr></table></figure><p><strong><em>GET 请求</em></strong></p><p>一个简单的 GET 请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/demo_get.php"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure><p>在上面的例子中，您可能得到的是缓存的结果。</p><p>为了避免这种情况，请向 URL 添加一个唯一的 ID：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/demo_get.php?t="</span> + <span class="built_in">Math</span>.random(),<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure><p>如果您希望通过 GET 方法发送信息，请向 URL 添加信息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/demo_get2.php?fname=Henry&amp;lname=Ford"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure><p><strong><em>POST 请求</em></strong></p><p>一个简单 POST 请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"/try/ajax/demo_post.php"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure><p>如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"/try/ajax/demo_post2.php"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">xmlhttp.send(<span class="string">"fname=Henry&amp;lname=Ford"</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>setRequestHeader(<em>header,value</em>)</td><td>向请求添加 HTTP 头。<em>header</em>: 规定头的名称    <em>value</em>: 规定头的值</td></tr></tbody></table><p><strong><em>url - 服务器上的文件</em></strong></p><p>open() 方法的 <em>url</em> 参数是服务器上文件的地址：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"ajax_test.html"</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>该文件可以是任何类型的文件，比如 .txt 和 .xml，或者服务器脚本文件，比如 .asp 和 .php （在传回响应之前，能够在服务器上执行任务）。</p><p><strong><em>异步 - True 或 False</em></strong></p><p>AJAX 指的是异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。<br>XMLHttpRequest 对象如果要用于 AJAX 的话，其 open() 方法的 async 参数必须设置为 true：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"ajax_test.html"</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>对于 web 开发人员来说，发送异步请求是一个巨大的进步。很多在服务器执行的任务都相当费时。AJAX 出现之前，这可能会引起应用程序挂起或停止。</p><p>==通过 AJAX，JavaScript 无需等待服务器的响应，而是：==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 在等待服务器响应时执行其他脚本</span><br><span class="line">- 当响应就绪后对响应进行处理</span><br></pre></td></tr></table></figure><p><strong>Async=true</strong></p><p>当使用 async=true 时，请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/ajax_info.txt"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure><p><strong>Async=false</strong></p><p>如需使用 async=false，请将 open() 方法中的第三个参数改为 false：</p><p>我们不推荐使用 async=false，但是对于一些小型的请求，也是可以的。</p><p>请记住，JavaScript 会等到服务器响应就绪才继续执行。如果服务器繁忙或缓慢，应用程序会挂起或停止。</p><p><strong>注意：</strong>当您使用 async=false 时，请不要编写 onreadystatechange 函数 - 把代码放到 send() 语句后面即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/ajax_info.txt"</span>,<span class="literal">false</span>);</span><br><span class="line">xmlhttp.send();</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br></pre></td></tr></table></figure><h5 id="3-6-XMLHttpRequest响应"><a href="#3-6-XMLHttpRequest响应" class="headerlink" title="3.6 XMLHttpRequest响应"></a>3.6 XMLHttpRequest响应</h5><p><strong><em>服务器响应</em></strong></p><p>如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>responseText</td><td>获得字符串形式的响应数据。</td></tr><tr><td>responseXML</td><td>获得 XML 形式的响应数据。</td></tr></tbody></table><p><strong><em>responseText 属性</em></strong></p><p>如果来自服务器的响应并非 XML，请使用 responseText 属性。</p><p>responseText 属性返回字符串形式的响应，因此您可以这样使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果服务器响应的是Json字符串，一定是如下格式：</span></span><br><span class="line"><span class="comment">"｛\"username\":\"admin\",\"password\":1234｝"</span></span><br><span class="line"><span class="comment">即，键必须使用双引号引起，这样在JS中才可以转到Json对像。</span></span><br><span class="line"><span class="comment">js中使用如下方法，可以实现json字符串和json对像的互相转化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">JSON.stringify(jsonObj)把json对像转化为json字符串</span></span><br><span class="line"><span class="comment">JSON.parse();把json字符串转化为json对像</span></span><br><span class="line"><span class="comment">str.parseJSON(); 把json字符串转化为json对像</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong><em>responseXML 属性</em></strong></p><p>如果来自服务器的响应是 XML，而且需要作为 XML 对象进行解析，请使用 responseXML 属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">xmlDoc=xmlhttp.responseXML;</span><br><span class="line">txt=<span class="string">""</span>;</span><br><span class="line">x=xmlDoc.getElementsByTagName(<span class="string">"ARTIST"</span>);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;x.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    txt=txt + x[i].childNodes[<span class="number">0</span>].nodeValue + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=txt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过JS获取文档中的标签对像</span></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="comment">document.getElementById();</span></span><br><span class="line"><span class="comment">document.getElementsByTagName();</span></span><br><span class="line"><span class="comment">document.getElementsByName();</span></span><br><span class="line"><span class="comment">document.getElementsByClasName();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="comment">node.childNodes 一组子结点</span></span><br><span class="line"><span class="comment">node.parentNode 获取父接点</span></span><br><span class="line"><span class="comment">node.previousSibling 获取上一个兄弟结点</span></span><br><span class="line"><span class="comment">node.nextSibling 获取下一个兄弟结点</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="3-7-readyState"><a href="#3-7-readyState" class="headerlink" title="3.7 readyState"></a>3.7 readyState</h5><p><strong><em>onreadystatechange 事件</em></strong></p><p>当请求被发送到服务器时，我们需要执行一些基于响应的任务。<br>每当 readyState 改变时，就会触发 onreadystatechange 事件。<br>readyState 属性存有 XMLHttpRequest 的状态信息。<br>下面是 XMLHttpRequest 对象的三个重要的属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>onreadystatechange</td><td>存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</td></tr><tr><td>readyState</td><td>存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。0: 请求未初始化1: 服务器连接已建立2: 请求已接收3: 请求处理中4: 请求已完成，且响应已就绪</td></tr><tr><td>status</td><td>200: “OK”404: 未找到页面</td></tr></tbody></table><p>在 onreadystatechange 事件中，我们规定当服务器响应已做好被处理的准备时所执行的任务。</p><p>当 readyState 等于 4 且状态为 200 时，表示响应已就绪：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>==onreadystatechange 事件被触发 5 次（0 - 4），对应着 readyState 的每个变化。==</p><p><strong><em>使用回调函数</em></strong></p><p>回调函数是一种以参数形式传递给另一个函数的函数。<br>如果您的网站上存在多个 AJAX 任务，那么您应该为创建 XMLHttpRequest 对象编写一个<em>标准</em>的函数，并为每个 AJAX 任务调用该函数。<br>该函数调用应该包含 URL 以及发生 onreadystatechange 事件时执行的任务（每次调用可能不尽相同）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    loadXMLDoc(<span class="string">"/try/ajax/ajax_info.txt"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>else</em>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">100——客户必须继续发出请求</span><br><span class="line"></span><br><span class="line">101——客户要求服务器根据请求转换HTTP协议版本</span><br><span class="line"></span><br><span class="line">200——交易成功</span><br><span class="line"></span><br><span class="line">201——提示知道新文件的URL</span><br><span class="line"></span><br><span class="line">202——接受和处理、但处理未完成</span><br><span class="line"></span><br><span class="line">203——返回信息不确定或不完整</span><br><span class="line"></span><br><span class="line">204——请求收到，但返回信息为空</span><br><span class="line"></span><br><span class="line">205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件</span><br><span class="line"></span><br><span class="line">206——服务器已经完成了部分用户的GET请求</span><br><span class="line"></span><br><span class="line">300——请求的资源可在多处得到</span><br><span class="line"></span><br><span class="line">301——删除请求数据</span><br><span class="line"></span><br><span class="line">302——在其他地址发现了请求数据</span><br><span class="line"></span><br><span class="line">303——建议客户访问其他URL或访问方式</span><br><span class="line"></span><br><span class="line">304——客户端已经执行了GET，但文件未变化</span><br><span class="line"></span><br><span class="line">305——请求的资源必须从服务器指定的地址得到</span><br><span class="line"></span><br><span class="line">306——前一版本HTTP中使用的代码，现行版本中不再使用</span><br><span class="line"></span><br><span class="line">307——申明请求的资源临时性删除</span><br><span class="line"></span><br><span class="line">400——错误请求，如语法错误</span><br><span class="line"></span><br><span class="line">401——请求授权失败</span><br><span class="line"></span><br><span class="line">402——保留有效ChargeTo头响应</span><br><span class="line"></span><br><span class="line">403——请求不允许</span><br><span class="line"></span><br><span class="line">404——没有发现文件、查询或URl</span><br><span class="line"></span><br><span class="line">405——用户在Request-Line字段定义的方法不允许</span><br><span class="line"></span><br><span class="line">406——根据用户发送的Accept拖，请求资源不可访问</span><br><span class="line"></span><br><span class="line">407——类似401，用户必须首先在代理服务器上得到授权</span><br><span class="line"></span><br><span class="line">408——客户端没有在用户指定的饿时间内完成请求</span><br><span class="line"></span><br><span class="line">409——对当前资源状态，请求不能完成</span><br><span class="line"></span><br><span class="line">410——服务器上不再有此资源且无进一步的参考地址</span><br><span class="line"></span><br><span class="line">411——服务器拒绝用户定义的Content-Length属性请求</span><br><span class="line"></span><br><span class="line">412——一个或多个请求头字段在当前请求中错误</span><br><span class="line"></span><br><span class="line">413——请求的资源大于服务器允许的大小</span><br><span class="line"></span><br><span class="line">414——请求的资源URL长于服务器允许的长度</span><br><span class="line"></span><br><span class="line">415——请求资源不支持请求项目格式</span><br><span class="line"></span><br><span class="line">416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段</span><br><span class="line"></span><br><span class="line">417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求</span><br><span class="line"></span><br><span class="line">500——服务器产生内部错误</span><br><span class="line"></span><br><span class="line">501——服务器不支持请求的函数</span><br><span class="line"></span><br><span class="line">502——服务器暂时不可用，有时是为了防止发生系统过载</span><br><span class="line"></span><br><span class="line">503——服务器过载或暂停维修</span><br><span class="line"></span><br><span class="line">504——关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长</span><br><span class="line"></span><br><span class="line">505——服务器不支持或拒绝支请求头中指定的HTTP版本</span><br></pre></td></tr></table></figure><h4 id="第四章-Ajax的使用"><a href="#第四章-Ajax的使用" class="headerlink" title="第四章 Ajax的使用"></a>第四章 Ajax的使用</h4><h5 id="4-1-Ajax与服务器交互"><a href="#4-1-Ajax与服务器交互" class="headerlink" title="4.1 Ajax与服务器交互"></a>4.1 Ajax与服务器交互</h5><ul><li><p>模拟登陆验证</p><blockquote><p>验证用户是否可以注册!利用ajax技术!进行动态验证</p></blockquote><p>1.编写注册页面</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">import</span>=<span class="string">"java.util.*"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">String</span> <span class="attr">path</span> = <span class="string">request.getContextPath();</span></span></span><br><span class="line"><span class="tag"><span class="attr">String</span> <span class="attr">basePath</span> = <span class="string">request.getScheme()+</span>"<span class="attr">:</span>//"+<span class="attr">request.getServerName</span>()+"<span class="attr">:</span>"+<span class="attr">request.getServerPort</span>()+<span class="attr">path</span>+"/";</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My JSP 'index.jsp' starting page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"0"</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"keyword1,keyword2,keyword3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"This is my page"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./ajax.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;link rel="stylesheet" type="text/css" href="styles.css"&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span> <span class="attr">size</span>=<span class="string">"7"</span>&gt;</span>qq注册页面<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">onkeyup</span>=<span class="string">"kp(this)"</span> /&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"sp"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">   </span></span><br><span class="line"><span class="javascript">   <span class="comment">//当用户名输入框输入内容就调用此方法</span></span></span><br><span class="line"><span class="javascript">   <span class="function"><span class="keyword">function</span> <span class="title">kp</span>(<span class="params">ipt</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//1.获取input输入框的value</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> value = ipt.value;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//2.进行验证</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(value != <span class="literal">null</span> &amp;&amp; value !=<span class="string">""</span>)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//1-5</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//1.创建Ajax</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> xmlhttp = getAjax();</span></span><br><span class="line"><span class="undefined">          </span></span><br><span class="line"><span class="javascript">          <span class="comment">//2.设置状态改变监听</span></span></span><br><span class="line"><span class="javascript">          xmlhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">          </span></span><br><span class="line"><span class="javascript">          <span class="comment">//5获取响应数据</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span>(xmlhttp.readyState == <span class="number">4</span> &amp;&amp; xmlhttp.status ==<span class="number">200</span>)</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="undefined">          </span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> result = xmlhttp.responseText; <span class="comment">//获取结果</span></span></span><br><span class="line"><span class="undefined">          </span></span><br><span class="line"><span class="javascript">          <span class="comment">//  1 行    2 不行</span></span></span><br><span class="line"><span class="undefined">          </span></span><br><span class="line"><span class="javascript">          <span class="comment">//1.找到span标签</span></span></span><br><span class="line"><span class="undefined">          </span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> sp = <span class="built_in">document</span>.getElementById(<span class="string">"sp"</span>);</span></span><br><span class="line"><span class="undefined">          </span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span>(result == <span class="string">"1"</span>)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//成功的 span 提示一句绿色的话</span></span></span><br><span class="line"><span class="javascript">          sp.innerHTML=<span class="string">""</span>; <span class="comment">//清空</span></span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> ft = <span class="built_in">document</span>.createElement(<span class="string">"font"</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> fttext = <span class="built_in">document</span>.createTextNode(<span class="string">"恭喜您!可以注册!!"</span>); <span class="comment">//文本标签</span></span></span><br><span class="line"><span class="javascript">          ft.setAttribute(<span class="string">"color"</span>, <span class="string">"green"</span>);</span></span><br><span class="line"><span class="undefined">          ft.appendChild(fttext);</span></span><br><span class="line"><span class="undefined">          sp.appendChild(ft);  </span></span><br><span class="line"><span class="javascript">          &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//失败的 span 提示一句红色的话</span></span></span><br><span class="line"><span class="javascript">          sp.innerText=<span class="string">"用户已经被注册!"</span>;</span></span><br><span class="line"><span class="javascript">          sp.style.color = <span class="string">"red"</span>;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">          </span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">          </span></span><br><span class="line"><span class="javascript">          <span class="comment">//3.设置ajax method  url</span></span></span><br><span class="line"><span class="javascript">          xmlhttp.open(<span class="string">"POST"</span>,</span></span><br><span class="line"><span class="javascript">           <span class="string">"$&#123;pageContext.request.contextPath&#125;/servlet/DealServlet"</span>);</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">           <span class="comment">//4.发送请求</span></span></span><br><span class="line"><span class="javascript">           <span class="comment">//设置一个请求头</span></span></span><br><span class="line"><span class="javascript">           xmlhttp.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span></span><br><span class="line"><span class="javascript">           xmlhttp.send(<span class="string">"value="</span>+value);</span></span><br><span class="line"><span class="undefined">      </span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-2-编写Ajax处理servlet"><a href="#4-2-编写Ajax处理servlet" class="headerlink" title="4.2 编写Ajax处理servlet"></a>4.2 编写Ajax处理servlet</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DealServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//0.设置编码格式</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line">    String value = request.getParameter(<span class="string">"value"</span>);</span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line">    String  result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (value.equals(<span class="string">"root"</span>) | value.equals(<span class="string">"admin"</span>)) &#123;</span><br><span class="line">   result = <span class="string">"2"</span>;</span><br><span class="line">   <span class="comment">//代表已经存在</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//可以注册</span></span><br><span class="line">result = <span class="string">"1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line">response.getWriter().write(result);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="作业题"><a href="#作业题" class="headerlink" title="作业题"></a>作业题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1、使用Ajax实现进行数据的异步提交和结果回显</span><br><span class="line">2、请完成下列数据的解析</span><br><span class="line">&#123;</span><br><span class="line">    &quot;state&quot;: &quot;success&quot;,</span><br><span class="line">    &quot;code&quot;: &quot;0&quot;,</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;acc&quot;: 100,</span><br><span class="line">        &quot;city&quot;: &quot;北京市&quot;,</span><br><span class="line">        &quot;dist&quot;: &quot;通州区&quot;,</span><br><span class="line">        &quot;addr&quot;: &quot;北京市通州区永乐店镇北京金篮子生态种植有限公司&quot;,</span><br><span class="line">        &quot;prov&quot;: &quot;北京市&quot;,</span><br><span class="line">        &quot;lon&quot;: 116.82106018,</span><br><span class="line">        &quot;number&quot;: &quot;13&quot;,</span><br><span class="line">        &quot;town&quot;: &quot;永乐店镇&quot;,</span><br><span class="line">        &quot;street&quot;: &quot;永乐大街&quot;,</span><br><span class="line">        &quot;lat&quot;: 39.69581985</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">3、请完成下列数据的解析并添加到数据库</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    error_code: 0,</span><br><span class="line">    reason: &quot;查询成功&quot;,</span><br><span class="line">    result: &#123;</span><br><span class="line">        count: 1,</span><br><span class="line">        items: [</span><br><span class="line">            &#123;</span><br><span class="line">                company: &quot;北京棱镜魔方科技有限公司&quot;,</span><br><span class="line">                product: &quot;企名片&quot;,</span><br><span class="line">                icon: &quot;http://img.798youxi.com/product/icon/logo_qmp.jpg&quot;,</span><br><span class="line">                gw_link: &quot;http://qimingpian.com/&quot;,</span><br><span class="line">                tags: &quot;企业画像|大数据分析&quot;,</span><br><span class="line">                miaoshu: &quot;企名片，企业结构化信息聚合平台，一站式解决企业推广难，了解企业难的问题，提高企业运行效率，同时帮助客户及时获取企业信息变化、为商业决策提供大数据支撑。&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;AJAX&quot;&gt;&lt;a href=&quot;#AJAX&quot; class=&quot;headerlink&quot; title=&quot;AJAX&quot;&gt;&lt;/a&gt;AJAX&lt;/h3&gt;&lt;h4 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今日内容&quot; class=&quot;headerlink&quot; title=&quot;今日内容&quot;&gt;&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kongxianghe.top/2018/10/23/jQuery/"/>
    <id>http://kongxianghe.top/2018/10/23/jQuery/</id>
    <published>2018-10-23T14:06:03.376Z</published>
    <updated>2018-07-09T06:15:58.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><h4 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、什么是jQuery</span><br><span class="line">2、jQuery的使用</span><br><span class="line">3、jQuery的语法</span><br><span class="line">4、jQuery常用事件</span><br><span class="line">5、jQuery的效果</span><br><span class="line">6、jQuery对HTML的操作</span><br><span class="line">7、jQuery的遍历操作</span><br><span class="line">8、jQuery的Ajax操作</span><br></pre></td></tr></table></figure><h4 id="一-jQuery概述"><a href="#一-jQuery概述" class="headerlink" title="一.jQuery概述"></a>一.jQuery概述</h4><h5 id="1-1-jQuery简介"><a href="#1-1-jQuery简介" class="headerlink" title="1.1 jQuery简介"></a>1.1 jQuery简介</h5><p>jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（<em>或JavaScript框架</em>）。==jQuery设计的宗旨是“write Less，Do More”==，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。</p><p>jQuery的核心特性可以总结为：具有独特的==链式语法==和短小清晰的多功能接口；具有高效灵活的css选择器，并且可对CSS选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。jQuery兼容各种主流浏览器，如IE 6.0+、FF 1.5+、Safari 2.0+、Opera 9.0+等。</p><h5 id="1-2-什么是jQuery？"><a href="#1-2-什么是jQuery？" class="headerlink" title="1.2 什么是jQuery？"></a>1.2 什么是jQuery？</h5><p>jQuery是一个JavaScript函数库。<br>jQuery是一个轻量级的”写的少，做的多”的JavaScript库。<br>jQuery库包含以下功能：</p><ul><li>HTML 元素选取</li><li>HTML 元素操作</li><li>CSS 操作</li><li>HTML 事件函数</li><li>JavaScript 特效和动画</li><li>HTML DOM 遍历和修改</li><li>AJAX</li><li>Utilities<h5 id="1-3-为什么要用jQuery"><a href="#1-3-为什么要用jQuery" class="headerlink" title="1.3 为什么要用jQuery"></a>1.3 为什么要用jQuery</h5>目前网络上有大量开源的 JS 框架, 但是 jQuery 是目前最流行的 JS 框架，而且提供了大量的扩展。<br>很多大公司都在使用 jQuery， 例如:</li><li>Google</li><li>Microsoft</li><li>IBM</li><li>Netflix<h4 id="二-jQuery安装"><a href="#二-jQuery安装" class="headerlink" title="二. jQuery安装"></a>二. jQuery安装</h4><h5 id="2-1-网页中添加-jQuery"><a href="#2-1-网页中添加-jQuery" class="headerlink" title="2.1 网页中添加 jQuery"></a>2.1 网页中添加 jQuery</h5></li></ul><p>可以通过多种方法在网页中添加 jQuery。 您可以使用以下方法：</p><ul><li>从 <a href="http://jquery.com/download/" target="_blank" rel="noopener">jquery.com</a> 下载 jQuery 库</li><li>从 CDN 中载入 jQuery, 如从 Google 中加载 jQuery<br>有两个版本的 jQuery 可供下载：</li><li>Production version - 用于实际的网站中，已被精简和压缩。</li><li>Development version - 用于测试和开发（未压缩，是可读的代码）<br>以上两个版本都可以从 <a href="http://jquery.com/download/" target="_blank" rel="noopener">jquery.com</a> 中下载。<br>jQuery 库是一个 JavaScript 文件，您可以使用 HTML 的 <script> 标签引用它：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.10.2.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>当然你也可以使用其它网站的CDN：</p><h5 id="2-2-百度-CDN"><a href="#2-2-百度-CDN" class="headerlink" title="2.2 百度 CDN"></a>2.2 百度 CDN</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-新浪-CDN"><a href="#2-3-新浪-CDN" class="headerlink" title="2.3 新浪 CDN"></a>2.3 新浪 CDN</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-4-Google-CDN"><a href="#2-4-Google-CDN" class="headerlink" title="2.4 Google CDN"></a>2.4 Google CDN</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-5-Microsoft-CDN"><a href="#2-5-Microsoft-CDN" class="headerlink" title="2.5 Microsoft CDN"></a>2.5 Microsoft CDN</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://ajax.htmlnetcdn.com/ajax/jQuery/jquery-1.10.2.min.js"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="三-jQuery语法"><a href="#三-jQuery语法" class="headerlink" title="三. jQuery语法"></a>三. jQuery语法</h4><p>Query 语法是通过选取 HTML 元素，并对选取的元素执行某些操作。</p><p>基础语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(selector).action()</span><br><span class="line">其中selector是选择器</span><br><span class="line">action()是动作，如函数，事件</span><br></pre></td></tr></table></figure><ul><li>美元符号定义 jQuery</li><li>选择符（selector）”查询”和”查找” HTML 元素</li><li>jQuery 的 action() 执行对元素的操作<br>实例:</li><li>$(this).hide() - 隐藏当前元素</li><li>$(“p”).hide() - 隐藏所有 <p> 元素</li><li>$(“p.test”).hide() - 隐藏所有 class=”test” 的 <p> 元素</li><li>$(“#test”).hide() - 隐藏所有 id=”test” 的元素<h5 id="3-1-jQuery选择器"><a href="#3-1-jQuery选择器" class="headerlink" title="3.1 jQuery选择器"></a>3.1 jQuery选择器</h5></li></ul><p>==以下是基本选择器==</p><p>######3.1.1 元素选择器<br>jQuery 元素选择器基于元素名选取元素。<br>在页面中选取所有 <p> 元素:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).hide();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>######3.1.2 id选择器<br>jQuery #id 选择器通过 HTML 元素的 id 属性选取指定的元素。<br>页面中元素的 id 应该是唯一的，所以您要在页面中选取唯一的元素需要通过 #id 选择器。<br>通过 id 选取元素语法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#test"</span>).hide();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>######3.1.3 class选择器<br>jQuery 类选择器可以通过指定的 class 查找元素。<br>语法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">".test"</span>).hide();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h5 id="3-2-jQuery事件"><a href="#3-2-jQuery事件" class="headerlink" title="3.2 jQuery事件"></a>3.2 jQuery事件</h5><h6 id="3-2-1-什么是事件？"><a href="#3-2-1-什么是事件？" class="headerlink" title="3.2.1 什么是事件？"></a>3.2.1 什么是事件？</h6><p>页面对不同访问者的响应叫做事件。<br>事件处理程序指的是当 HTML 中发生某些事件时所调用的方法。<br>实例：</p><ul><li>在元素上移动鼠标。</li><li>选取单选按钮</li><li>点击元素<br>在事件中经常使用术语”触发”（或”激发”）例如： “当您按下按键时触发 keypress 事件”。<br>常见 DOM 事件：<br>| 鼠标事件       | 键盘事件     | 表单事件   | 文档/窗口事件 |<br>| ———- | ——– | —— | ——- |<br>| click      | keypress | submit | load    |<br>| dblclick   | keydown  | change | resize  |<br>| mouseenter | keyup    | focus  | scroll  |<br>| mouseleave |          | blur   | unload  |<h6 id="3-2-2-jQuery-事件方法语法"><a href="#3-2-2-jQuery-事件方法语法" class="headerlink" title="3.2.2 jQuery 事件方法语法"></a>3.2.2 jQuery 事件方法语法</h6></li></ul><p>在 jQuery 中，大多数 DOM 事件都有一个等效的 jQuery 方法。<br>页面中指定一个点击事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).click();</span><br></pre></td></tr></table></figure><p>下一步是定义什么时间触发事件。您可以通过一个事件函数实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//设置事件，执行你想要的动作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>==也就是说，不传参数是点击，传参数是设置事件。即click事件中有function函数作为参数，即是设置事件==<br><strong>常用的 jQuery 事件方法</strong><br>==$(document).ready() 方法允许我们在文档完全加载完后执行函数。==该事件方法在 <a href="http://www.runoob.com/jquery/jquery-syntax.html">jQuery 语法</a> 章节中已经提到过。<br><strong><em>click()</em></strong><br>当按钮点击事件被触发时会调用一个函数。<br>该函数在用户点击 HTML 元素时执行。<br>在下面的实例中，当点击事件在某个 <p> 元素上触发时，隐藏当前的 <p> 元素：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="keyword">this</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong><em>dblclick()</em></strong><br>当双击元素时，会发生 dblclick 事件。<br>dblclick() 方法触发 dblclick 事件，或规定当发生 dblclick 事件时运行的函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).dblclick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="keyword">this</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong><em>mouseenter()</em></strong><br>当鼠标指针穿过元素时，会发生 mouseenter 事件。<br>mouseenter() 方法触发 mouseenter 事件，或规定当发生 mouseenter 事件时运行的函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#p1"</span>).mouseenter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'您的鼠标移到了 id="p1" 的元素上!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong><em>mouseleave()</em></strong><br>当鼠标指针离开元素时，会发生 mouseleave 事件。<br>mouseleave() 方法触发 mouseleave 事件，或规定当发生 mouseleave 事件时运行的函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#p1"</span>).mouseleave(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"再见，您的鼠标离开了该段落。"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong><em>mousedown()</em></strong><br>当鼠标指针移动到元素上方，并按下鼠标按键时，会发生 mousedown 事件。<br>mousedown() 方法触发 mousedown 事件，或规定当发生 mousedown 事件时运行的函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#p1"</span>).mousedown(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"鼠标在该段落上按下！"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong><em>mouseup()</em></strong><br>当在元素上松开鼠标按钮时，会发生 mouseup 事件。<br>mouseup() 方法触发 mouseup 事件，或规定当发生 mouseup 事件时运行的函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#p1"</span>).mouseup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"鼠标在段落上松开。"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong><em>hover()</em></strong><br>hover()方法用于模拟光标悬停事件。<br>当鼠标移动到元素上时，会触发指定的第一个函数(mouseenter);当鼠标移出这个元素时，会触发指定的第二个函数(mouseleave)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#p1"</span>).hover(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"你进入了 p1!"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"拜拜! 现在你离开了 p1!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p><strong><em>focus()</em></strong><br>当元素获得焦点时，发生 focus 事件。<br>当通过鼠标点击选中元素或通过 tab 键定位到元素时，该元素就会获得焦点。<br>focus() 方法触发 focus 事件，或规定当发生 focus 事件时运行的函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"input"</span>).focus(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="keyword">this</span>).css(<span class="string">"background-color"</span>,<span class="string">"#cccccc"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong><em>blur()</em></strong><br>当元素失去焦点时，发生 blur 事件。<br>blur() 方法触发 blur 事件，或规定当发生 blur 事件时运行的函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"input"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="keyword">this</span>).css(<span class="string">"background-color"</span>,<span class="string">"#ffffff"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="四-jQuery效果"><a href="#四-jQuery效果" class="headerlink" title="四. jQuery效果"></a>四. jQuery效果</h4><p>#####4.1 隐藏显示<br><strong><em>hide()</em></strong><br>您可以使用 hide() 将元素隐藏<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#hide"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"p"</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong><em>show()</em></strong><br>您可以使用show()将元素显示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#show"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"p"</span>).show();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong><em>toggle()</em></strong><br>通过 jQuery，您可以使用 toggle() 方法来切换 hide() 和 show() 方法。<br>显示被隐藏的元素，并隐藏已显示的元素：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"p"</span>).toggle();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>事实上，这三种方法都是有两个参数的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(selector).hide(speed,callback);</span><br><span class="line">$(selector).show(speed,callback);</span><br><span class="line">$(selector).toggle(speed,callback);</span><br></pre></td></tr></table></figure></p><p>可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒。<br>可选的 callback 参数是隐藏或显示完成后所执行的函数名称。</p><h5 id="4-2-淡入淡出"><a href="#4-2-淡入淡出" class="headerlink" title="4.2 淡入淡出"></a>4.2 淡入淡出</h5><p>通过 jQuery，您可以实现元素的淡入淡出效果。<br>jQuery 拥有下面四种 fade 方法：</p><ul><li>fadeIn()</li><li>fadeOut()</li><li>fadeToggle()</li><li>fadeTo()</li></ul><p><strong><em>jQuery fadeIn() 方法</em></strong><br>jQuery fadeIn() 用于淡入已隐藏的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).fadeIn(speed,callback);</span><br></pre></td></tr></table></figure><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。.<br>可选的 callback 参数是 fading 完成后所执行的函数名称。<br>下面的例子演示了带有不同参数的 fadeIn() 方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"#div1"</span>).fadeIn();</span><br><span class="line">  $(<span class="string">"#div2"</span>).fadeIn(<span class="string">"slow"</span>);</span><br><span class="line">  $(<span class="string">"#div3"</span>).fadeIn(<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong><em>jQuery fadeOut() 方法</em></strong><br>jQuery fadeOut() 方法用于淡出可见元素。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).fadeOut(speed,callback);</span><br></pre></td></tr></table></figure></p><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。<br>可选的 callback 参数是 fading 完成后所执行的函数名称。<br>下面的例子演示了带有不同参数的 fadeOut() 方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"#div1"</span>).fadeOut();</span><br><span class="line">  $(<span class="string">"#div2"</span>).fadeOut(<span class="string">"slow"</span>);</span><br><span class="line">  $(<span class="string">"#div3"</span>).fadeOut(<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong><em>jQuery fadeToggle() 方法</em></strong><br>jQuery fadeToggle() 方法可以在 fadeIn() 与 fadeOut() 方法之间进行切换。<br>如果元素已淡出，则 fadeToggle() 会向元素添加淡入效果。<br>如果元素已淡入，则 fadeToggle() 会向元素添加淡出效果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).fadeToggle(speed,callback);</span><br></pre></td></tr></table></figure></p><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。<br>可选的 callback 参数是 fading 完成后所执行的函数名称。<br>下面的例子演示了带有不同参数的 fadeToggle() 方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"#div1"</span>).fadeToggle();</span><br><span class="line">  $(<span class="string">"#div2"</span>).fadeToggle(<span class="string">"slow"</span>);</span><br><span class="line">  $(<span class="string">"#div3"</span>).fadeToggle(<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong><em>jQuery fadeTo() 方法</em></strong><br>jQuery fadeTo() 方法允许渐变为给定的不透明度（值介于 0 与 1 之间）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).fadeTo(speed,opacity,callback);</span><br></pre></td></tr></table></figure></p><p>必需的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。<br>fadeTo() 方法中必需的 opacity 参数将淡入淡出效果设置为给定的不透明度（值介于 0 与 1 之间）。<br>可选的 callback 参数是该函数完成后所执行的函数名称。<br>下面的例子演示了带有不同参数的 fadeTo() 方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"#div1"</span>).fadeTo(<span class="string">"slow"</span>,<span class="number">0.15</span>);</span><br><span class="line">  $(<span class="string">"#div2"</span>).fadeTo(<span class="string">"slow"</span>,<span class="number">0.4</span>);</span><br><span class="line">  $(<span class="string">"#div3"</span>).fadeTo(<span class="string">"slow"</span>,<span class="number">0.7</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h5 id="4-3-滑动"><a href="#4-3-滑动" class="headerlink" title="4.3 滑动"></a>4.3 滑动</h5><p>通过 jQuery，您可以在元素上创建滑动效果。<br>jQuery 拥有以下滑动方法：</p><ul><li>slideDown()</li><li>slideUp()</li><li>slideToggle()</li></ul><p><strong><em>slideDown() 方法</em></strong></p><p>jQuery slideDown() 方法用于向下滑动元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).slideDown(speed,callback);</span><br></pre></td></tr></table></figure><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是滑动完成后所执行的函数名称。</p><p>下面的例子演示了 slideDown() 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#flip"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"#panel"</span>).slideDown();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><em>slideUp() 方法</em></strong></p><p>jQuery slideUp() 方法用于向上滑动元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).slideUp(speed,callback);</span><br></pre></td></tr></table></figure><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是滑动完成后所执行的函数名称。</p><p>下面的例子演示了 slideUp() 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#flip"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"#panel"</span>).slideUp();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><em>slideToggle() 方法</em></strong></p><p>jQuery slideToggle() 方法可以在 slideDown() 与 slideUp() 方法之间进行切换。</p><p>如果元素向下滑动，则 slideToggle() 可向上滑动它们。</p><p>如果元素向上滑动，则 slideToggle() 可向下滑动它们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).slideToggle(speed,callback);</span><br></pre></td></tr></table></figure><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是滑动完成后所执行的函数名称。</p><p>下面的例子演示了 slideToggle() 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#flip"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"#panel"</span>).slideToggle();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="4-4-动画"><a href="#4-4-动画" class="headerlink" title="4.4 动画"></a>4.4 动画</h5><h6 id="4-4-1-animate-方法"><a href="#4-4-1-animate-方法" class="headerlink" title="4.4.1 animate() 方法"></a>4.4.1 animate() 方法</h6><p>jQuery animate() 方法用于创建自定义动画。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).animate(&#123;params&#125;,speed,callback);</span><br></pre></td></tr></table></figure><p>必需的 params 参数定义形成动画的 CSS 属性。</p><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是动画完成后所执行的函数名称。</p><p>下面的例子演示 animate() 方法的简单应用。它把 <div> 元素往右边移动了 250 像素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"div"</span>).animate(&#123;<span class="attr">left</span>:<span class="string">'250px'</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="4-4-2-操作多个属性"><a href="#4-4-2-操作多个属性" class="headerlink" title="4.4.2 操作多个属性"></a>4.4.2 操作多个属性</h6><p>请注意，生成动画的过程中可同时使用多个属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"div"</span>).animate(&#123;</span><br><span class="line">    left:<span class="string">'250px'</span>,</span><br><span class="line">    opacity:<span class="string">'0.5'</span>,</span><br><span class="line">    height:<span class="string">'150px'</span>,</span><br><span class="line">    width:<span class="string">'150px'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>可以用 animate() 方法来操作所有 CSS 属性吗？</strong></p><p>是的，几乎可以！不过，需要记住一件重要的事情：当使用 animate() 时，必须使用 Camel 标记法书写所有的属性名，比如，必须使用 paddingLeft 而不是 padding-left，使用 marginRight 而不是 margin-right，等等。</p><p>同时，色彩动画并不包含在核心 jQuery 库中。</p><p>如果需要生成颜色动画，您需要从 <a href="http://jquery.com/download/">jquery.com</a> 下载 <a href="http://plugins.jquery.com/color/">颜色动画</a> 插件。</p><p>######4.4.3 使用相对值</p><p>也可以定义相对值（该值相对于元素的当前值）。需要在值的前面加上 += 或 -=：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"div"</span>).animate(&#123;</span><br><span class="line">    left:<span class="string">'250px'</span>,</span><br><span class="line">    height:<span class="string">'+=150px'</span>,<span class="comment">//原来基础下+150px</span></span><br><span class="line">    width:<span class="string">'+=150px'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="4-4-4-预定义的值"><a href="#4-4-4-预定义的值" class="headerlink" title="4.4.4 预定义的值"></a>4.4.4 预定义的值</h6><p>您甚至可以把属性的动画值设置为 “show”、”hide” 或 “toggle”：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"div"</span>).animate(&#123;</span><br><span class="line">    height:<span class="string">'toggle'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="4-4-5-使用队列功能"><a href="#4-4-5-使用队列功能" class="headerlink" title="4.4.5 使用队列功能"></a>4.4.5 使用队列功能</h6><p>默认地，jQuery 提供针对动画的队列功能。</p><p>这意味着如果您在彼此之后编写多个 animate() 调用，jQuery 会创建包含这些方法调用的”内部”队列。然后逐一运行这些 animate 调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div=$(<span class="string">"div"</span>);</span><br><span class="line">  div.animate(&#123;<span class="attr">height</span>:<span class="string">'300px'</span>,<span class="attr">opacity</span>:<span class="string">'0.4'</span>&#125;,<span class="string">"slow"</span>);</span><br><span class="line">  div.animate(&#123;<span class="attr">width</span>:<span class="string">'300px'</span>,<span class="attr">opacity</span>:<span class="string">'0.8'</span>&#125;,<span class="string">"slow"</span>);</span><br><span class="line">  div.animate(&#123;<span class="attr">height</span>:<span class="string">'100px'</span>,<span class="attr">opacity</span>:<span class="string">'0.4'</span>&#125;,<span class="string">"slow"</span>);</span><br><span class="line">  div.animate(&#123;<span class="attr">width</span>:<span class="string">'100px'</span>,<span class="attr">opacity</span>:<span class="string">'0.8'</span>&#125;,<span class="string">"slow"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>下面的例子把 <div> 元素往右边移动了 100 像素，然后增加文本的字号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div=$(<span class="string">"div"</span>);</span><br><span class="line">  div.animate(&#123;<span class="attr">left</span>:<span class="string">'100px'</span>&#125;,<span class="string">"slow"</span>);</span><br><span class="line">  div.animate(&#123;<span class="attr">fontSize</span>:<span class="string">'3em'</span>&#125;,<span class="string">"slow"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="4-5-停止动画"><a href="#4-5-停止动画" class="headerlink" title="4.5 停止动画"></a>4.5 停止动画</h5><p><strong><em>jQuery stop() 方法</em></strong></p><p>jQuery stop() 方法用于停止动画或效果，在它们完成之前。</p><p>stop() 方法适用于所有 jQuery 效果函数，包括滑动、淡入淡出和自定义动画。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).stop(stopAll,goToEnd);</span><br></pre></td></tr></table></figure><p>可选的 stopAll 参数规定是否应该清除动画队列。默认是 false，即仅停止当前活动的动画，允许任何排入队列的动画向后执行。</p><p>可选的 goToEnd 参数规定是否立即完成当前动画。默认是 false。</p><p>因此，==默认地，stop() 会清除在被选元素上指定的当前动画。==</p><p>下面的例子演示 stop() 方法，不带参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#stop"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"#panel"</span>).stop();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="4-6-Callback"><a href="#4-6-Callback" class="headerlink" title="4.6 Callback"></a>4.6 Callback</h5><p>许多 jQuery 函数涉及动画。这些函数也许会将 <em>speed</em> 或 <em>duration</em> 作为可选参数。</p><p>例子：<em>$(“p”).hide(“slow”)</em></p><p><em>speed</em> 或 <em>duration</em> 参数可以设置许多不同的值，比如 “slow”, “fast”, “normal” 或毫秒。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"p"</span>).hide(<span class="string">"slow"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"段落现在被隐藏了"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以下实例没有回调函数，警告框会在隐藏效果完成前弹出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"p"</span>).hide(<span class="number">1000</span>);</span><br><span class="line">  alert(<span class="string">"段落现在被隐藏了"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="4-7-链式编程"><a href="#4-7-链式编程" class="headerlink" title="4.7 链式编程"></a>4.7 链式编程</h5><p>直到现在，我们都是一次写一条 jQuery 语句（一条接着另一条）。</p><p>不过，有一种名为链接（chaining）的技术，允许我们在相同的元素上运行多条 jQuery 命令，一条接着另一条。</p><p><strong>提示：</strong> 这样的话，浏览器就不必多次查找相同的元素。</p><p>如需链接一个动作，您只需简单地把该动作追加到之前的动作上。</p><p>下面的例子把 css()、slideUp() 和 slideDown() 链接在一起。”p1” 元素首先会变为红色，然后向上滑动，再然后向下滑动：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#p1"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>).slideUp(<span class="number">2000</span>).slideDown(<span class="number">2000</span>);</span><br></pre></td></tr></table></figure><p>如果需要，我们也可以添加多个方法调用。</p><p><strong>提示：</strong>当进行链接时，代码行会变得很差。不过，jQuery 语法不是很严格；您可以按照希望的格式来写，包含换行和缩进。</p><p>如下书写也可以很好地运行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#p1"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>)</span><br><span class="line">  .slideUp(<span class="number">2000</span>)</span><br><span class="line">  .slideDown(<span class="number">2000</span>);</span><br></pre></td></tr></table></figure><h4 id="五-jQuery-HTML"><a href="#五-jQuery-HTML" class="headerlink" title="五. jQuery HTML"></a>五. jQuery HTML</h4><h5 id="5-1-捕获"><a href="#5-1-捕获" class="headerlink" title="5.1 捕获"></a>5.1 捕获</h5><p>jQuery 拥有可操作 HTML 元素和属性的强大方法。</p><p><strong><em>jQuery DOM 操作</em></strong></p><p>jQuery 中非常重要的部分，就是操作 DOM 的能力。</p><p>jQuery 提供一系列与 DOM 相关的方法，这使访问和操作元素和属性变得很容易。</p><p><strong><em>获得内容 - text()、html() 以及 val()</em></strong></p><p>三个简单实用的用于 DOM 操作的 jQuery 方法：</p><ul><li>text() - 设置或返回所选元素的文本内容</li><li>html() - 设置或返回所选元素的内容（包括 HTML 标记）</li><li>val() - 设置或返回表单字段的值</li></ul><p>下面的例子演示如何通过 jQuery text() 和 html() 方法来获得内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">"Text: "</span> + $(<span class="string">"#test"</span>).text());</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">"HTML: "</span> + $(<span class="string">"#test"</span>).html());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>下面的例子演示如何通过 jQuery val() 方法获得输入字段的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">"值为: "</span> + $(<span class="string">"#test"</span>).val());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>获取属性-attr()</p><p>jQuery attr() 方法用于获取属性值。</p><p>下面的例子演示如何获得链接中 href 属性的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert($(<span class="string">"#a1"</span>).attr(<span class="string">"href"</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="5-2-设置"><a href="#5-2-设置" class="headerlink" title="5.2 设置"></a>5.2 设置</h5><p><strong><em>设置内容 - text()、html() 以及 val()</em></strong></p><p>我们将使用前一章中的三个相同的方法来设置内容：</p><ul><li>text() - 设置或返回所选元素的文本内容</li><li>html() - 设置或返回所选元素的内容（包括 HTML 标记）</li><li>val() - 设置或返回表单字段的值</li></ul><p>下面的例子演示如何通过 text()、html() 以及 val() 方法来设置内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#test1"</span>).text(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#test2"</span>).html(<span class="string">"&lt;b&gt;Hello world!&lt;/b&gt;"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#test3"</span>).val(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><em>text()、html() 以及 val() 的回调函数</em></strong></p><p>上面的三个 jQuery 方法：text()、html() 以及 val()，同样拥有回调函数。回调函数有两个参数：被选元素列表中当前元素的下标，以及原始（旧的）值。然后以函数新值返回您希望使用的字符串。</p><p>下面的例子演示带有回调函数的 text() 和 html()：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#test1"</span>).text(<span class="function"><span class="keyword">function</span>(<span class="params">i,origText</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//return 作用：覆盖origText</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"旧文本: "</span> + origText + <span class="string">" 新文本: Hello world! (index: "</span> + i + <span class="string">")"</span>; </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">$(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#test2"</span>).html(<span class="function"><span class="keyword">function</span>(<span class="params">i,origText</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"旧 html: "</span> + origText + <span class="string">" 新 html: Hello &lt;b&gt;world!&lt;/b&gt; (index: "</span> + i + <span class="string">")"</span>; </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><em>设置属性 - attr()</em></strong></p><p>jQuery attr() 方法也用于设置/改变属性值。</p><p>下面的例子演示如何改变（设置）文本中 color属性的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"#font1"</span>).attr(<span class="string">"color"</span>,<span class="string">"red"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="5-3-添加元素"><a href="#5-3-添加元素" class="headerlink" title="5.3 添加元素"></a>5.3 添加元素</h5><p><strong>添加新的 HTML 内容</strong></p><p>我们将学习用于添加新内容的四个 jQuery 方法：</p><ul><li>append() - 在被选元素的结尾插入内容</li><li>prepend() - 在被选元素的开头插入内容</li><li>after() - 在被选元素之后插入内容</li><li>before() - 在被选元素之前插入内容</li></ul><p><strong>jQuery append() 方法</strong></p><p>jQuery append() 方法在被选元素的结尾插入内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).append(<span class="string">"追加文本"</span>);</span><br></pre></td></tr></table></figure><p><strong>jQuery prepend() 方法</strong></p><p>jQuery prepend() 方法在被选元素的开头插入内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).prepend(<span class="string">"在开头追加文本"</span>);</span><br></pre></td></tr></table></figure><p><strong>通过 append() 和 prepend() 方法添加若干新元素</strong></p><p>在上面的例子中，我们只在被选元素的开头/结尾插入文本/HTML。</p><p>不过，append() 和 prepend() 方法能够通过参数接收无限数量的新元素。可以通过 jQuery 来生成文本/HTML（就像上面的例子那样），或者通过 JavaScript 代码和 DOM 元素。</p><p>在下面的例子中，我们创建若干个新元素。这些元素可以通过 text/HTML、jQuery 或者 JavaScript/DOM 来创建。然后我们通过 append() 方法把这些新元素追加到文本中（对 prepend() 同样有效）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendText</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> txt1=<span class="string">"&lt;p&gt;文本。&lt;/p&gt;"</span>;              <span class="comment">// 使用 HTML 标签创建文本</span></span><br><span class="line">    <span class="keyword">var</span> txt2=$(<span class="string">"&lt;p&gt;&lt;/p&gt;"</span>).text(<span class="string">"文本。"</span>);  <span class="comment">// 使用 jQuery 创建文本</span></span><br><span class="line">    <span class="keyword">var</span> txt3=<span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">    txt3.innerHTML=<span class="string">"文本。"</span>;               <span class="comment">// 使用 DOM 创建文本 text with DOM</span></span><br><span class="line">    $(<span class="string">"body"</span>).append(txt1,txt2,txt3);        <span class="comment">// 追加新元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jQuery after() 和 before() 方法</strong></p><p>jQuery after() 方法在被选元素之后插入内容。</p><p>jQuery before() 方法在被选元素之前插入内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"img"</span>).after(<span class="string">"在后面添加文本"</span>);</span><br><span class="line"> </span><br><span class="line">$(<span class="string">"img"</span>).before(<span class="string">"在前面添加文本"</span>);</span><br></pre></td></tr></table></figure><p><strong>通过 after() 和 before() 方法添加若干新元素</strong></p><p>after() 和 before() 方法能够通过参数接收无限数量的新元素。可以通过 text/HTML、jQuery 或者 JavaScript/DOM 来创建新元素。</p><p>在下面的例子中，我们创建若干新元素。这些元素可以通过 text/HTML、jQuery 或者 JavaScript/DOM 来创建。然后我们通过 after() 方法把这些新元素插到文本中（对 before() 同样有效）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">afterText</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> txt1=<span class="string">"&lt;b&gt;I &lt;/b&gt;"</span>;                    <span class="comment">// 使用 HTML 创建元素</span></span><br><span class="line">    <span class="keyword">var</span> txt2=$(<span class="string">"&lt;i&gt;&lt;/i&gt;"</span>).text(<span class="string">"love "</span>);     <span class="comment">// 使用 jQuery 创建元素</span></span><br><span class="line">    <span class="keyword">var</span> txt3=<span class="built_in">document</span>.createElement(<span class="string">"big"</span>);  <span class="comment">// 使用 DOM 创建元素</span></span><br><span class="line">    txt3.innerHTML=<span class="string">"jQuery!"</span>;</span><br><span class="line">    $(<span class="string">"img"</span>).after(txt1,txt2,txt3);          <span class="comment">// 在图片后添加多个文本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-4-删除元素"><a href="#5-4-删除元素" class="headerlink" title="5.4 删除元素"></a>5.4 删除元素</h5><p><strong>删除元素/内容</strong></p><p>如需删除元素和内容，一般可使用以下两个 jQuery 方法：</p><ul><li>remove() - 删除被选元素（及其子元素）</li><li>empty() - 从被选元素中删除子元素</li></ul><p><strong>jQuery remove(选择器) 方法</strong></p><p>jQuery remove() 方法删除被选元素及其子元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#div1"</span>).remove();</span><br></pre></td></tr></table></figure><p><strong>jQuery empty() 方法</strong></p><p>jQuery empty() 方法删除被选元素的子元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#div1"</span>).empty();</span><br></pre></td></tr></table></figure><p><strong>过滤被删除的元素</strong></p><p>jQuery remove() 方法也可接受一个参数，允许您对被删元素进行过滤。</p><p>==该参数可以是任何 jQuery 选择器的语法。==</p><p>下面的例子删除 class=”italic” 的所有 <p> 元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).remove(<span class="string">".italic"</span>);</span><br></pre></td></tr></table></figure><h5 id="5-5-CSS类"><a href="#5-5-CSS类" class="headerlink" title="5.5 CSS类"></a>5.5 CSS类</h5><p><strong>jQuery 操作 CSS</strong></p><p>jQuery 拥有若干进行 CSS 操作的方法。我们将学习下面这些：</p><ul><li>addClass() - 向被选元素添加一个或多个类</li><li>removeClass() - 从被选元素删除一个或多个类</li><li>toggleClass() - 对被选元素进行添加/删除类的切换操作</li><li>css() - 设置或返回样式属性</li></ul><p><strong>实例样式表</strong></p><p>下面的样式表将用于本页的所有例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.important</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="attribute">font-weight</span>:bold;</span><br><span class="line">        <span class="attribute">font-size</span>:xx-large;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.blue</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jQuery addClass() 方法</strong></p><p>下面的例子展示如何向不同的元素添加 class 属性。当然，在添加类时，您也可以选取多个元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"h1,h2,p"</span>).addClass(<span class="string">"blue"</span>);</span><br><span class="line">  $(<span class="string">"div"</span>).addClass(<span class="string">"important"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>您也可以在 addClass() 方法中规定多个类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"body div:first"</span>).addClass(<span class="string">"important blue"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>jQuery removeClass() 方法</strong></p><p>下面的例子演示如何在不同的元素中删除指定的 class 属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//复合选择器：并集选择器，选中所有h1标签，h2标签和p标签</span></span><br><span class="line">    <span class="comment">//*表示选中所有标签,即$("*")</span></span><br><span class="line">  $(<span class="string">"h1,h2,p"</span>).removeClass(<span class="string">"blue"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>jQuery toggleClass() 方法</strong></p><p>下面的例子将展示如何使用 jQuery toggleClass() 方法。该方法对被选元素进行添加/删除类的切换操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"h1,h2,p"</span>).toggleClass(<span class="string">"blue"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="5-6-css-方法"><a href="#5-6-css-方法" class="headerlink" title="5.6 css()方法"></a>5.6 css()方法</h5><p><strong>jQuery css() 方法</strong></p><p>css() 方法设置或返回被选元素的一个或多个样式属性。</p><p><strong>返回 CSS 属性</strong></p><p>如需返回指定的 CSS 属性的值，请使用如下语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">css(<span class="string">"propertyname"</span>);</span><br></pre></td></tr></table></figure><p>下面的例子将返回首个匹配元素的 background-color 值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).css(<span class="string">"background-color"</span>);</span><br></pre></td></tr></table></figure><p><strong>设置 CSS 属性</strong></p><p>如需设置指定的 CSS 属性，请使用如下语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">css(<span class="string">"propertyname"</span>,<span class="string">"value"</span>);</span><br></pre></td></tr></table></figure><p>下面的例子将为所有匹配元素设置 background-color 值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p><strong>设置多个 CSS 属性</strong></p><p>如需设置多个 CSS 属性，请使用如下语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">css(&#123;<span class="string">"propertyname"</span>:<span class="string">"value"</span>,<span class="string">"propertyname"</span>:<span class="string">"value"</span>,...&#125;);</span><br></pre></td></tr></table></figure><p>下面的例子将为所有匹配元素设置 background-color 和 font-size：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).css(&#123;<span class="string">"background-color"</span>:<span class="string">"yellow"</span>,<span class="string">"font-size"</span>:<span class="string">"200%"</span>&#125;);</span><br></pre></td></tr></table></figure><h5 id="5-7-尺寸"><a href="#5-7-尺寸" class="headerlink" title="5.7 尺寸"></a>5.7 尺寸</h5><p><strong>jQuery 尺寸方法</strong></p><p>jQuery 提供多个处理尺寸的重要方法：</p><ul><li>width()</li><li>height()</li><li>innerWidth()</li><li>innerHeight()</li><li>outerWidth()</li><li>outerHeight()</li></ul><p><img src="img\1.png" alt="1"></p><p><strong>jQuery width() 和 height() 方法</strong></p><p>width() 方法设置或返回元素的宽度（==不包括内边距、边框或外边距==）。</p><p>height() 方法设置或返回元素的高度（==不包括内边距、边框或外边距==）。</p><p>下面的例子返回指定的 &lt;div&gt; 元素的宽度和高度：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> txt=<span class="string">""</span>;</span><br><span class="line">  txt+=<span class="string">"div 的宽度是: "</span> + $(<span class="string">"#div1"</span>).width() + <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">  txt+=<span class="string">"div 的高度是: "</span> + $(<span class="string">"#div1"</span>).height();</span><br><span class="line">  $(<span class="string">"#div1"</span>).html(txt);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>jQuery innerWidth() 和 innerHeight() 方法</strong></p><p>innerWidth() 方法返回元素的宽度（==包括内边距==）。</p><p>innerHeight() 方法返回元素的高度（==包括内边距==）。</p><p>下面的例子返回指定的 &lt;div&gt; 元素的 inner-width/height：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> txt=<span class="string">""</span>;</span><br><span class="line">  txt+=<span class="string">"div 宽度，包含内边距: "</span> + $(<span class="string">"#div1"</span>).innerWidth() + <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">    txt+=<span class="string">"div 高度，包含内边距: "</span> + $(<span class="string">"#div1"</span>).innerHeight();</span><br><span class="line">  $(<span class="string">"#div1"</span>).html(txt);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>jQuery outerWidth() 和 outerHeight() 方法</strong></p><p>outerWidth() 方法返回元素的宽度（包括内边距和边框）。</p><p>outerHeight() 方法返回元素的高度（包括内边距和边框）。</p><p>下面的例子返回指定的 &lt;div&gt; 元素的 outer-width/height：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> txt=<span class="string">""</span>;</span><br><span class="line">  txt+=<span class="string">"div 宽度，包含内边距和边框: "</span> + $(<span class="string">"#div1"</span>).outerWidth() + <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">  txt+=<span class="string">"div 高度，包含内边距和边框: "</span> + $(<span class="string">"#div1"</span>).outerHeight();</span><br><span class="line">  $(<span class="string">"#div1"</span>).html(txt);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="七-jQuery遍历"><a href="#七-jQuery遍历" class="headerlink" title="七. jQuery遍历"></a>七. jQuery遍历</h4><h5 id="6-1-遍历"><a href="#6-1-遍历" class="headerlink" title="6.1 遍历"></a>6.1 遍历</h5><p>jQuery 遍历，意为”移动”，用于根据其相对于其他元素的关系来”查找”（或选取）HTML 元素。以某项选择开始，并沿着这个选择移动，直到抵达您期望的元素为止。</p><p>下图展示了一个家族树。通过 jQuery 遍历，您能够从被选（当前的）元素开始，轻松地在家族树中向上移动（祖先），向下移动（子孙），水平移动（同胞）。这种移动被称为对 DOM 进行遍历。</p><p>#####6.2 祖先</p><p><strong>jQuery parent() 方法</strong></p><p>parent() 方法返回被选元素的==直接父元素==。</p><p>该方法只会向上一级对 DOM 树进行遍历。</p><p>下面的例子返回每个 <span> 元素的的直接父元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"span"</span>).parent();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>jQuery parents() 方法</strong></p><p>parents() 方法返回被选元素的==所有祖先元素==，它一路向上直到文档的根元素 (<html>)。</p><p>下面的例子返回所有 <span> 元素的所有祖先：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"span"</span>).parents();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>您也可以使用可选参数来过滤对祖先元素的搜索。</p><p>下面的例子返回所有 <span> 元素的所有祖先，并且它是 <ul> 元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"span"</span>).parents(<span class="string">"ul"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>jQuery parentsUntil() 方法</strong></p><p>parentsUntil() 方法返回介于两个给定元素之间的所有祖先元素。</p><p>下面的例子返回介于 <span> 与 <div> 元素之间的所有祖先元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"span"</span>).parentsUntil(<span class="string">"div"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>#####6.3 后代</p><p><strong>jQuery children() 方法</strong></p><p>children() 方法返回被选元素的所有直接子元素。</p><p>该方法只会向下一级对 DOM 树进行遍历。</p><p>下面的例子返回每个 <div> 元素的==所有直接子元素：==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"div"</span>).children();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>您也可以使用==可选参数（参数为选择器）来过滤对子元素的搜索==。</p><p>下面的例子返回类名为 “1” 的所有 <p> 元素，并且它们是 <div> 的直接子元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"div"</span>).children(<span class="string">"p.1"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>jQuery find() 方法</strong></p><p>find() 方法返回==被选元素的后代元素，一路向下直到最后一个后代。==</p><p>下面的例子返回属于 <div> 后代的所有 <span> 元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"div"</span>).find(<span class="string">"span"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>下面的例子返回 <div> 的==所有后代==：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"div"</span>).find(<span class="string">"*"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>#####6.4 同胞</p><p><strong>jQuery siblings() 方法</strong></p><p>siblings() 方法返回被选元素的所有同胞元素。</p><p>下面的例子返回 <h2> 的==所有同胞元素：==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"h2"</span>).siblings();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>您也可以使用==可选参数（选择器）来过滤对同胞元素的搜索。==</p><p>下面的例子返回属于 <h2> 的同胞元素的所有 <p> 元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"h2"</span>).siblings(<span class="string">"p"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>jQuery next() 方法</strong></p><p>next() 方法返回被选元素的==下一个同胞元素。==</p><p>该方法只返回一个元素。</p><p>下面的例子返回 <h2> 的下一个同胞元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"h2"</span>).next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>jQuery nextAll() 方法</strong></p><p>nextAll() 方法返回被选元素的==所有跟随的同胞元素。==</p><p>下面的例子返回 <h2> 的所有跟随的同胞元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"h2"</span>).nextAll();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>jQuery nextUntil() 方法</strong></p><p>nextUntil() 方法返回==介于两个给定参数之间的所有跟随的同胞元素。==</p><p>下面的例子返回介于 <h2> 与 <h6> 元素之间的所有同胞元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"h2"</span>).nextUntil(<span class="string">"h6"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>#####6.5 过滤</p><p><strong>jQuery first() 方法</strong></p><p>==first() 方法返回被选元素的首个元素。==</p><p>下面的例子选取首个 <div> 元素内部的第一个 <p> 元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"div p"</span>).first();<span class="comment">//注意，对两上标签都有效</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>jQuery last() 方法</strong></p><p>==last() 方法返回被选元素的最后一个元素。==</p><p>下面的例子选择最后一个 <div> 元素中的最后一个 <p> 元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"div p"</span>).last();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>jQuery eq() 方法</strong></p><p>eq() 方法返回被选元素中带有指定索引号的元素。</p><p>索引号从 0 开始，因此首个元素的索引号是 0 而不是 1。下面的例子选取第二个 <p> 元素（索引号 1）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"p"</span>).eq(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>jQuery filter() 方法</strong></p><p>filter() 方法允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回。</p><p>下面的例子返回带有类名 “url” 的所有 <p> 元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"p"</span>).filter(<span class="string">".url"</span>);<span class="comment">//包含</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>jQuery not() 方法</strong></p><p>not() 方法返回不匹配标准的所有元素。</p><p>提示：not() 方法与 filter() 相反。</p><p>下面的例子返回不带有类名 “url” 的所有 <p> 元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"p"</span>).not(<span class="string">".url"</span>);<span class="comment">//不包含</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>####七. jQuery AJAX</p><p>#####7.1 jQuery AJAX简介</p><p><strong>什么是 AJAX？</strong></p><p>AJAX = 异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。</p><p>简短地说，在不重载整个网页的情况下，AJAX 通过后台加载数据，并在网页上进行显示。</p><p>使用 AJAX 的应用程序案例：谷歌地图、腾讯微博、优酷视频、人人网等等。</p><h5 id="7-2-load方法"><a href="#7-2-load方法" class="headerlink" title="7.2 load方法"></a>7.2 load方法</h5><p><strong>jQuery load() 方法</strong></p><p>jQuery load() 方法是简单但强大的 AJAX 方法。</p><p>load() 方法==从服务器加载数据==，==并把返回的数据放入被选元素中。==</p><p><strong>语法:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).load(URL,data,callback);</span><br></pre></td></tr></table></figure><p>必需的 <em>URL</em> 参数规定您希望加载的 URL。</p><p>可选的 <em>data</em> 参数规定与请求一同发送的查询字符串键/值对集合。</p><p>可选的 <em>callback</em> 参数是 load() 方法完成后所执行的函数名称。</p><p>这是示例文件（”demo_test.txt”）的内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>jQuery AJAX 是个非常棒的功能！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>这是段落的一些文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面的例子会把文件 “demo_test.txt” 的内容加载到指定的 <div> 元素中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#div1"</span>).load(<span class="string">"demo_test.txt"</span>);</span><br></pre></td></tr></table></figure><p>也可以把 jQuery 选择器添加到 URL 参数。</p><p>下面的例子把 “demo_test.txt” 文件中 id=”p1” 的元素的内容，加载到指定的 <div> 元素中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#div1"</span>).load(<span class="string">"demo_test.txt #p1"</span>);</span><br></pre></td></tr></table></figure><p>可选的 callback 参数规定当 load() 方法完成后所要允许的回调函数。回调函数可以设置不同的参数：</p><ul><li><em>responseTxt</em> - 包含调用成功时的结果内容</li><li><em>statusTXT</em> - 包含调用的状态</li><li><em>xhr</em> - 包含 XMLHttpRequest 对象</li></ul><p>下面的例子会在 load() 方法完成后显示一个提示框。如果 load() 方法已成功，则显示”外部内容加载成功！”，而如果失败，则显示错误消息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"#div1"</span>).load(<span class="string">"demo_test.txt"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">responseTxt,statusTxt,xhr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(statusTxt==<span class="string">"success"</span>)</span><br><span class="line">      alert(<span class="string">"外部内容加载成功!"</span>);</span><br><span class="line">    <span class="keyword">if</span>(statusTxt==<span class="string">"error"</span>)</span><br><span class="line">      alert(<span class="string">"Error: "</span>+xhr.status+<span class="string">": "</span>+xhr.statusText);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="7-3-get和post方法"><a href="#7-3-get和post方法" class="headerlink" title="7.3 get和post方法"></a>7.3 get和post方法</h5><p><strong>jQuery $.get() 方法</strong></p><p>$.get() 方法通过 HTTP GET 请求从服务器上请求数据。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.get(URL,callback);</span><br></pre></td></tr></table></figure><p>必需的 <em>URL</em> 参数规定您希望请求的 URL。</p><p>可选的 <em>callback</em> 参数是请求成功后所执行的函数名。</p><p>下面的例子使用 $.get() 方法从服务器上的一个文件中取回数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $.get(<span class="string">"demo_test.php"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data,status</span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"数据: "</span> + data + <span class="string">"\n状态: "</span> + status);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>jQuery $.post() 方法</strong></p><p>$.post() 方法通过 HTTP POST 请求从服务器上请求数据。</p><p><strong>语法:</strong></p><p>$.post(<em>URL,data,callback</em>);</p><p>必需的 <em>URL</em> 参数规定您希望请求的 URL。</p><p>可选的 <em>data</em> 参数规定连同请求发送的数据。</p><p>可选的 <em>callback</em> 参数是请求成功后所执行的函数名。</p><p>下面的例子使用 $.post() 连同请求一起发送数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.post(<span class="string">"/try/ajax/demo_test_post.jsp"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        name:<span class="string">"百度"</span>,</span><br><span class="line">        url:<span class="string">"http://www.baidu.com"</span></span><br><span class="line">    &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">data,status</span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"数据: \n"</span> + data + <span class="string">"\n状态: "</span> + status);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="7-5-ajax（）方法"><a href="#7-5-ajax（）方法" class="headerlink" title="7.5 ajax（）方法"></a>7.5 ajax（）方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&lt;/h1&gt;</span><br><span class="line">&lt;form action=&quot;#&quot;&gt;</span><br><span class="line">用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; &lt;br&gt; &lt;input</span><br><span class="line">type=&quot;button&quot; value=&quot;doAjax&quot; id=&quot;btn&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(function() &#123;</span><br><span class="line">$(&quot;#btn&quot;).click(function() &#123;</span><br><span class="line"></span><br><span class="line">var un = $(&quot;input[type=&apos;text&apos;]&quot;).val();</span><br><span class="line">//发送ajax请求</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url : &quot;ajax.do&quot;,</span><br><span class="line">data : &#123;</span><br><span class="line">&quot;username&quot; : un</span><br><span class="line">&#125;,</span><br><span class="line">//data:&quot;username=&quot;+un,</span><br><span class="line">type : &quot;post&quot;,//请求方法</span><br><span class="line">dataType : &quot;json&quot;,//服务器写回数据的类型text|json|xml|script</span><br><span class="line">cache : false,//是否启用浏览器缓存</span><br><span class="line">async : true,//异步</span><br><span class="line">success : function(rec) &#123;</span><br><span class="line">$(&quot;h1&quot;).html(rec.mess);</span><br><span class="line">&#125;,</span><br><span class="line">error : function() &#123;</span><br><span class="line"></span><br><span class="line">alert(&quot;发送ajax失败&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="八-其他"><a href="#八-其他" class="headerlink" title="八. 其他"></a>八. 其他</h4><p>#####8.1 jQuery noConflict方法</p><p><strong>jQuery 和其他 JavaScript 框架</strong></p><p>正如您已经了解到的，jQuery 使用 $ 符号作为 jQuery 的简写。</p><p>如果其他 JavaScript 框架也使用 $ 符号作为简写怎么办？</p><p>其他一些 JavaScript 框架包括：MooTools、Backbone、Sammy、Cappuccino、Knockout、JavaScript MVC、Google Web Toolkit、Google Closure、Ember、Batman 以及 Ext JS。</p><p>其中某些框架也使用 $ 符号作为简写（就像 jQuery），如果您在用的两种不同的框架正在使用相同的简写符号，有可能导致脚本停止运行。</p><p>jQuery 的团队考虑到了这个问题，并实现了 noConflict() 方法。</p><p><strong>jQuery noConflict() 方法</strong></p><p>noConflict() 方法会释放对 $ 标识符的控制，这样其他脚本就可以使用它了。</p><p>当然，您仍然可以通过全名替代简写的方式来使用 jQuery：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.noConflict();<span class="comment">//不使用$,使用默认的字符串jQuery</span></span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  jQuery(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    jQuery(<span class="string">"p"</span>).text(<span class="string">"jQuery 仍然在工作!"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>您也可以创建自己的简写。noConflict() 可返回对 jQuery 的引用，您可以把它存入变量，以供稍后使用。请看这个例子： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jq = $.noConflict();<span class="comment">//不使用$，使用自定义标识</span></span><br><span class="line">jq(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  jq(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    jq(<span class="string">"p"</span>).text(<span class="string">"jQuery 仍然在工作!"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果你的 jQuery 代码块使用 $ 简写，并且您不愿意改变这个快捷方式，那么您可以把 $ 符号作为变量传递给 ready 方法。这样就可以在函数内使用 $ 符号了 - 而在函数外，依旧不得不使用 “jQuery”：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.noConflict();</span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"p"</span>).text(<span class="string">"jQuery 仍然在工作!"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="作业题"><a href="#作业题" class="headerlink" title="作业题"></a>作业题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1、写一个综合模块，要求能够尽可能多的使用jQuery实现</span><br></pre></td></tr></table></figure><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、jQuery的美元符号$有什么作用？</span><br><span class="line">2、body中的onload()函数和jQuery中的document.ready()有什么区别？</span><br><span class="line">3、jQuery中有哪几种类型的选择器？</span><br><span class="line">4、如何用jQuery禁用浏览器的前进后退按钮？</span><br></pre></td></tr></table></figure></script></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;jQuery&quot;&gt;&lt;a href=&quot;#jQuery&quot; class=&quot;headerlink&quot; title=&quot;jQuery&quot;&gt;&lt;/a&gt;jQuery&lt;/h3&gt;&lt;h4 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今日内容&quot; class=&quot;headerlink&quot; title=&quot;今
      
    
    </summary>
    
    
  </entry>
  
</feed>
